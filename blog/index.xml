<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on わみめも</title>
    <link>https://wamisnet.github.io/blog/</link>
    <description>Recent content in Blog on わみめも</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 24 Jul 2020 16:41:21 +0000</lastBuildDate>
    
	<atom:link href="https://wamisnet.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>残機が 1up できそうな音を鳴らしてみた</title>
      <link>https://wamisnet.github.io/blog/2020-07-25-buzzer/</link>
      <pubDate>Fri, 24 Jul 2020 16:41:21 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-25-buzzer/</guid>
      <description>残機が 1up できそうな音楽鳴らしてみた
耳コピなので違ってもご容赦をｗ
1up できそうな効果音をブザーでならしてみた pic.twitter.com/HwPZjwZ6ZA
&amp;mdash; わみ (@wamisnet) July 24, 2020  必要な部材  ESP32 Buzzer  プログラム #define PIN_BUZZER 22 void setup(){ ledcSetup(1, 12000, 8); ledcAttachPin(PIN_BUZZER, 1); } void loop(){ ledcWriteTone(1, 1318.510); //ミ  delay(125); ledcWriteTone(1, 1567.982); //ソ  delay(125); ledcWriteTone(1, 2637.020); //ミ  delay(125); ledcWriteTone(1, 2093.005); //ド  delay(125); ledcWriteTone(1, 2349.318); //レ  delay(125); ledcWriteTone(1, 3135.963); //ソ  delay(125); ledcWriteTone(1, 0); delay(10000); } </description>
    </item>
    
    <item>
      <title>太陽光発電の遠隔監視システムを簡単につくってみた</title>
      <link>https://wamisnet.github.io/blog/2020-07-19-obniz_powerchecker/</link>
      <pubDate>Sun, 19 Jul 2020 07:44:34 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-19-obniz_powerchecker/</guid>
      <description>太陽光発電の監視システムを簡単に作ってみたお話をまとめてみました。
Google スプレッドシートにセンサーで取得したバッテリーの電圧や電流を送って可視化するものを作っていきます。
定期的に電圧が上がって充電できているのが確認できます！
充電しているときは電流がマイナス側に流れて、放電するときには電流がプラス側に流れます。
必要な部材  太陽光パネルとコントローラー Amazon | 単結晶 ソーラーパネル 40W＋10Aチャージコントローラーセット！12V蓄電に | 太陽光パネル  単結晶 ソーラーパネル 40W＋10Aチャージコントローラーセット！12V蓄電にが太陽光パネルストアでいつでもお買い得。当日お急ぎ便対象商品は、当日お届け可能です。アマゾン配送商品は、通常配送無料（一部除く）。  https://www.amazon.co.jp/dp/B075W67Q8C/ref=cm_sw_r_tw_dp_x_Ma8eFb6VZMMYX     バッテリー Amazon | LONG 12V 12Ah 高性能シールドバッテリー WP12-12 WP12-12 | バイクバッテリー | 車＆バイク  LONG 12V 12Ah 高性能シールドバッテリー WP12-12 WP12-12がバイクバッテリーストアでいつでもお買い得。当日お急ぎ便対象商品は、当日お届け可能です。アマゾン配送商品は、通常配送無料（一部除く）。  https://www.amazon.co.jp/dp/B01KO9LQJA/ref=cm_sw_r_tw_dp_x_7.7eFb59S42SR     obniz Amazon.com: obniz Board - Unlimited Cloud License Included - IoT PoC Javascript HTML5 Python Microprocessor Industrial Block Program stem Education DIY Electronics Wi-Fi BLE UART SPI I2C Motor Driver Robot: Toys &amp;amp; Games  Amazon.</description>
    </item>
    
    <item>
      <title>開発時以外でESP32のシリアルログからバックトレースする方法</title>
      <link>https://wamisnet.github.io/blog/2020-07-14-esp32-backtrace/</link>
      <pubDate>Tue, 14 Jul 2020 06:45:39 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-14-esp32-backtrace/</guid>
      <description>IDF Monitor - ESP32 - — ESP-IDF Programming Guide latest documentation  https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/tools/idf-monitor.html    ESP32ではエラーがでるとこんな感じのログが吐かれます。
Guru Meditation Error of type StoreProhibited occurred on core 0. Exception was unhandled.Register dump:PC : 0x400f360d PS : 0x00060330 A0 : 0x800dbf56 A1 : 0x3ffb7e00A2 : 0x3ffb136c A3 : 0x00000005 A4 : 0x00000000 A5 : 0x00000000A6 : 0x00000000 A7 : 0x00000080 A8 : 0x00000000 A9 : 0x3ffb7dd0A10 : 0x00000003 A11 : 0x00060f23 A12 : 0x00060f20 A13 : 0x3ffba6d0A14 : 0x00000047 A15 : 0x0000000f SAR : 0x00000019 EXCCAUSE: 0x0000001dEXCVADDR: 0x00000000 LBEG : 0x4000c46c LEND : 0x4000c477 LCOUNT : 0x00000000Backtrace: 0x400f360d:0x3ffb7e00 0x400dbf56:0x3ffb7e20 0x400dbf5e:0x3ffb7e40 0x400dbf82:0x3ffb7e60 0x400d071d:0x3ffb7e90 この部分をバックトレースします。</description>
    </item>
    
    <item>
      <title>Wi-SUNについてしらべてみた</title>
      <link>https://wamisnet.github.io/blog/2020-07-11-wi_sun/</link>
      <pubDate>Fri, 10 Jul 2020 17:15:28 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-11-wi_sun/</guid>
      <description>Wi-SUNを使うのであれば、BP35C0-J11を使うのがよさそう
Enhanced HANというプロファイルがあり、スリープとかできてzigbeeのように扱えるっぽい
Wi-SUNの規格について| スマートメーターBルートブログ  Wi-SUNの規格について  http://route-b.iij.ad.jp/archives/1521    程よく飛んでくれそうな感じもする。
Lora系よりも通信の自由度がありそうで、zigbeeより飛ぶっぽい
消費電力とか見ていると意外とすくない
 送信時：47mA 受信時：27mA スリープ時：4uA  外形寸法 [mm] 15.0x19.0x3.0
Wi-SUN Enhanced HAN対応無線モジュール - BP35C0-J11 | ローム株式会社 - ROHM Semiconductor  「BP35C0-J11」は、業界トップクラスの受信感度を持つ920MHz帯無線通信機能（RF）とマイコン、Wi-SUNに最適な大容量メモリを内蔵するラピスセミコンダクタ製無線通信LSI「ML7416N」を搭載した、アンテナ外付けの小型面実装Wi-SUNモジュールです。Wi-SUN ProfileのBルートとEnhanced HANに対応し、業界最小クラスの15mm×19mmサイズを実現しているため、HEMSコントローラーや各種家電への採用に最適です。もちろん日本の電波法認証取得済みの製品となっています。BP35C0-J11は、Wi-SUN通信の基準器（CTBU）です。様々なWi-SUN機器との高い接続信頼性を持っています。独自機能の「FOTA（Firmware update Over The Air）」を搭載しており、遠隔からのファームウェア更新が可能です。「BP35C0-J11」を評価していただく方向けに、基板実装したアダプターボード「BP35C0-J11-T01」をネット商社から販売中です。一個から購入可能で、簡単に評価を行うことができます。ファームウェアの更新情報をお届け！メール通知の設定方法(PDF)  https://www.rohm.co.jp/products/wireless-communication/specified-low-power-radio-modules/bp35c0-j11-product    アンテナは外付けなので適当にみて検索した感じだとマルツで取り扱ってるみたい
bp35c0_antennalist_an-j.pdf  https://fscdn.rohm.com/jp/products/databook/applinote/module/wireless/bp35c0_antennalist_an-j.pdf    100個買えば400円らしい
1018-456A(T18-018-1098) 板金アンテナ 1018-456A｜電子部品・半導体通販のマルツ  【1018-456A】1018-456A(T18-018-1098) 板金アンテナ 800.00円 スタッフ株式会社製|18:00までのご注文を翌日お届け、3,000円以上購入で送料無料。LPWA(920MHz)、3G/LTE(4G)、GNSS L1などに使用できる高性能な板金アンテナです。【仕様】・対応周波数：814MHz〜960MHz/1575.42MHz〜2170MHz・形式：単  https://www.marutsu.co.jp/pc/i/1556732/     安いのか高いのかいまいち相場がよくわからん。</description>
    </item>
    
    <item>
      <title>ArmマイコンのSAML11を触り始めた</title>
      <link>https://wamisnet.github.io/blog/2020-07-07-saml11_started/</link>
      <pubDate>Mon, 06 Jul 2020 16:45:05 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-07-saml11_started/</guid>
      <description>下記の開発ボードを購入した。
SAML11 Xplained Pro Evaluation Kit  https://www.microchip.com/DevelopmentTools/ProductDetails/dm320205    Atmel Studioをインストールして、開発をしていくみたい。
開発ボードのドキュメントに始め方のPDFがあったのでそれを見ながら作業している
Getting-Started-with-SAM%20L10L11-Xplained-Pro-DS00002722A.pdf  http://ww1.microchip.com/downloads/en/Appnotes/Getting-Started-with-SAM%20L10L11-Xplained-Pro-DS00002722A.pdf    セキュアに機能を動かせるのが面白くて試してみたいと思って購入した。
まだLチカしかできていないが遊んでいきたい</description>
    </item>
    
    <item>
      <title>HugoのShortcodeを活用してみた</title>
      <link>https://wamisnet.github.io/blog/2020-07-05-hugo_shortcode/</link>
      <pubDate>Sun, 05 Jul 2020 05:59:12 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-05-hugo_shortcode/</guid>
      <description>下記のサイトを参考にshortcodeをつくってみました。
ショートコード作成の解説 | Hugo 入門 / 解説 | nasust dev blog  こんにちはnasustです。 今回は、Hugoでショートコード作成の解説をします。 ショートコードとは Markdown文章中に {{&amp;lt; ショートコードテ...  https://nasust.com/hugo/tips/shortcode/     Hugoでブログカードに対応する | Hugo 入門 / 解説 | nasust dev blog  こんにちはnasustです。 今回は、Hugoでブログカードに対応する方法を紹介します。 私のもう1つのブログは、はてなブログを使用しています。...  https://nasust.com/hugo/shortcode/blogcard/     2つのshortcodeを追加しました。
warning 警告文を出すようのものですね
warning Warning 各自の環境で同様に動作する保証はありません。   こんなコードを書いたら、上のようにきれいにしてくれちゃうんです。
{{&amp;lt; warning &amp;gt;}} 各自の環境で同様に動作する保証はありません。 {{&amp;lt; /warning &amp;gt;}} link card リンクですね、Notionみたいに横並びにしようか悩みましたが、縦ならびでもよさそうなので、これで。
わみめも  NefryやSofmoといった開発者向けボードを作ったり、AndroidやFlutterアプリ作ったり、Webで遊んでみたり、手当たり次第になんでもやっちゃう人のサイト  https://wamisnet.github.io/     {{&amp;lt; linkcard &amp;#34;https://wamisnet.</description>
    </item>
    
    <item>
      <title>このサイトの構成について</title>
      <link>https://wamisnet.github.io/blog/2020-07-05-site_info/</link>
      <pubDate>Sat, 04 Jul 2020 15:01:35 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-05-site_info/</guid>
      <description>warning Warning 各自の環境で同様に動作する保証はありません。   使用技術 このサイトでは下記の技術を使用して構成されています。
  Hugo
 テンプレート: hugo-future-imperfect-slim    CircleCi
 Docker    Netlify CMS
 firebase cloud Functions    GitHub
 GitHub pages    こんな感じでしょうか。
Hugo 静的サイトジェネレータとしてマークダウンからHTMLを生成しています。 テンプレートを使用して、デザインを整えています。
CircleCI マークダウンを更新してGithubにコミットをすると、CIが発火してHTMLを自動的に生成してくれます。 後述する、CMSでマークダウンを書いたら自動的にビルドして、デプロイしてくれます。
記事を書くだけでOKなのはらくちん
Netlify CMS 別の記事で軽く書きましたが、WordPressのようなコンテンツ管理システムになります。
この記事もCMS上で書いてます。
認証にFirebaseを使っています。
auto save的なものがあるといいなぁ
GitHub マークダウンやホームページの配布までまるっとやってもらっています。
GitHubが使えるということは差分やプルリクで管理するといったこともできます。
いつもと同じ感じに記事がかけるって便利ですね
こんな感じの構成になっています。
次の項目でどういう手順でいろんなものが連動して動いているのか確認しておこうと思います。
動作手順(私から見た動作)  Netlify CMSにログインして、記事を書く 記事を書き終えたら、Netlify CMSの公開ボタンを押す ホームページで記事が公開される  めちゃくちゃ普通のサービスと一緒ですね
動作手順(サービス側の動作)  Netlify CMSにログインして、記事を書く 保存を押すと、記事用のブランチが生成されてGitHubにコミットされる 記事を書き終えたら、Netlify CMSの公開ボタンを押す GitHubにプルリクエストが生成され、自動的に承認される CircleCIが特定のブランチが更新されたのを確認し、Hugoのビルドを開始する ビルドされたものをGitHubにコミットする GitHub Pagesでコミットされた内容でホームページが更新される  裏側ではいろいろ動いてくれますが、なにも気にしなくてOKです！</description>
    </item>
    
    <item>
      <title>Firebase使ってログインできるようになったよ！</title>
      <link>https://wamisnet.github.io/blog/firebase_login/</link>
      <pubDate>Fri, 03 Jul 2020 14:54:18 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/firebase_login/</guid>
      <description>Firebaseでログインできるようになりました！</description>
    </item>
    
    <item>
      <title>NetlifyCMSから投稿テスト</title>
      <link>https://wamisnet.github.io/blog/2020-07-03-netlifycms/</link>
      <pubDate>Fri, 03 Jul 2020 12:24:48 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-07-03-netlifycms/</guid>
      <description>こんな感じのエディタから入力して、記事を投稿できるんだよ！ めっちゃええやん？
こんな感じで画像をいれたり
function hello(){ console.log(&amp;#34;hello world!&amp;#34;); } みたいにコードいれたりいろいろできるっぽい</description>
    </item>
    
    <item>
      <title>Suicaで開けられるスマートロックを作ってみた</title>
      <link>https://wamisnet.github.io/blog/2020-01-03-smartlock/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2020-01-03-smartlock/</guid>
      <description>こんにちは！わみです。
私が住むギークハウス新宿がついにアップデートされました。
少し前にはスマートロックを壊したこともありましたが… (その時の記事 :スマートロックが壊れたのでobnizを使ってハックしてみた)
Sesameをもう一台新たに購入して、ついに完成をしました！
なにをしたのか 音が鳴るよ！
@fukubaka0825 さんと @retoruto_carry さんと作った鍵システムがついに動いたああああ！ pic.twitter.com/uQZ44INF93
&amp;mdash; わみ@NefryとかFlutter本とか (@wamisnet) January 1, 2020  登録されていないSuicaの場合はエラー音を、登録されたSuicaの場合は効果音の後、obnizからBLE経由でSesameをコントロールします。
早いときだとタッチして、すぐに鍵が開くのでめちゃくちゃ便利です。
きっかけ スマートロックが壊れたのでobnizを使ってハックしてみた
上記の記事でも書いているのですが、7月の開発合宿で作りかけのまま止まっていたスマートロックの制御をしたいと思っていて、ただSesame API経由だと鍵が開くまで時間がかかりすぎる。
その解決で前回、私はハードウエアのハックをしたわけですが、安定動作を担保するのはなかなかめんどくさいので結局本番反映はしませんでした。
今回は安定稼働はSesameを信用し、BLEで制御をするように変更してこっちのスマートロック制御が壊れても問題ないようにしました。
技術構成 今回はギークハウス新宿に住む3人の力を合わせて作りました。 メインの担当箇所はこんな感じです。
@fukubaka0825 : Suica認証、Sesame開錠指示　（記事 : Raspberry pi とGoとMackerelでシェアハウスの運用しやすい鍵システムを作る  ） @retoruto_carry : Suica登録用Webページ（記事 : 【おうちハック】開発合宿で3人でシェアハウスの鍵管理システムを作った【チーム開発】） @wamisnet : Sesame開錠デバイス作成、ハードウエア（記事 : 本記事）
全体構成はすこし大きめですが、次の画像の通りです。
せっかくなので私の担当箇所について深堀していきます。
Sesameハック https://qiita.com/odetarou/items/9628d66d4d94290b5f2d
上記の方の手順を参考に設定値を取得します。
AndroidのRoot化だったり、しれっとやってますが普通に一日がかりかかるようなやつでいろいろ私も初めてでしたが、頑張ってSesameのBLEキーを取得します。 Xposedモジュールつくるのも個人的にはハマったり…
取得できれば、ほぼほぼ完成です。
上記の記事だと、Macで接続していますがMacを持っていないもしくはバージョンが違うとうまく動かなかったです。（これだから…
めんどくさいなぁ…そんなことを思っていたら、そういえばobnizもnobleライブラリ出していたなと…
https://qiita.com/wicket/items/16622097b8e6b5758d80
これに書かれているように、nobleを呼び出しているところを変更しました。 一応、全体のコードをGithubに上げておきましたのでぜひ。
https://github.com/wamisnet/obniz_sesame_noble
obniz 今回みたいなnobleで動かしたいときに、パソコンを置いておくみたいなことはなかなか難しい…
そんなときにはobniz!!
6000円ぐらいでNode.jsで動かせるデバイスをゲットできます。
プログラム const crypto = require(&amp;#39;crypto&amp;#39;); const Peripheral = require(&amp;#34;obniz-noble/lib/peripheral&amp;#34;); const noble = require(&amp;#34;obniz-noble&amp;#34;)(&amp;#34;OBNIZ_ID_&amp;#34;); const events = require(&amp;#39;events&amp;#39;); const os = require(&amp;#39;os&amp;#39;); const log4js = require(&amp;#39;log4js&amp;#39;); const logger = log4js.</description>
    </item>
    
    <item>
      <title>obniz で BLEを使ってEddystoneを出してみた</title>
      <link>https://wamisnet.github.io/blog/2019-12-14-obniz_eddystone/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-12-14-obniz_eddystone/</guid>
      <description>こんにちは、最近obnizの中の人になったわみです。
obniz Board 1Yが明日には発売ですね！いろいろと作ったのでぜひ触ってみてください。
今回はそんなこと関係なくBLEで遊んでいこうとおもいます。
Eddystoneとは Googleが2015年頃に発表した、BLEを使ったビーコンやURLの配信をするための規格。
詳しい説明は、次のようなサイトにお任せするとして、なにがいいのかというとURLを手軽に配布できるところが非常によいです。
https://dev.classmethod.jp/smartphone/eddystone/
obnizがJavaScriptで動かせるのでWebエンジニアでも触れるようなデバイスで、URLを手軽に配布できるのはWebエンジニア的に導線を一つ増やすことができるので非常に良いと思います。
プログラム &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt; &amp;lt;script src=&amp;quot;https://obniz.io/js/jquery-3.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://unpkg.com/obniz@3.0.0/obniz.js&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://cdn.jsdelivr.net/npm/uikit@3.2.3/dist/css/uikit.min.css&amp;quot; /&amp;gt; &amp;lt;style&amp;gt; body { margin: 2em ; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;quot;obniz-debug&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;H1&amp;gt;Obniz Eddystone&amp;lt;/H1&amp;gt; &amp;lt;form name=&amp;quot;form_url&amp;quot;&amp;gt; &amp;lt;p&amp;gt; &amp;lt;label&amp;gt;URL &amp;lt;input class=&amp;quot;uk-textarea&amp;quot; name=&amp;quot;url&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;https://obniz.io/&amp;quot; size=&amp;quot;100&amp;quot; required/&amp;gt; &amp;lt;/label&amp;gt; &amp;lt;/p&amp;gt; &amp;lt;input class=&amp;quot;uk-button uk-button-default&amp;quot; type=&amp;quot;button&amp;quot; value=&amp;quot;send&amp;quot; id=&amp;quot;sendurl&amp;quot;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;p id=&amp;quot;obniz_url&amp;quot;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; var obniz = new Obniz(&amp;quot;OBNIZ_ID&amp;quot;); obniz.</description>
    </item>
    
    <item>
      <title>IoT的シェアハウスのすすめ</title>
      <link>https://wamisnet.github.io/blog/iot_sharehouse/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/iot_sharehouse/</guid>
      <description>12/24 ハンズオン資料はこちら
こんにちは、ギークハウス新宿に住んでいるわみです。
今回はIoT的シェアハウスのススメとして、こんな感じにうちのシェアハウスは便利になるよっていう話をしていこうとおもいます。
レジシステム シェアハウスで食べ物などまとめ買いして、それをシェアしたいという要望はあると思います。
それを解決するシステムをつくりました。
https://qiita.com/wamisnet/items/1c6f809be7c4847a900d
お風呂場監視システム うちのシェアハウスでは、リビングと風呂場が階が違うので、わざわざ階段を無駄に上り下りしないといけない問題がありました。
その空いているかどうかを監視するシステムをつくりました。
https://qiita.com/retoruto_carry/items/00ec51a94d819925fad1
Nature Remo 赤外線リモコンをコントロールできるデバイス、エアコンやテレビのリモコンを探さなくてよくなる
Sesame スマートロックの中でAPIでいろいろ制御できるのはエンジニア的に面白い。普通に便利。
のちのちハックされる。
https://qiita.com/wamisnet/items/a07ca183dd97d2cdb483
Google Home VUIでもろもろのIoTデバイスの状態を確認できる
まとめ ちょっとづつだとしても、IoTを導入することで便利なシェアハウスにすることはできる</description>
    </item>
    
    <item>
      <title>obnizのサーバレスイベントでのはまりポイント＆Tips</title>
      <link>https://wamisnet.github.io/blog/2019-11-27-obniz_serverless/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-11-27-obniz_serverless/</guid>
      <description>obnizを使っているとサーバレスイベントを活用するタイミングがあると思います。
特に12月発売予定のobniz board 1Yではスリープが使えるようになるのでサーバレスイベントを使うと他になにも用意せずにセンシングするようなIoTのサービスをつくれます。
https://blog.obniz.io/ja/news/obniz-board-1y-2/
今回は私がサーバレスイベントを作るにあたってはまったポイントやTipsをまとめます。
サーバレスイベントとは 公式ドキュメント：https://obniz.io/ja/doc/obniz_cloud/about_event
 obnizを使うには外部にobnizを使うためのプログラムが必要ですが、obnizクラウドのイベント機能を使えばサーバーレスでプログラムを動作させられます。
  obniz Eventはあらかじめ設定したトリガーが発生したときに登録しておいたプログラムを自動的にクラウド上で実行するサービスです。 これによりあなたは自分でプログラムを動かして無くてもトリガーとプログラムだけ設定しておくことで、何かが起きた時にクラウド内で自動的に処理を行えます。
 上記公式から引用しましたが私なりの言葉でまとめると、サーバを用意しなくても各自で作成したプログラムを、後述するトリガーをきっかけに実行してくるツールといった感じでしょうか？
トリガー  Webhook（APIが生成される） 決められたある時間(11:11など) 決められた時間の間隔(1時間毎など) obnizがオンラインになったら obnizのボタンが押されたら  現在5つのトリガーがあります。 指定されたobnizIDで指定されたトリガーがあったときに、各自のプログラムが実行されます。
制約事項 11/27現在
 実行できる時間は30秒以内、それ以上は終了される 1日に実行可能な回数は120回  すこし制約はありますが例えばセンサーの値を取得するプログラムであれば12分に1回はデータを貯められます。
はまりポイント APIを使用したとき 次のようにAPIを使用するときエラーが発生することがあります。
await fetch(&amp;#39;https://maker.ifttt.com/trigger/obniz_temp/with/key/&amp;#39;, { method: &amp;#39;POST&amp;#39;, mode: &amp;#34;no-cors&amp;#34;, body: formData }).then(()=&amp;gt;console.log(&amp;#34;success&amp;#34;)).catch((error) =&amp;gt; console.log(error)); このときにAPIの呼出し後にawait obniz.wait(1000)をいれるとエラーが発生しなくなります。
Tips 絶対にスリープさせる センサーの値読み取りなど予期しないところでプログラムが停止してしまうなど可能性があります。
電池稼働しているデバイスではこの問題はクリティカルなので、サーバレスイベントが終了する前にスリープをするようにします。
（obniz board 1Yでのみ使用可能です。）
//Timeout 25s let tid = setTimeout(()=&amp;gt;{ let dt = new Date(); dt.setMinutes(Math.floor(dt.getMinutes()/10)*10+10,0,0); obniz.</description>
    </item>
    
    <item>
      <title>BG96　開発に役立ったリンク集</title>
      <link>https://wamisnet.github.io/blog/2019-10-11-bg96_link/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-10-11-bg96_link/</guid>
      <description>事例 テクノロジー アーカイブ - さくらのIoTブログ  https://sakura.io/blog/category/tech/    Wio LTE M1/NB1(BG96)の接続を速くしたい。 | シエロ工房(Cielo Studio)  https://eguchi.jp/blog/?p=1249    【セキュアモバイルコネクト】cat.M1のLTEモジュール(Quectel BG96)でドコモ回線に接続できることを確認しました - さくらのIoTブログ  IoTチームの矢野です。 2月の記事でcat.M1対応LTEモジュールにセキュアモバイルコネクトを挿して通信できることをご紹介しました。当時はドコモ回線による接続を確認することができませんでしたが、現在は接続及び通信が行 …  https://sakura.io/blog/2019/07/05/%E3%80%90%E3%82%BB%E3%82%AD%E3%83%A5%E3%82%A2%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B3%E3%83%8D%E3%82%AF%E3%83%88%E3%80%91cat-m1%E3%81%AElte%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%ABquectel-bg/    公式PDF　 Quectel_BG96_TCP(IP)_AT_Commands_Manual_V1.1.pdf  https://www.quectel.com/UploadImage/Downlad/Quectel_BG96_TCP(IP)_AT_Commands_Manual_V1.1.pdf    Quectel_BG96_AT_Commands_Manual_V2.3.pdf  https://www.quectel.com/UploadImage/Downlad/Quectel_BG96_AT_Commands_Manual_V2.3.pdf    Quectel_BG96_QuecCell_AT_Commands_Manual_V1.0.pdf  https://www.quectel.com/UploadImage/Downlad/Quectel_BG96_QuecCell_AT_Commands_Manual_V1.0.pdf    コード例 RAKWireless/WisLTE_Arduino  WisLTE,WisCellular,Arduino Library,BG96,RAKWireless,RAK - RAKWireless/WisLTE_Arduino  https://github.com/RAKWireless/WisLTE_Arduino     SeeedJP/WioLTEforArduino  Contribute to SeeedJP/WioLTEforArduino development by creating an account on GitHub.</description>
    </item>
    
    <item>
      <title>スマートロックが壊れたのでobnizを使ってハックしてみた</title>
      <link>https://wamisnet.github.io/blog/2019-08-27_smartlock/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-08-27_smartlock/</guid>
      <description>こんにちは、わみです！
ギークハウス新宿では住民の入れ替わりの季節で住民減です！ こういうハック的な事に興味がある人いたら私のTwitterにメッセージしてくれると！
なにをしたのか 壊れてしまったスマートロックからモータの制御や現在のポジションを取得するために制御を乗っ取り、obnizから指示を出すプログラムを作ってみました。
obnizでsesameをハックしてみた！ pic.twitter.com/kdtwpJw26x
&amp;mdash; わみ@NefryとかFlutter本とか (@wamisnet) August 27, 2019  Sesameを導入した話：https://speakerdeck.com/wamisnet/sieahausunisumatorotukuwotuketemita
きっかけ 開発合宿にてSuicaで鍵を開けるシステムを作ったときにSesameのAPIを使ったのですが待ち時間が少々長く、実際に使うときにストレスになりそうだと思いました。
10秒ぐらいかかってましたね… かかるタイミングだと気持ち1分ぐらい待ったような…
玄関で待ちぼうけ(´・ω・｀)
API以外は不満がなかったのでSesameをハックできないかと思い、Sesameを開けてみることにしました。
BLEモジュールやモータドライバーなどが取り付けられていることを確認したのち元に戻そうとしたとき…
「じゅっ」というどこかが壊れた音がしました
慌てて、電源を外しましたが時すでに遅し
もう動かなくなってしまいました
普通ならあきらめて新しいのをもう一つ買うところですが、せっかくだから思いっきりハックすることにしました！
技術構成 上の図のように連携しています。
 ハードウエア(Sesame) obniz (おすすめ記事) Node.js（別のサービスと連携するのでAPIを作成）  obnizを使うと何がいいのかというとわざわざハードウエアのコードを別に書かなくてもよくて、今回であればAPIとして使うためのNode.js一つだけでハードウエアの制御ができるところですね！
せっかくなのでちょっとづつ深堀りしていきましょう。
ハードウエア obnizにモータドライバーついているので回路はすごくシンプルでモータとソレノイドを制御する部分+鍵のポジションを取得するためのアナログ入力をそれぞれ繋いでいます。
（はんだ付けが汚いのはご愛嬌）
obniz モータとソレノイドの制御、アナログ入力を変換してくれます。 これがあるから、Node.jsで書くことができます。
Node.js とりあえずで作ったコードなのでダメな部分ありますが、ご容赦を！
https://github.com/wamisnet/key_controller/
鍵を開ける処理（APIでリクエストがあるとき）
 現在位置を取得して、平均値をとる 現在位置から目的の角度に近い方にモータを回す ソレノイドを出す 目的の角度になるまで現在位置を取得し続ける 目標角度になったら、モータを止める ソレノイドを引く  といった処理を行ってます。
まとめ こんな感じでハックしてみました。
動画で分かるようにボタンを押してすぐ動作するようになって目標は達成しました！！
obnizだったので回路もコードもシンプルに作ることができて便利だなと思いました。
ただ玄関で使用するときには、無線LANが不安定過ぎてobnizに向いていなかったので実際に使うことはできなかったです( ；∀；)
とっても悲しい
3日ぐらいずっとこれやってたので買った方が安かった気がする…
とはいえ自分で作れるのは楽しいですね！
今回バラしてしまいましたがSesame優秀なので、使うときはぜひ！
AkerunやQrio、Sesameと使ってきましたが、さらにいいデバイスがあれば教えてもらえるとうれしいです！
ここまで読んでくれた方へ ここまで読んでくださりありがとうございます。
いいねやコメント、SNSでの共有等をしてくださると、今後の励みになります。よろしくお願いします。
良かったらTwitterもフォローしてね</description>
    </item>
    
    <item>
      <title>obniz OSをESP32(NefryBT)に入れて動かそう！</title>
      <link>https://wamisnet.github.io/blog/2019-08-20-obniz_install_nefry/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-08-20-obniz_install_nefry/</guid>
      <description>こんにちは！わみです！ 今日は先日リリースされたobnizOSを使い始めてみたので、どんな感じなのかも合わせて書いていこうと思います。
そもそも「obniz」ってなに？って方は「arduinoとは全く違う、IoTツールobnizのしくみ」をご覧ください。
なにができるのか NefryでobnizOS動いた！！ pic.twitter.com/YAbw8ggR5B
&amp;mdash; わみ@NefryとかFlutter本とか (@wamisnet) August 17, 2019  HTML+JSでハードウエア(ESP32(NefryBT))を動かしてみた動画です！
JavaScriptやpythonでハードウエアを動かすことができる「obniz」ただ、6000円近くするので少々お値段がします…
その技術をお店で1500円ぐらいで売っているESP32のボードにインストールができるのが先日発表された「obnizOS」なのです！
私が作っている「Nefry BT」というデバイスにインストールしてみたのでその方法とどんな感じなのかをまとめてみようと思います。 ESP32を搭載したボードであれば、同じような手順で行うことができるのでぜひお試しください。
（ESP32-picoについては未サポート（具体例：M5stickC））
インストール ライセンスを購入する https://obniz.io/ja/console 上記ページから「デバイス」を選択し、「obniz OSのライセンスを新規購入」をクリックします。
ライセンスの選択画面で「Hobby」ライセンス、「新規にobnizIDを発行」、個数を選び、「金額を確認」をクリックします。 カードの情報がない場合、このタイミングで入力します。
確認画面が表示されて、問題なければ「ライセンスを購入」を押します。
購入が完了すると、「DeviceKey」をダウンロードできます。 これはインストール時に使用するので必ずダウンロードしておいてください。 （画像取り忘れたので公式ドキュメントの画像…）
前提条件 obniz cliを使用しますのでpython3.4以上のものをインストールしておいてください。
py -3 -Vでバージョン情報を確認することができます。 インストールされていれば、上記のコマンドをターミナルで実行すると次のようにバージョンが表示されます。
表示されない場合は、インストールされているか確認したり、pathが通っているか確認してください。
obniz_cliをインストール obniz_cliとは、簡単にobnizOSをインストールするために作られたアプリになります。それを使って、セットアップを行っていきたいと思います。
ターミナルでpip3 install obniz_cliと入力します。
インストールが開始されるはずです！「Successfully installed obniz_cli」とでれば大丈夫です。
Nefry BTにobnizOSをインストール Nefry BTをPCと接続し、obnizOSをインストールしていこうと思います。
ターミナルでobniz_cli flashosと入力します。
ESP32を接続しているポートを選択画面がでるので、ポートの横に書かれている数字（今回なら0）を入力します。ここで選んだポート名（今回ならCOM5）を覚えておいてください。
入力するとインストールが開始されます。
しばらくするとインストールが完了します。
次に無線LANの設定とライセンスの適用を行っていきます。
ターミナルでpython -m serial.tools.miniterm ポート名 115200と入力します。
ポート名は先ほど選んだものに変更しておいてください。
指示に従って、次の項目を入力します。
 DeviceKey:購入時に取得したファイルに書かれた文字列 SSID:接続したい無線LANのもの PASS:接続したい無線LANのもの 固定IP or DHCP:基本的にはDHCPの「0」を選択する  固定IPの場合 下記の項目を設定する  IP Address Subnetmask Default gateway      設定された項目が正しければ、最後に「Online」と表示されます。</description>
    </item>
    
    <item>
      <title>Reactとタブレットでバーコード使ったシェアハウス物々交換システム作った話【個人開発】</title>
      <link>https://wamisnet.github.io/blog/2019-07-26-regi/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-07-26-regi/</guid>
      <description>こんにちわ、ギークハウス新宿（ぎーじゅく）の住民のわみです。 先日開発合宿で作った物々交換システムができたので仕組みや機能などをまとめてみます。
なにを作ったか こんな感じで動くよhttps://t.co/BZj1i65I0y pic.twitter.com/qtmRp2mfiH
&amp;mdash; わみ@NefryとかFlutter本とか (@wamisnet) July 26, 2019  こんな感じのバーコードを使ったPOSシステム的なもの
どうして作ったか シェアハウスであるある（？）な悩みの一つ、例えばカップヌードルとかドクペをまとめ買いをしてくれて、それを必要なタイミングでみんなで分けるということ。（他だと多めにカレーとかおかずを作ったりしたときにシェアしたいときもめんどい
まとめ買いすることで安く買えるのはすごくいいのですが、それをいい感じに分けるのは至難の業。購入時にまとめてやるとか方法はいろいろあると思いますが、できたら欲しいときに分けてもらえるとよいなーと
そんなことをしていたぎーじゅくの過去の写真がこちら
それぞれ買ってきた人のボールにお金を入れるという方式（一番手前が私、奥のオレンジや右の封筒が入っているのは別のひとのやつ）
数が少なければこれでもいいんですが、数が増やすと訳が分からなくなったり、新しい住民が増えたときには一からこの商品は誰々のだよといった説明が必要になってきました。
これを解決するために一つシステムを作りました！
物々交換システムの歴史 このシステムには少々歴史があります。
物々交換システムv1　（2019年2月頃）の概要 Flutterで今回の下地となるAndroidアプリを作成しました。
完成写真
技術構成 次のような構成で作成しました。
 バーコードリーダー タブレット（Flutterアプリ入り） Slack Node-RED(RedMobile) Elasticsearch Kibana  図にするとこんな感じです。
問題点 ここまで3日ぐらいでつくったものでFlutterのバーコード入力処理にかなり泥臭い対応が一部あったり、Node-REDに依存する部分があったりとなかなか保守しにくいシステムになっていたり、データの作成に手動でいろいろ行わないといけない感じでした。
手動で行わないといけない作業
 商品登録 商品編集 商品削除 在庫管理 取引削除 週単位で決済処理 ユーザ追加  この中でも商品登録と決済は手動で行う作業でも大変な作業でした。（2月の頭から5か月以上稼働しているのだから自動化すればいいのに…ｗ
商品登録 Elasticsearchにデータを入れるためにNode-REDからわざわざ手打ちでJSONを作るｗ
週単位で決済処理 毎週どれぐらい使ったかKibanaで集計されたデータを使ってユーザに人力で通知していきます。
（数字は生々しいのでね…
こんな感じにがんばってる
今回作成したシステム いろいろと問題のあったFlutterとNode-REDからReactで新規に作り直しました！
完成写真
GIF小さいけどこんな感じ
技術構成 次のような構成で作成しました。
 バーコードリーダー タブレット（React PWA入り） Slack Firebase Elasticsearch(分析用　おまけ) Kibana(分析用　おまけ)  図にするとこんな感じです。</description>
    </item>
    
    <item>
      <title>ESP32のチップ情報を取得する（ESP-IDF）</title>
      <link>https://wamisnet.github.io/blog/2019-07-17-esp32-chip/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-07-17-esp32-chip/</guid>
      <description>ESP32のチップを判定する必要があったのでその方法をメモしておきます。
ESP-IDFでの例になります。
Chipの取得 #include &amp;quot;soc/soc.h&amp;quot;
 uint32_t _chipmacid =REG_READ(DR_REG_EFUSE_BASE+12); char str[30]; sprintf(str, &amp;quot;_chipmacid:%u\n&amp;quot;, _chipmacid); console_print(str); uint8_t pkg = (_chipmacid &amp;gt;&amp;gt; 9) &amp;amp; 0x07; sprintf(str, &amp;quot;pkg:%u\n&amp;quot;, pkg);//これがChipID console_print(str); // 0: &amp;quot;ESP32D0WDQ6&amp;quot;, // 1: &amp;quot;ESP32D0WDQ5&amp;quot;, // 2: &amp;quot;ESP32D2WDQ5&amp;quot;, // 5: &amp;quot;ESP32-PICO-D4&amp;quot;, これでチップの判定をすることができます！</description>
    </item>
    
    <item>
      <title>M5StickCに書き込みができないときの確認事項</title>
      <link>https://wamisnet.github.io/blog/2019-07-10-m5stick/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-07-10-m5stick/</guid>
      <description>http://forum.m5stack.com/topic/814/error-on-downloading-to-m5stickc
IDFで書き込みできない esptool.py v2.5.1 Serial port COM12 Connecting.... Chip is ESP32-PICO-D4 (revision 1) Features: WiFi, BT, Dual Core, 240MHz, Embedded Flash, VRef calibration in efuse MAC: d8:a0:1d Uploading stub... Running stub... Stub running... Changing baud rate to 921600 Changed. Configuring flash size... A fatal error occurred: Timed out waiting for packet header 原因 M5StickCがサポートするボーレートがあっていないのが原因です。
1200〜115200、250K、500K、750K、1500K
上記だと921600になっています。
対応 書き込み時の通信速度を合ったもの変更することで動作するようになります。 </description>
    </item>
    
    <item>
      <title>ロボットからobnizをつくりにいきます！「退職エントリ」</title>
      <link>https://wamisnet.github.io/blog/jobchange/</link>
      <pubDate>Sun, 07 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/jobchange/</guid>
      <description>全然更新していないですが、お久しぶりです、わみです。
7月末で新卒から今まで2年とちょっと勤めてきたユニロボット株式会社を退職し、8月から株式会社CambrianRoboticsに転職します！
せっかくなので私の備忘録がてら退職エントリを書いてみます。よかったら読んでいってください。
ユニロボット株式会社との出会い @okhiroyukiさんとの出会いがすべてのきっかけでした。
もともとTwitterでArduinoのブロックプログラミングツール（ http://lets.makewitharduino.com/ ）をつくっていたのがきっかけでTwitterをフォローしていました。
IoTLT 大阪で共通の知り合いが一緒に飲みに誘ってくれたのをきっかけに実際に交流が始まり、@okhiroyukiさんが働いるユニロボットが気になり、インターンを2016年6月頃から始めることになりました。
会話するロボットが面白いと思ったのはもちろんありますが、そこで@okhiroyukiさんや他の社員の方と仕事するのが楽しくなり、学校を卒業した後に正社員として働くことになりました。
インターン時 インターンを始めた頃はロボットがまだまだ試作段階で数に余裕がなかったのとリモートで週1のインターンだったので実機がなくても開発できるロボットのSDKを開発していました。
jsやhtmlを書いてレビューしてもらう感じでやっていました。
途中でファームウエアを作成していた人が退職するので、その引継ぎを受けその作成を行うようになりました。
1年目 新卒1年目は、Uniboの量産が行われるタイミングでいろんなタスクが鬼のように降ってくるようでした。今思い返してもあれほど成長したタイミングはそうそうないように思います。（特に2月から9月）
（業務外ですが、このタイミング（2月から8月）でNefry BTのクラウドファンディングを行っているんですよね。詰め込みすぎてると思います。なんで何とかなったのか？謎）
ファームウエア（マイコン、DSP）やロボットのアプリ、SDKの繋ぎなどなんでも行っていたような気がします。
思い返すと1年目の5月にUniboを使ったハッカソンがあって私1人で対応してるところなんか最高に強い（インターンから触ってるからまあ理解していたのはあるもののｗ）
2年目-退職まで 2年目はハードウエアのタスクが落ち着いたので、ロボットのアプリやUniboを使った受託案件の開発を行っていました。
いろんなデバイスやサービスを使うことができたのはとても良かったです。
このタイミングでフルリモートになりました。ハードウエアや何か用事がある場合にオフィスに行くような感じでした。
リモートは天気に左右されず、家の快適な環境で作業ができるのでホントに幸せですね。 汗っかきなのでほんとにありがたいです。
転職のきっかけ 転職しようとしたきっかけは先方からご飯に誘われて、いろいろと話して決めました。
MakerFaire Kyotoで木戸さんと話してそこに共感できたのも大きなきっかけでした。
私が作ったNefryが目指した世界とobnizが目指す世界が似ていたので、私の力が役に立つのであれば転職して私の全力でそれを叶えていきたいと思いました。
（私が作りたいものはNefryの言葉にもなっているNetをFreeにしたい。それでいろんな人が面白いものを作れる世界を作りたい。そんな感じ。全部を作れる人は多くないので私がハードウエアを簡単に扱えるツールを作ることでそれで作りたいところに注力できてより尖った面白いものが生まれてほしい。そんな世界面白そうだから！）
（Nefryを作っていた私がobnizを作るのに関わるなんて面白そうな感じもよい）
これからなにをしたいか Nefryでできなかったこともできたらいいなと思っています。
個人的には、コンテスト系やハッカソンなどイベント、ハンズオンなどできたらいいなと思っています。（私が作るより、みんなが作れるようになってほしいと思う）
もちろんハードウエアやファームウエア、サーバー側も含めいろいろ新しいものを作ってみんなが作れるモノの幅を広げるのもやっていくつもりです！
新しい環境になるので、いろいろ上手くいかないこともあるかと思いますが全力でやっていけたらなと思ってますので宜しくお願い致します！！</description>
    </item>
    
    <item>
      <title>変わり種のESP32ボードまとめてみた</title>
      <link>https://wamisnet.github.io/blog/2019-07-03-esp32board/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-07-03-esp32board/</guid>
      <description>変わり種のESP32ボードまとめてみた 技適がないものもあるので要注意
ドル円 108円計算
CW02  購入リンク： https://xinabox.cc/products/cw02 金額（ドル）：29.95 金額（円）: 3235  ソケットでセンサーやディスプレイを数珠つなぎにできる
WEMOS LOLIN D32  購入リンク： https://www.aliexpress.com/store/product/WEMOS-LOLIN32-V1-0-0-wifi-bluetooth-board-based-ESP-32-4MB-FLASH/1331105_32808551116.html 金額（ドル）：6.50 金額（円）: 702  バッテリがつなげられる開発ボード
LOLIN D32 Pro  購入リンク： https://www.aliexpress.com/store/product/LOLIN-D32-Pro-V2-0-0-wifi-bluetooth-board-based-ESP-32-esp32-Rev1-ESP32-WROVER/1331105_32883116057.html 金額（ドル）：8.8 金額（円）: 950  バッテリがつなげられる開発ボード
Dongsen Technology D-duino-32 XR  購入リンク： https://www.aliexpress.com/store/product/DSTIKE-D-duino-32-XR-ESP32-OLED/2996024_32970292724.html?spm=a2g1y.12024536.productList_110843485.pic_4 金額（ドル）：7.9 金額（円）: 853  Obnizに似た開発ボード。スイッチと、ディスプレイがついている。
ESP32 Watch DevKit  購入リンク： https://www.aliexpress.com/store/product/DSTIKE-ESP32-Watch-DevKit/2996024_32985459002.html?spm=a2g1y.12024536.productList_110843487.pic_0 金額（ドル）：39 金額（円）: 4212  腕時計にできるキット。
Olimex ESP32-EVB  購入リンク： https://www.olimex.com/Products/IoT/ESP32/ESP32-EVB/open-source-hardware 金額（ユーロ）：26 金額（円）: 3160  LANやいろいろなポートが付いたボード
HARDKERNEL odroid-go  購入リンク： https://www.</description>
    </item>
    
    <item>
      <title>【IoT可視化ツールレビュー】 thinger.io</title>
      <link>https://wamisnet.github.io/blog/2019-06-27-thingspeak/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-06-27-thingspeak/</guid>
      <description>thinger.io 次の記事が使い方がまとまっていてわかりやすかったです。
http://www.esploradores.com/empezando/hello-world-thinger-io-blink/
何を目的としたサービスか IoTでよくある機能を簡単に試すことができるサービス
データの可視化やデバイスをこのサービス経由のAPIで制御できる
何と何ができるのか Webやアプリ上でのセンサーデータの可視化（ダッシュボード） LEDのONOFFやサーボの制御などをWebやアプリ、APIで操作できる データ保存機能（バケット） エンドポイント機能（デバイスからトリガーがあったときにメールや特定のURLを叩ける） それがいくらなのか     無料 500円/月 2500円/月     接続台数 2台 20台 100台   ダッシュボード 4 20 100   バケット（何秒に一度データを保存できるか） 60s 30s 15s   エンドポイント 4 20 100    使った感じどうだったか 接続するときにひと手間ありそうですが可視化の部分を使用できるとよさそうです。
生のESP32で使用する際にはよいサービスだと思います。
https://github.com/thinger-io/Arduino-Library/tree/master
簡単にダッシュボードがつくれるところもよく、自分でインスタンス立てて制御することもできるようです。 ダッシュボードのレスポンスもよかったです。
https://thinger.io/downloads/ Blynkに似ていますが、アプリのみでなくWebでコントロールできるところが優れています。</description>
    </item>
    
    <item>
      <title>【IoT可視化ツールレビュー】 ThingSpeak</title>
      <link>https://wamisnet.github.io/blog/2019-06-27-thinger/</link>
      <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-06-27-thinger/</guid>
      <description>ThingSpeak 何を目的としたサービスか データの保存やグラフ化できるサービス。
MATLABとの連携がメインの特徴（むしろMATLAB使えないとほぼ意味がない）
何と何ができるのか センサーデータの可視化（ダッシュボード） MATLAB連携 ThinhSpeakアプリ https://jp.mathworks.com/help/thingspeak/thingspeak-apps.html?s_tid=CRUX_lftnav
それがいくらなのか     無料 約800円/月 約7300円/月     接続台数 3台 50台 50台   ダッシュボード 4 10 250   送信間隔（何秒に一度データを保存できるか） 15s 1s 1s   商用利用 不可 不可 可    使った感じどうだったか 正直MATLABを使用したい意図がない限り選択するメリットは少ないと思っています。
フリープランだと15秒に一度しかはじかれるのでなかなか使いずらいです。
同様なことであれば、Ambientで十分だと思います。</description>
    </item>
    
    <item>
      <title>IoT事例リンク集</title>
      <link>https://wamisnet.github.io/blog/2019-06-14-iot_monitoring_link/</link>
      <pubDate>Fri, 14 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-06-14-iot_monitoring_link/</guid>
      <description>IoTについてまとめる機会があったので、リンク集を公開します
IoTによるモニタリング 家庭編 家で考えるモニタリング
スマートロック セサミ スマートロック | CANDY HOUSE JAPAN  あなたは家を出る時に何を持つ?鍵、財布、スマホ...?「SESAME(セサミ)」はスマホで家の鍵を開閉出来るスマートロックです。取付も簡単で鍵も簡単にシェア。Google HomeやAlexa、IFTTT対応で可能性は無限大！あなたの暮らしにセサミを。By キャンディハウス  https://jp.candyhouse.co/    CANDY HOUSE SESAME mini
いろいろと数あるスマートロックだが、（家庭向けのデバイスでは）他社製品と比べAPIで開錠で開錠できる特徴が一押し。
スマートロックの誰の開閉かログをとったり、ゲストに開閉権限を渡すなど基礎的な機能も十分。
室温管理 Create a Connected Home  Discover connected home devices from Nest – thermostats, indoor and outdoor security cameras, smoke and carbon monoxide alarm, security system, video doorbell and more.  https://nest.com/     nest
日本では多くありませんが、海外に多くある家まるごと温度をコントロールするもの。
人の有無を学習し、意識せずに効率よく扱えるようになるのがIoTとして優秀だと思います。
窓管理 戸締り安心システム「ミモット」 | YKK AP株式会社  戸締り安心システム「ミモット」は、窓やドアの鍵の締め忘れをスマートフォンにお知らせする商品です。  https://www.</description>
    </item>
    
    <item>
      <title>NodeRedでHTTPリダイレクト対応したフローを作る</title>
      <link>https://wamisnet.github.io/blog/2019-01-27-nodered_redirect/</link>
      <pubDate>Sun, 27 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-01-27-nodered_redirect/</guid>
      <description>NodeRedでGoogle App Scriptと通信するフローを作った時にHTTPリダイレクトが必要になりました。
パッとぐぐっても情報を見つけられなかったので、まとめてみました。
フロー [{&amp;#34;id&amp;#34;:&amp;#34;d7b66544.cad228&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;http request&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;GET&amp;#34;,&amp;#34;ret&amp;#34;:&amp;#34;txt&amp;#34;,&amp;#34;url&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;tls&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;x&amp;#34;:270,&amp;#34;y&amp;#34;:1160,&amp;#34;wires&amp;#34;:[[&amp;#34;ba934f8b.bf0d1&amp;#34;,&amp;#34;34a354d5.522b7c&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;ba934f8b.bf0d1&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;debug&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;active&amp;#34;:true,&amp;#34;console&amp;#34;:&amp;#34;false&amp;#34;,&amp;#34;complete&amp;#34;:&amp;#34;true&amp;#34;,&amp;#34;x&amp;#34;:430,&amp;#34;y&amp;#34;:1200,&amp;#34;wires&amp;#34;:[]},{&amp;#34;id&amp;#34;:&amp;#34;ee827d07.60406&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;debug&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;active&amp;#34;:true,&amp;#34;console&amp;#34;:&amp;#34;false&amp;#34;,&amp;#34;complete&amp;#34;:&amp;#34;true&amp;#34;,&amp;#34;x&amp;#34;:1090,&amp;#34;y&amp;#34;:1160,&amp;#34;wires&amp;#34;:[]},{&amp;#34;id&amp;#34;:&amp;#34;9aae099d.e37438&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;function&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;リダイレクト&amp;#34;,&amp;#34;func&amp;#34;:&amp;#34;msg.url = msg.headers.location;\ndelete msg.headers;\ndelete msg.payload;\ndelete msg.statusCode;\ndelete msg.method;\nreturn msg;&amp;#34;,&amp;#34;outputs&amp;#34;:1,&amp;#34;noerr&amp;#34;:0,&amp;#34;x&amp;#34;:600,&amp;#34;y&amp;#34;:1160,&amp;#34;wires&amp;#34;:[[&amp;#34;c44e1561.006978&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;c44e1561.006978&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;http request&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;GET&amp;#34;,&amp;#34;ret&amp;#34;:&amp;#34;obj&amp;#34;,&amp;#34;url&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;tls&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;x&amp;#34;:790,&amp;#34;y&amp;#34;:1160,&amp;#34;wires&amp;#34;:[[&amp;#34;f5b05c0a.c51b2&amp;#34;,&amp;#34;3ef37c00.8133a4&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;34a354d5.522b7c&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;switch&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;property&amp;#34;:&amp;#34;statusCode&amp;#34;,&amp;#34;propertyType&amp;#34;:&amp;#34;msg&amp;#34;,&amp;#34;rules&amp;#34;:[{&amp;#34;t&amp;#34;:&amp;#34;eq&amp;#34;,&amp;#34;v&amp;#34;:&amp;#34;302&amp;#34;,&amp;#34;vt&amp;#34;:&amp;#34;num&amp;#34;},{&amp;#34;t&amp;#34;:&amp;#34;eq&amp;#34;,&amp;#34;v&amp;#34;:&amp;#34;301&amp;#34;,&amp;#34;vt&amp;#34;:&amp;#34;num&amp;#34;},{&amp;#34;t&amp;#34;:&amp;#34;else&amp;#34;}],&amp;#34;checkall&amp;#34;:&amp;#34;true&amp;#34;,&amp;#34;outputs&amp;#34;:3,&amp;#34;x&amp;#34;:430,&amp;#34;y&amp;#34;:1160,&amp;#34;wires&amp;#34;:[[&amp;#34;9aae099d.e37438&amp;#34;],[&amp;#34;9aae099d.e37438&amp;#34;],[]]},{&amp;#34;id&amp;#34;:&amp;#34;f5b05c0a.c51b2&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;switch&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;property&amp;#34;:&amp;#34;statusCode&amp;#34;,&amp;#34;propertyType&amp;#34;:&amp;#34;msg&amp;#34;,&amp;#34;rules&amp;#34;:[{&amp;#34;t&amp;#34;:&amp;#34;lt&amp;#34;,&amp;#34;v&amp;#34;:&amp;#34;300&amp;#34;,&amp;#34;vt&amp;#34;:&amp;#34;num&amp;#34;},{&amp;#34;t&amp;#34;:&amp;#34;else&amp;#34;}],&amp;#34;checkall&amp;#34;:&amp;#34;true&amp;#34;,&amp;#34;outputs&amp;#34;:2,&amp;#34;x&amp;#34;:950,&amp;#34;y&amp;#34;:1160,&amp;#34;wires&amp;#34;:[[&amp;#34;ee827d07.60406&amp;#34;],[]]},{&amp;#34;id&amp;#34;:&amp;#34;3ef37c00.8133a4&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;debug&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;active&amp;#34;:true,&amp;#34;console&amp;#34;:&amp;#34;false&amp;#34;,&amp;#34;complete&amp;#34;:&amp;#34;true&amp;#34;,&amp;#34;x&amp;#34;:950,&amp;#34;y&amp;#34;:1200,&amp;#34;wires&amp;#34;:[]},{&amp;#34;id&amp;#34;:&amp;#34;16aa0ce6.c87ac3&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;inject&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;bf7fc455.b09fc8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;topic&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payload&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payloadType&amp;#34;:&amp;#34;date&amp;#34;,&amp;#34;repeat&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;crontab&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;once&amp;#34;:false,&amp;#34;x&amp;#34;:100,&amp;#34;y&amp;#34;:1160,&amp;#34;wires&amp;#34;:[[&amp;#34;d7b66544.cad228&amp;#34;]]}] 解説 一つ目のHTTPRequest Nodeで通信したいURLを指定します。 次のSwitchでリダイレクトの301か302の場合、次の関数ノードに処理をつづけます。 関数ノードでは、msg.url = msg.headers.location;でヘッダーに含まれた移動先のURLを代入して次のHTTPRequest Nodeで移動先の情報を取得します。
簡単ではありますが、このようになっています。 これで以上になります。簡単にではありますが、誰かの助けになればと思います！</description>
    </item>
    
    <item>
      <title>記事を書くのに役立ったリンク集</title>
      <link>https://wamisnet.github.io/blog/2019-01-11-writer_editer_link/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-01-11-writer_editer_link/</guid>
      <description>動画をGIF画像に変更する Giraf  Powerful &amp;amp; Free GIF Creator  http://giraf.harusamex.com/     GIF画像を圧縮する Animated GIF optimizer (free online tool)  Online tool for optimizing animated GIF images to reduce the file size. Compress gifs by reducing colormaps, dropping duplicate frames or enable LZW compression.  http://ezgif.com/optimize     png画像を圧縮する TinyPNG – Compress PNG images while preserving transparency  Make your website faster and save bandwidth. TinyPNG optimizes your PNG images by 50-80% while preserving full transparency!</description>
    </item>
    
    <item>
      <title>2018年版　ポートフォリオ</title>
      <link>https://wamisnet.github.io/blog/2019-01-09-portfolio/</link>
      <pubDate>Wed, 09 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-01-09-portfolio/</guid>
      <description>Nefry シリーズ dotstudioさんと共同で開発しているIoT開発ボードです。 「ネットに簡単につながる」ことを実現するために2015年から基板からファームウェア、デバイス設定用Webサイトなど一括して開発しました。
AWSやAzureといった大きなクラウドサービスはもちろん、ほかにもIFTTTやFirebase、Milkcocoaなど様々なサービスと連携し、購入したユーザが自由に開発できるようにライブラリやドキュメントなどを作成しています。
それ以外にもこちらでデータをより簡単に扱えるようにNefryクラウドといったクラウドサービスを開発、提供しています。
ほかの連携例はこちらをご覧ください
CocoaBit littleBitsというマグネット式の各モジュールをつなぎ合わせることで、電子回路を楽しく学べるもののIoT拡張モジュールを開発しました。 ワンフットシーバスさんと共同で開発しました。
Webページで入力状態を可視化したり、スライダーで出力をコントロールすることができます。また自由にプログラムを書いて動作できます。
参考記事：https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/
カウンティット 工場での金型の使用回数を計測するために磁気センサーを用い、センシングしたデータをサーバに送信します。 下記の画像は初版の基板で次のバージョンでは今回の初版の改善点を反映し、大幅に改善する予定です。
電子ペーパー 電源を切っても表示が消えない、電子ペーパーを使い情報の新たな表現を模索しています。 試作中のため、こんなものも作れるというイメージを持っていただければと思います。
その他 ELワイヤー制御基板、モータ制御基板、Arduino互換機などIoTに直接関係しないものも何個か作成しています。 簡単に写真の紹介をさせていただきます。</description>
    </item>
    
    <item>
      <title>Flutter Meetup Tokyo #5いってきた</title>
      <link>https://wamisnet.github.io/blog/flutter_meetup_tokyo_5/</link>
      <pubDate>Wed, 17 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/flutter_meetup_tokyo_5/</guid>
      <description>前回の技術書典5でFlutter本を書いたのもあり、今回「Flutter Meetup Tokyo #5」に参加しました。 本を書いている間ずっと気になってたので今回来れてよかったです。
 一応、本の販売リンクを張っておきます！！！よろしければ！！！
ちょっと仕事が終わらなくて、初めから参加できなかったのですが、YouTubeのほうで配信していたので（マジ神）ちらちら見ながら会場に向かえましたｗ
配信再開しました。 #flutter_meetup_tokyohttps://t.co/NrMci2I5FE
&amp;mdash; Flutter Tokyo (@FlutterTokyo) 2018年10月17日  Flutterまだまだ情報少ないのでこういう勉強会で情報を得ていきたいですね。
発表資料 個人でFlutterアプリをリリースした所感 @ shogo.yamada 今日の発表資料になります！
もし見にくかったらこちらをご覧ください。https://t.co/Oyku6rCby6
#flutter_meetup_tokyo
&amp;mdash; shogo.yamada@Flutterが好き (@yshogo87) 2018年10月17日  Redux in Flutter: An Introduction @ Jeroen Meijer 資料見つけられず…
Flutter Engineことはじめ @ nankiti 資料みつけられず…
画像取得とpermission @ txmn パーミッション周りまだ作り込んだことないので聞けてよかった
これから発表するスライドになります。
緊張していますが、よろしくお願いいたしますm(__)mhttps://t.co/Ir61jKIdvd#flutter_meetup_tokyo
&amp;mdash; taxman (@_txmn) 2018年10月17日  Flutterのlifecycle @ slime_a ライフサイクルの話あまりきかないので、すごく為になった！
資料これから…？
Flutterを広めるために技術同人誌を作った話 @ ota42y 私の横のサークルでFlutter本販売していたサークルさんの発表！ いろんな情報を配信していってほしい。
今日の資料です！！！ “ Flutterを広めるために技術同人誌を作った話 - Speaker Deck https://t.</description>
    </item>
    
    <item>
      <title>技術書典5で発注ミスをしましたｗ＆Flutter本振り返り</title>
      <link>https://wamisnet.github.io/blog/techbooks5/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/techbooks5/</guid>
      <description>技術書典5おつかれさまです！
技術書典の振り返りをしてみようと思います。
技術書典5で前回のNefry本の経験を活かしながら、前回と違うメンツで「Flutter×Firebaseで始めるモバイルアプリ開発」の本を書きました。 同じギークハウスに住んでいる私を含めた3人でサークル出展をし、Flutter本の執筆は私としもぱたさんで行いました。

販売リンクを張っておくのでぜひ！！！
執筆　 執筆は、日中仕事している都合上夜の時間で進めるしかないので、ギリギリのタイミングまで深夜の時間を使って作業していました。
しもぱたさんが執筆した内容を私がレビューする形で進めていたのですが、画像や説明内容が私がイメージする対象者向けのレベルまで落ちずそのあたりの意識調整が上手くいかなかったなぁと反省がありました。
前回のNefry本では（本業？）ちゃんとくさんにレビューをしていただいてすごくわかりやすいレベルになっていたので、そのレベルまではいかないにしても良いものにしたいなと思って夜遅くまで頑張ったので個人的には自信作です！
（まだまだ成長したりないのでがんばりたい）
当日までの話 印刷を指示した10月1日（月）の段階では、被チェック数（お気に入りリストみたいなもの）が50でした。
このタイミングで何部刷るのかはかなり悩むんですが、100部売れて、50部はネット販売や委託販売をする風にしようと思い、150部印刷しました。
技術書典まで時間が1週間もなかったので、前回頼んだところが営業日的にギリギリで別のところにも見積もりを投げました。
とりあえず入稿できて、印刷を開始していただきました。一安心！
仕事も忙しくなっていたのでそっちに集中してあとは技術書典当日を待つだけ！！
当日の話 Flutterというワードが嵌ったのかなんなのかわかりませんが、そこそこ被チェック数が集まり、当日の朝に確認したときには200を超えていました。
「これはよいのでは！！」とワクワクしていたこのひと時…事件は既に手遅れな状態になっていたのです。
事件発覚 私のミスなので具体的なことは省略しますが、当日会場に行くとなんということでしょう、それぞれの会社から150部が届いているではないでしょうか！
めっちゃ冷汗ですね、いやホント
発注ミスこわい
私のミスなのでどうしようもないけどホントにやっちまったなと…
ただ、予想以上に被チェック数があったのでワンチャンあるんじゃね！？ （楽観
さいごに 楽観ダメでしたw
最初の見立て通り100部は販売でき、イベント後の販売で50部もいい感じに出てるですが、発注ミス分の150部はちょっとどうすっかなと…
焚き火するか…
救いなのは赤字ではないところ…（部屋に積まれた箱を見ながら
発注ミス気をつけようね！
技術書典は楽しいのでまた出展したい！みんなも出展しよう！
販売リンクを張っておくのでぜひ！！！</description>
    </item>
    
    <item>
      <title>Nefry生誕祭3周年デコレーションケーキを発注してみた</title>
      <link>https://wamisnet.github.io/blog/nefry_cake/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_cake/</guid>
      <description>すごく今更なんですが、備忘録がてらちょっとまとめておきます。
 9月18日はNefryがこの世に生まれた日。
2015年にできてから今年で3年目！
ちょうどIoTLTが開催されるのでそこでケーキを振舞ってきました！！
ケーキを発注する 身近なひとにデコレーションケーキ発注経験者がいないかパッと聞いてみたんですが、いなかったのでWebでぐぐってでてきた、「Patisserie K2」さんに見積もりを依頼してみました！
流れは、基本的に上のサイトの注文の流れを見ていただくと分かると思います。
このときにどんなデザインにするのかを伝えるためにNefryの画像を数枚メールで送信しました。
しばらくすると見積もりのメールが届くので、それで問題ないかチェックします。 今回のサイズ（30cm × 30cm）だと2万円ぐらいでした。
80人ぐらいで食べれるサイズ（35cm × 50cm）だと4万ぐらいになるとのことなので、今回は、2万の方にしました。
あとは冷凍便で届くのを待つだけ！
まとめ イベント当日の朝にケーキが届きました！
冷蔵庫に入れて解凍するようで、冷蔵庫を頑張って空けましたｗ
イベントでケーキを振舞うと、中には酸味がほどよい果物が入っていて誕生日以外にケーキを食べることのない私にとって、めちゃくちゃおいしくて次に頼む機会があればまた頼みたいと思うぐらいでした。
最後に実際に振舞ったときのツイートを何個か貼っておこうかと思います。
再現性高すぎ❗️#iotlt #nefry pic.twitter.com/uJWhQbtM75
&amp;mdash; hayakumi (@hayakumi8893) 2018年9月18日  入刀 #iotlt pic.twitter.com/856BTJTiSD
&amp;mdash; 早川@初心者かも (@Askaiot0162) 2018年9月18日  Nefryのバースデーケーキ…！！！ #iotlt pic.twitter.com/bfcQd6EfsG
&amp;mdash; 田中みそ@技術書典5-う28/スマートスピーカーを遊びたおす本 (@miso_develop) 2018年9月18日  </description>
    </item>
    
    <item>
      <title>Nefry Tips 無線LAN接続について</title>
      <link>https://wamisnet.github.io/blog/nefry_tips_2018_08_28/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_tips_2018_08_28/</guid>
      <description>Nefryを使ったいろんな作品が見られて幸せなわみさんです。
今回は無線LANのプチTipsを共有したいと思っています。
Nefryには、Webページ上で設定した無線LANから自動的にもっとも電波強度が強いものに接続するような機能があります。
ただ、基本的には起動時に接続しにいくのみで、起動したあとに切断された場合再接続処理が上手くいかず接続できないことがあります。
デモのような短時間の動作であれば上記のような現象は気にならないと思いますが、長時間のモニタリングなどでなってしまうとなかなか辛いことがあると思いますので今回のTipsを試してもらえればと思います！
#include&amp;lt;Nefry.h&amp;gt;void setup() { // 何か処理 } void loop() { // なんか処理a  if(WiFi.status() != WL_CONNECTED){ //無線LANが接続されていないとき  Nefry.reset(); } } 上記のコードが今回のTipsです。
無線LANに接続していないときにNefryをリセットするコードになります。
Nefryがネットワークにつながらなくなっても再起動して無線LAN接続が正常に行えるはずです！！
ぜひ試してみてください！</description>
    </item>
    
    <item>
      <title>Nefry BTと連携できるFirebaseライブラリの解説記事を寄稿しました</title>
      <link>https://wamisnet.github.io/blog/nefry_firebase_repo/</link>
      <pubDate>Tue, 14 Aug 2018 02:45:17 +0900</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_firebase_repo/</guid>
      <description>DotstudioさんにFirebaseとNefryを連携方法を説明する記事を寄稿しました。
ぜひご覧ください！
https://dotstud.io/docs/nefrybt-firebase-library/</description>
    </item>
    
    <item>
      <title>公民館勉強会のすすめ</title>
      <link>https://wamisnet.github.io/blog/study_mokumoku_8_11/</link>
      <pubDate>Sun, 12 Aug 2018 01:27:19 +0900</pubDate>
      
      <guid>https://wamisnet.github.io/blog/study_mokumoku_8_11/</guid>
      <description>こんにちわ、今回は「公民館勉強会のすすめ」としてちょっとメモがてら共有しようと思います。
なぜ公民館？ いま私が住んでいるギークハウス新宿では、時々住民同士でプチ勉強会を開催しています。
大体やるときはリビングなのですが、ちょっとみんなで集まって作業するには少々つらいことがありました。 だからといって、コワーキングスペースを使うとなるとそれなりに費用も掛かるのでちょっと二の足を踏んでいました。
私が参加した勉強会で公民館を使ったイベントがあり、そういえばうちの近くの公民館はどこだろう？と渋谷区（ギークハウス新宿という割には住所は渋谷区代々木ｗ）の公民館を調べてみたところ、徒歩2-3分にあることに気が付きました。 （駅に行くときに毎回その建物の前を通ってるのに気にしてなかった）
渋谷区施設
もう少しググってみると50人程度入る教室を数千円で貸してもらえると書いてあるのです！
これはせっかくだし、つかうしか！そんなきっかけで公民館に目をつけたのでした。
公民館の罠 使うのに必要な書類を印刷して早速、公民館に話を聞きにいきました。
かなりきれいな建物でワクワクしながら受付にいって、さきほど印刷した紙を出しながらいろんな話を聞きました。
話を聞くとタイトルの罠というか、制約事項をいろいろ説明していただいた中に結構大変な項目を聞いてしまったのです。
それは、「不特定多数の募集」をしてはいけないという項目と「参加者の名簿（住所、氏名、電話番号）」を会場を取る際に提出するというものでした。
会場が広くなるのでせっかくなら勉強会をパブリックにやりたいと思っていたので、結構この段階であてが外れてちょっとどうしようと思ったのですが、とりあえずギークハウス新宿のメンバーだけでも使えたらええんじゃないか？と思い、申請書類を提出しました。
話を聞いていくと、公民館では参加者の名簿は不要なところもあるのでそのあたりはちょっとハードルが下がるのですが、それでも「不特定多数の募集」ができないのはちょっとIT系のイベントをやるのはつらいなと… （グレーゾーン？で会場非公開で募集者だけに会場を教えるみたいなやりかたでやってるグループもあった（いいんかな？））
渋谷区ではこんな感じで話を聞きましたが、他の地区だと違うかもしれないので実際に話を聞いてみることをお勧めします。
開催日を決める ちょっとあてが外れて残念だったこともありましたが、書類を申請すると大体1週間ぐらいで申請が通って登録証を頂けました。
この登録証があれば、会場を自由に取ることができます。
空いてるかは、下記の画像のカレンダで確認することができます。 （ものすごいアナログ） さっそく日時を決めて枠を取ります。 直接、会場に行って使用料を支払います。
この時にプロジェクターなどが必要であれば、その代金も支払います。 登録区分がありがたいことに半額で会場を使用できる権利を獲得できたのでかなり安く（13:00-17:30まで借りて会場費1000円（価格崩壊やばい）ちなみに借りた部屋は最大55人入る教室）使えました。
渋谷区民万歳！w
イベント開催 1時ぐらいに会場に行き、登録証を確認してもらいます。 会場に案内してもらうとプロジェクターが準備されていてすぐにでもできる感じでありがたい限り…
好きに机や椅子をならべ、勉強会開始！
55人入る会場なだけあってめっちゃ広い
この会場が1000円か…
めっちゃよきかな
会場の枠さえ空いていれば一日（9:00-21:00）いけるのでプチハッカソン的なことも全然できそうで夢が広がるｗ（会場費:3250円（やばさ））
まとめ IT系のイベントであれば、企業のオフィスを使うことが多いと思うのですが、時には公民館で勉強会もありなんじゃないかなと思いました。（いろいろ難しい点があるけどね）
どちらかというと友達同士や同じ企業の仲間どうしで会場どうしよう？みたいなことを考えるときに公民館を使うのはかなりありなんじゃないでしょうか？</description>
    </item>
    
    <item>
      <title>9/2 NefryUGもくもく会イベント開催します！！</title>
      <link>https://wamisnet.github.io/blog/nefry_ug_2/</link>
      <pubDate>Sat, 11 Aug 2018 00:40:17 +0900</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_ug_2/</guid>
      <description>Nefry ユーザグループイベント 2回目開催決定 9/2（日）に開催しますので、ぜひ遊びにきてください。
ナゾ枠で私が質問を受け付ける枠があるのでぜひ（だれもいないと寂しい）
イベントページはこちら！</description>
    </item>
    
    <item>
      <title>hugo始めました</title>
      <link>https://wamisnet.github.io/blog/newsite/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/newsite/</guid>
      <description>いままでのサイトはかなり手抜き感もあったのでちゃんとしたものを作ることにしました。
せっかく個人事業主としての活動もあるのでそのあたりも今後につながればいいなと思います。
Nefryの作例やTips、そのほかのハードウエアについても気軽にまとめていくつもりなのでよろしくお願いします。</description>
    </item>
    
    <item>
      <title>NefryUG参加レポ</title>
      <link>https://wamisnet.github.io/blog/nefry_ug_1/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_ug_1/</guid>
      <description>8/7にdotstudioで開催された、Nefryユーザグループイベントに参加してきました。
（一応主催　ちゃんとくさんにほとんどやっていただいた。ありがとうございます。）
connpassページ
ちゃんとくさんも言っていたけど、UGイベント初なんですよね。
これから大きく育っていってほしいです。
初イベントは13人の方に来ていただいて、6人の人に発表して頂きました！ ホントにありがたい限りです！
イベントの様子の画像を何枚か貼っておきます！
ちなみに次のイベントは来月頃の予定らしい…</description>
    </item>
    
    <item>
      <title>Zaif Paymentを使ってビットコイン＆モナコイン仮想通貨決済システムをつくってみる</title>
      <link>https://wamisnet.github.io/blog/2019-11-27-zaif/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-11-27-zaif/</guid>
      <description>最近、仮想通貨の話題を聞かない日はないようになってだいぶ浸透してきたんだなと思います。
悪い面が騒がれているような気がしますが、エンジニアとしては触ってみると面白い分野なのではないかなと思っています。 そんな仮想通貨を実際に決済システムとしてビックカメラや秋葉原の一部店舗などで取り扱われてきています、これはちょっと気になる。
そんなことを思っていたら、ちょうどいい感じにZaif Paymentを見つけましたので使ってみました！！(個人利用できていい感じのサービスがあればそれでもいいかもですけどね)
**完成版はこちら！**気に入ったら何円か投げ銭してくれてもいいんですよ？
 2017/12/30 決済情報の表示に対応！！
 Zaif Paymentとは 取引所のZaifが行っている仮想通貨決済サービスです。
公式サイトはこちら
特徴
 手数料無料 モナコインに対応している 日本円で受け取ることができる 仮想通貨のまま受け取ることができる  このサービスはAPIで使って扱うことができます。
今回は簡単に実装するためにAPI＋Node-Redで決済システムを作ってみようと思います。
決済システムをつくってみる それではNode-Redでさくっと作ってみようと思います。
環境  IBM Cloud ライトアカウントなどのNode-Red環境(私はAWSにMode-Redの環境を作ってて試しています) Zaifアカウント　(本人確認済み)   IBM Cloud (aka Bluemix) ライト・アカウント作成手順
 サンプルコード [{&amp;#34;id&amp;#34;:&amp;#34;f6f414ca.057578&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;http request&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;c9e25c06.c8c0e&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;POST&amp;#34;,&amp;#34;ret&amp;#34;:&amp;#34;obj&amp;#34;,&amp;#34;url&amp;#34;:&amp;#34;https://api.zaif.jp/ecapi&amp;#34;,&amp;#34;tls&amp;#34;:&amp;#34;e55e7d60.78615&amp;#34;,&amp;#34;x&amp;#34;:568,&amp;#34;y&amp;#34;:168,&amp;#34;wires&amp;#34;:[[&amp;#34;68603af5.adebf4&amp;#34;,&amp;#34;1670bdc2.8675b2&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;d408e881.31ac48&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;inject&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;c9e25c06.c8c0e&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;Test&amp;#34;,&amp;#34;topic&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payload&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payloadType&amp;#34;:&amp;#34;date&amp;#34;,&amp;#34;repeat&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;crontab&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;once&amp;#34;:false,&amp;#34;x&amp;#34;:108,&amp;#34;y&amp;#34;:88,&amp;#34;wires&amp;#34;:[[&amp;#34;1c02b6e3.fc9989&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;942f2d66.612c7&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;function&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;c9e25c06.c8c0e&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;APIKey設定&amp;#34;,&amp;#34;func&amp;#34;:&amp;#34;msg.key = \&amp;#34;\&amp;#34;;\nmsg.secret = \&amp;#34;\&amp;#34;;\nmsg.currency = msg.payload.basecoin;\nmsg.jpy = msg.coin = msg.payload.coin;\nif(msg.currency == \&amp;#34;mona\&amp;#34;){\n msg.build_pay = true;\n} \nif(msg.currency == \&amp;#34;btc\&amp;#34;){\n //msg.build = true;\n}\nreturn msg;&amp;#34;,&amp;#34;outputs&amp;#34;:1,&amp;#34;noerr&amp;#34;:0,&amp;#34;x&amp;#34;:408,&amp;#34;y&amp;#34;:88,&amp;#34;wires&amp;#34;:[[&amp;#34;7be80c8f.e09434&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;c0675801.ef7898&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;function&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;c9e25c06.c8c0e&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;RequestMessage&amp;#34;,&amp;#34;func&amp;#34;:&amp;#34;msg.header = \&amp;#34;content-type:application/x-www-form-urlencoded\&amp;#34;;\nmsg.payload = \&amp;#34;method=createInvoice&amp;amp;key=\&amp;#34; + msg.</description>
    </item>
    
    <item>
      <title>Nefryいろんなウラの話</title>
      <link>https://wamisnet.github.io/blog/2017-12-25-nefry_talk/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-12-25-nefry_talk/</guid>
      <description>2020/7/4 追記
  　2年前に書いた記事を振り返ってみると、実際に実現できたことも多々あって、やってこれてほんとによかったなと思います。
  　現在、他のESP32ボードに押されてしまっていますがこういった情報の蓄積は非常に強みであり、支えていただいた皆さんには感謝の気持ちでいっぱいです。ありがとうございました。
 Nefry AdventCalendar最終日の担当のわみです！
まずは今日までNefry Advent Calendarを書いてくれた皆さんに感謝です！！はじめのころはちゃんと埋まるのか不安ですがみなさんのおかげで今日まで無事にこれてホントにうれしい気持ちでいっぱいです！
最終日のテーマとして、Nefryの作者から見たNefryの過去と未来の夢の話をしようと思います。ぜひご覧ください！
Nefryの過去話 Nefryの過去話として、作ったNefryの遍歴をぱぱっとまとめてみようと思います。
Nefry誕生 Nefryは2015年8月9日に開催されたJS Board Shibuyaというイベントをきっかけに知り合ったMilkcocoaの中の人である川野さん、平間さん、落合さんとの会話から
 ESP8266を簡単に触れるボードがほしい
 というこの一言から生まれました。
一番初期に作られたNefryの原型となるものです。
この時はジャンパーワイヤで切り替えをしないと書き込みができないものでしたが、これでもあの当時はそれなりに便利に使えるボードでした。 switch-scienceさんのEsprシリーズすらなかった時代でした。
まだNefryという名前すらついてないですねｗ
Nefry (v1) このあと第2号として先ほどボードの改良版として今のNefry v2に近い形のNefry(v1)?を2015年11月ごろに作成しました。 このころのバージョンはフリスクケースを改造したケースが付属していました。結構量産が大変でフリスクを山のように食べていた思い出がありますね。
このバージョンは60個程度つくってイベントなどで販売していました。無事に全数捌けたのがうれしかったですね。
この時は今まで続くシリーズになるのかどうなのか確定していなくてフワフワしていたように思います。
このころは写真に写っているMilkcocoaとどうやっていこうかと模索していたように思います。 全部私が手で半田付けとかしていたのでなかなか大変でしたね。 あとこのころにのびさんと出会ってLIGブログで記事を書くことになりましたね。そう思うとこのタイミングが今に至る転換点だったように思います。
Nefry v2 2016年7月にNefry(v1)の改良版としてNefry v2を作成しました。 このころから中国に量産をかけるようになりました。MDFのケースが付属するようになったのもこのタイミングからですね。
このタイミングでのびさんがLIGから独立してdotstudioになったのもこのタイミングに近いですね。 dotstudioになってからネット販売が増え、累計で150台程度販売されました。
販売してから反省したのですが、シリアル変換を搭載すればよかったと思ってますｗ
このタイミングから徐々にコミュニティが生まれ始めたのかなと思います。
Nefry BT 2017年5月にクラウドファンディングをした、Nefry BTです。
dotstudioと共同で開発、販売を行いました。これがたった３時間足らずで目標金額を達成することになるとは思いませんでした。 みなさんに支援していただけてホントによかったです。
Facebookグループなどで最近書き込みが多くコミュニティが発展しているのはホントにうれしいです！！
予想以上の売れ行きで現在在庫切れで申し訳ないです…(´・ω・｀)
次のロットを量産しているので少々お待ちください！！
Nefryの未来の夢 これまででNefryの過去話をしました。 ちょっとこれから私の思い浮かべる未来の夢のお話をしようかと思います。
今のところのNefryは累計出荷台数をまとめてみました。
   Year Nefryシリーズ合計出荷台数     2015 30   2016 100   2017 350   2018 400   2019 200     2019年までのものを追記</description>
    </item>
    
    <item>
      <title>SSD1306で画像表示の簡易まとめ</title>
      <link>https://wamisnet.github.io/blog/2017-06-11-ssd1306-image/</link>
      <pubDate>Sun, 11 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-06-11-ssd1306-image/</guid>
      <description>XBMというフォーマットに合わせて作成する。
具体的な方法 ESP8266, NodeMCU: how to create xbm images for displaying on OLED 128x64 I2C Displays - Squix - TechBlog  Do you know these wonderfully cheap SSD1306 based OLED displays with the crispy display? For a while now the NodeMCU Lua firmware for the ESP8266 supports them and has a rich feature set to draw lines, circles and even bitmaps. One way to draw bitmaps ... Read More  https://blog.</description>
    </item>
    
    <item>
      <title>UniboとIFTTTで簡単にIoTしてみる</title>
      <link>https://wamisnet.github.io/blog/2017-05-11-unibo_ifttt/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-05-11-unibo_ifttt/</guid>
      <description>IFTTTは（イフト）TwitterやFacebook、SlackなどのWebサービス同士を組み合わせて簡単に連携できるサービスです。
今回はそのIFTTTとUniboをつなげてUniboからSlackやTwitterなどにメッセージを送信する仕組みについて説明します。
#全体図
[{&amp;quot;id&amp;quot;:&amp;quot;1a22c6251f.020e3a&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;tab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;IFTTT&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;1ad734c9dd.af1808&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;http request&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a22c6251f.020e3a&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;IFTTTにアクセス&amp;quot;,&amp;quot;method&amp;quot;:&amp;quot;GET&amp;quot;,&amp;quot;ret&amp;quot;:&amp;quot;txt&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;tls&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:586,&amp;quot;y&amp;quot;:440,&amp;quot;wires&amp;quot;:[[&amp;quot;1a70e6eb3f.c26754&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1ad02e9d78.efebc&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;speech&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a22c6251f.020e3a&amp;quot;,&amp;quot;word&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;subtitle&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;edit&amp;quot;:false,&amp;quot;language&amp;quot;:&amp;quot;jp&amp;quot;,&amp;quot;voice&amp;quot;:&amp;quot;yuuto&amp;quot;,&amp;quot;version&amp;quot;:1,&amp;quot;x&amp;quot;:987,&amp;quot;y&amp;quot;:440,&amp;quot;wires&amp;quot;:[[]]},{&amp;quot;id&amp;quot;:&amp;quot;1a70e6eb3f.c26754&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a22c6251f.020e3a&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;発話のためにコピー&amp;quot;,&amp;quot;edit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;msg.word = msg.subtitle = msg.payload;\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;dummy&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:805,&amp;quot;y&amp;quot;:440,&amp;quot;wires&amp;quot;:[[&amp;quot;1ad02e9d78.efebc&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a8a30f02a.12783&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a22c6251f.020e3a&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;date&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:false,&amp;quot;x&amp;quot;:390,&amp;quot;y&amp;quot;:440,&amp;quot;wires&amp;quot;:[[&amp;quot;1ad734c9dd.af1808&amp;quot;]]}] #手順
IFTTTの登録についてはこちらの記事をご覧ください。
 Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた
 登録ができたところで、実際に連携させてみようと思います。
IFTTTでシナリオを作成してみる IFTTTでUniboとLineをつなげるレシピと呼ばれるシナリオを作成していきます。 上のリンクをクリックして作成していきましょう。
まずはMakerWebhooksをトリガーにするため”make”と検索欄に入力します。 MakerWebhooksがあればそれをクリックします。
MakerWebhooksはEvent単位でトリガーがかかります。今回はEventNameに&amp;quot;Unibo&amp;quot;と入力し”Create trigger”をクリックし作成していきます。 今入力したEventNameはあとでUniboに入力するのでSecretKeyと合わせて覚えておきましょう。
次にトリガーが起こった時にしたい動作を選択します。 IFTTTの検索欄でLineを検索し、連携させていきます。 ちなみに、このときにTwitterやGmailなどを選択するとそれと連携させることが出来ます。
Recipientと書かれた欄にメッセージを送るLineのグループを選択します。 Messageと書かれた欄に送信するメッセージを入力を入力します。Value1、Value2などがありプログラムから値を渡すことができます。これを使えば温度センサや明るさセンサーの値をプログラムから渡しメッセージに組み込むことが可能です。 オプションですが写真のURLさえあれば、Lineに写真を投稿することができます。
Create actionをクリックしてメッセージを保存します。
最後にFinishを押し、作成を完了します。
こちらのリンクをクリックしDocumentationのリンクをクリックします。
クリックするとこのような画面に移動します。
このときに表示される赤枠のURLをUniboにコピーします。
Uniboの準備をする Uniboのスキルクリエイターに移動し、全体図の章で見せたJSONの文字列をスキルクリエイターにインポートしてください。
インポートが終わったら先ほどIFTTTで取得したURLを張り付けていきます。 http request Nodeをクリックし、赤枠の入力欄に先ほどのURLを貼り付けていきます。この時にURL中央部にある{event}は先ほどIFTTTに登録したイベント名に変えておきましょう。 記事の通りに作成している場合はUniboになります。
入力できたら完了を押し作成を完了します。
これでDeployを押し、タイムスタンプのボタンを押せばLineにメッセージが飛ぶような仕組みが完成しました！ 余談ですが、functionNodeでhttp request Nodeの応答をUniboでしゃべらすためにメッセージ内容をコピーする処理をいれることでレスポンスをしゃべらすことができるようになります。</description>
    </item>
    
    <item>
      <title>UniboでAzure IoTHubと連携させてみる</title>
      <link>https://wamisnet.github.io/blog/2017-05-10-unibo_iothub/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-05-10-unibo_iothub/</guid>
      <description>AzureIoTHubでメッセージを送受信してみる。 Azure IoTHubとUniboのメッセージをやりとりしてみましょう。
##全体図
[{&amp;quot;id&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;tab&amp;quot;,&amp;quot;label&amp;quot;:&amp;quot;iothub&amp;quot;},{&amp;quot;id&amp;quot;:&amp;quot;1adc54aae1.2cb078&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;inject&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;開始&amp;quot;,&amp;quot;topic&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payload&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;payloadType&amp;quot;:&amp;quot;date&amp;quot;,&amp;quot;repeat&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;crontab&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;once&amp;quot;:false,&amp;quot;x&amp;quot;:320,&amp;quot;y&amp;quot;:324.888916015625,&amp;quot;wires&amp;quot;:[[&amp;quot;1a50458b29.daf934&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a5b568748.b15d28&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;azureiothub&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Azure IoT Hub&amp;quot;,&amp;quot;protocol&amp;quot;:&amp;quot;mqtt&amp;quot;,&amp;quot;x&amp;quot;:958.1041870117188,&amp;quot;y&amp;quot;:325,&amp;quot;wires&amp;quot;:[[&amp;quot;1a452ce6f4.4d1838&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a6872e007.3f029&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;template&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Azure IoTHubに接続情報&amp;quot;,&amp;quot;field&amp;quot;:&amp;quot;payload&amp;quot;,&amp;quot;fieldType&amp;quot;:&amp;quot;msg&amp;quot;,&amp;quot;format&amp;quot;:&amp;quot;json&amp;quot;,&amp;quot;syntax&amp;quot;:&amp;quot;mustache&amp;quot;,&amp;quot;template&amp;quot;:&amp;quot;{\n \&amp;quot;deviceId\&amp;quot;: \&amp;quot;unibo\&amp;quot;,\n \&amp;quot;key\&amp;quot;: \&amp;quot;SharedAccessKey=以下のものを貼る\&amp;quot;,\n \&amp;quot;protocol\&amp;quot;: \&amp;quot;mqtt\&amp;quot;,\n \&amp;quot;data\&amp;quot;: \&amp;quot;{value1: 0, value2: \\\&amp;quot;test\\\&amp;quot;}\&amp;quot;\n}&amp;quot;,&amp;quot;x&amp;quot;:718.1041870117188,&amp;quot;y&amp;quot;:325,&amp;quot;wires&amp;quot;:[[&amp;quot;1a5b568748.b15d28&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1ad307ac75.70343&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;motion&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;target&amp;quot;:&amp;quot;other&amp;quot;,&amp;quot;motion&amp;quot;:&amp;quot;happy&amp;quot;,&amp;quot;x&amp;quot;:1042.1041870117188,&amp;quot;y&amp;quot;:561,&amp;quot;wires&amp;quot;:[[]]},{&amp;quot;id&amp;quot;:&amp;quot;1a9501606e.fe849&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;debug&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;active&amp;quot;:true,&amp;quot;console&amp;quot;:&amp;quot;false&amp;quot;,&amp;quot;complete&amp;quot;:&amp;quot;payload&amp;quot;,&amp;quot;x&amp;quot;:747.1041870117188,&amp;quot;y&amp;quot;:432,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;1a50458b29.daf934&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;led&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;color&amp;quot;:&amp;quot;black&amp;quot;,&amp;quot;version&amp;quot;:1,&amp;quot;x&amp;quot;:499.10418701171875,&amp;quot;y&amp;quot;:325,&amp;quot;wires&amp;quot;:[[&amp;quot;1a6872e007.3f029&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a452ce6f4.4d1838&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;function&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;データ整形&amp;quot;,&amp;quot;edit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;func&amp;quot;:&amp;quot;msg.payload = msg.payload.toString();\nreturn msg;&amp;quot;,&amp;quot;outputs&amp;quot;:1,&amp;quot;dummy&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;noerr&amp;quot;:0,&amp;quot;x&amp;quot;:336.10418701171875,&amp;quot;y&amp;quot;:485,&amp;quot;wires&amp;quot;:[[&amp;quot;1a513c662f.d3f0a8&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a513c662f.d3f0a8&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;switch&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;送受信分岐&amp;quot;,&amp;quot;property&amp;quot;:&amp;quot;payload&amp;quot;,&amp;quot;propertyType&amp;quot;:&amp;quot;msg&amp;quot;,&amp;quot;rules&amp;quot;:[{&amp;quot;t&amp;quot;:&amp;quot;eq&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;Message sent.&amp;quot;,&amp;quot;vt&amp;quot;:&amp;quot;str&amp;quot;},{&amp;quot;t&amp;quot;:&amp;quot;neq&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;Message sent.&amp;quot;,&amp;quot;vt&amp;quot;:&amp;quot;str&amp;quot;}],&amp;quot;checkall&amp;quot;:&amp;quot;true&amp;quot;,&amp;quot;outputs&amp;quot;:2,&amp;quot;x&amp;quot;:521.1041870117188,&amp;quot;y&amp;quot;:485,&amp;quot;wires&amp;quot;:[[&amp;quot;1a9501606e.fe849&amp;quot;],[&amp;quot;1a14de07ea.ded998&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a14de07ea.ded998&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;delay&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;pauseType&amp;quot;:&amp;quot;rate&amp;quot;,&amp;quot;timeout&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;timeoutUnits&amp;quot;:&amp;quot;seconds&amp;quot;,&amp;quot;rate&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;nbRateUnits&amp;quot;:&amp;quot;30&amp;quot;,&amp;quot;rateUnits&amp;quot;:&amp;quot;second&amp;quot;,&amp;quot;randomFirst&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;randomLast&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;randomUnits&amp;quot;:&amp;quot;seconds&amp;quot;,&amp;quot;drop&amp;quot;:false,&amp;quot;x&amp;quot;:764.1041870117188,&amp;quot;y&amp;quot;:526,&amp;quot;wires&amp;quot;:[[&amp;quot;1ad307ac75.70343&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a7c821ed2.91754&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;delay&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;pauseType&amp;quot;:&amp;quot;timed&amp;quot;,&amp;quot;timeout&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;timeoutUnits&amp;quot;:&amp;quot;seconds&amp;quot;,&amp;quot;rate&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;nbRateUnits&amp;quot;:&amp;quot;30&amp;quot;,&amp;quot;rateUnits&amp;quot;:&amp;quot;second&amp;quot;,&amp;quot;randomFirst&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;randomLast&amp;quot;:&amp;quot;5&amp;quot;,&amp;quot;randomUnits&amp;quot;:&amp;quot;seconds&amp;quot;,&amp;quot;drop&amp;quot;:false,&amp;quot;x&amp;quot;:771.1041870117188,&amp;quot;y&amp;quot;:621,&amp;quot;wires&amp;quot;:[[&amp;quot;1ad307ac75.70343&amp;quot;]]},{&amp;quot;id&amp;quot;:&amp;quot;1a289d2a8d.919826&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;AzureIoTHubで必要となる情報を入力します。&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:736.1041870117188,&amp;quot;y&amp;quot;:275,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;1af14fac81.3eab5&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;３０秒毎に順番に処理をします&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:774.1041870117188,&amp;quot;y&amp;quot;:485,&amp;quot;wires&amp;quot;:[]},{&amp;quot;id&amp;quot;:&amp;quot;1a63ab930e.7d0b8c&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;comment&amp;quot;,&amp;quot;z&amp;quot;:&amp;quot;1a885986dc.5c17f8&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;３０秒の間に届いた最新のメッセージの処理をします&amp;quot;,&amp;quot;info&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;x&amp;quot;:767.1041870117188,&amp;quot;y&amp;quot;:672,&amp;quot;wires&amp;quot;:[]}] 前提条件  Azureに登録できていること  手順 AzureのIoTHubに登録するところから説明していきます。
##Azure IoTHubの設定 それでは、AzureにログインしてIoTHubを実際に作っていきましょう！
Azure ポータルを開いていきます。
新規からモノのインターネット(IoT)をクリックして、IoTHubをクリックします。これから必要な設定を行っていきます。 無事にIoTHubが開かれると複数の入力欄が出るので写真を参考に入力欄を埋めていきましょう。 それでは、必須項目であるIoTHubの名前を入力してください。この名前はドメインでも使われますので他の方と重複するとエラーが出ます。入力欄の右端が緑のチェックが入れば大丈夫です。 次に、価格とスケールティアを変更していきます。この際にFreeを必ず選んでください。Standardを選んだまま作成してしまうと、後からFreeに変更することができず、再度作り直すことになります。
Freeを選択したらクリックして反映させてください。
リソースグループは既存ものがあれば、それを使って頂いてもかまいませんが、今回は初めてだという前提で、新規作成で好きなグループ名を入力してください。
Azureサーバーがある場所を指定することができます。東日本、西日本と選べますのでお好みでどうぞ。
ここまで問題なくできていれば、作成ボタンをクリックしてIoTHubをデプロイしていきます。 数分かかりますのでしばしお待ちを… 無事にIoTHubのデプロイが終わるとこのような画面が表示されます。 この画面では先ほど設定した内容が見れるほか、IoTHubの使用状態を確認することができます。
デバイスを繋げるために必要な設定を行っていきます。 共有アクセスポリシーからiothubownerをクリックし、プライマリキーをコピーします。 このとき写真で示してある部分をクリックすると簡単にキーをコピーすることができます。
このプライマリキーは次の作業で使用します。 この作業からDevice Explorerというツールを使っていきます。 このツールはWindows専用になります。MacやLinuxの場合iothub-explorerを使うようですが、今回は取り扱いません。
###Device Explorerのダウンロード こちらの**リンク**からダウンロードしてインストールをよろしくお願いします。
インストールが終わったところでDevice Explorerを使っていこうと思います。
このツールでIoTHubに接続できる端末の登録、削除、ほかにはデバイスからIoTHubへの通信モニターになったり、IoTHubからデバイスにデータを送ることができるなどIoTHubに必須のものとなっております。
説明が長くなりましたが、それではこのDevice Explorerに先ほどのプライマリキーを入力してUpdateをクリックしてください。 プライマリキーが合っていれば、このような表示がされます。この表示がでれば先ほど作ったIoTHubと連携ができるようになります。 これからIoTHubに接続できるデバイスの設定をしていこうと思います。
この作業はデバイスごとにIDを割り振る作業になります。 ManagementからCreateをクリックします。 Createをクリックするとこのような画面が出ますので、Device IDに接続するデバイス名を入力してください。
入力が終わったらCreateをクリックしてください。 無事にデバイスが作れると先ほどのDevice IDを持ったものが増えているはずです。 無事に作成できていれば、次はデバイスに必要な情報をコピーしておきましょう。 今回作成したDevice IDをクリックすると青色の欄が移動しますので、選択された状態で右クリックするとCopy connection string for selected deviceを選んでクリックしてください。</description>
    </item>
    
    <item>
      <title>Grove　説明資料</title>
      <link>https://wamisnet.github.io/blog/2017-02-22-grove/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-02-22-grove/</guid>
      <description>Groveとは Groveとは、seeed studioが開発している統一された端子で扱えるセンサーなどがあるモジュールのことです。
どのモジュールも端子に凹凸があるため初心者でも向きを間違えることなく扱えるメリットや手軽に差し替えることが出来るのでプロトタイピングするときにピッタリのものとなっております。
どんなものがあるの？ 2017/2/1現在100以上もの周りの環境を取得するためのセンサ、サーボやファンなど動きのあるアクチュエータなどがあります。
今回はその中からどのようなセンサやアクチュエータなどがあるのか解説していこうと思います。
センサ（I2C） I2C デジタル光センサ GROVEシステムのI2C接続デジタル光センサです。
このセンサーの特徴は明るさを照度の単位であるlux(ルクス)でとれるところです。
アナログのセンサーでも明るさを取得する事はできますが、こちらは明確に数値として取得出来るので机の上が適切な明るさかアドバイスすることができたり、植物にちゃんと光があたっているかなど見ることができます。
TSL2561を搭載し、光強度をデジタル信号に変換します。 検出する光のスペクトラムを、赤外線,フルスペクトラム,人間の可視光の3つのモードから選択できます。
 検出モード選択可能 高分解能16bitデジタル出力 400KHz I2Cファストモード ダイナミックレンジ 0.1~40,000LUX プログラム可能な割り込み機能(ユーザー設定可能な上下閾値)  I2C カラーセンサ GROVEシステムのI2C接続カラーセンサです。
このセンサーの特徴は色を取得することが出来ることです。
色を識別して、果物を見分ける仕組みを作ってみたり、色によって処理を分けたりするものを作成する事ができます。
2行8列のフィルターされたフォトダイオードと16bitのADコンバータを内蔵しています。
 16bitデジタル出力 I2C 400KHz SYNC拡張ピンによる外部光源とのシンクロ可能  プログラム可能な割り込み機能(ユーザー設定可能な上下閾値)    I2C 三軸加速度センサ GROVEシステムの三軸加速度センサです。 ADXL345搭載。
通信方式はI2Cです。 特徴
 電源電圧:3V~5V DC   高感度三軸加速度センサ     スタンバイモード時消費電力:0.1μA    センサ（アナログ） 水分センサ GROVEシステムの水分センサです。 水分量による土中の抵抗値変化に応じてアナログ電圧を出力します。
※増幅回路やケーブルコネクタ部などがむき出しになっています。
使用される際は、センサ部分以外が濡れないようにご注意下さい
特徴
 電源電圧:3.3V~5V  音センサ GROVEシステムの音センサーです。 マイクで拾った音声をオペアンプで増幅して出力します。</description>
    </item>
    
    <item>
      <title>USB　説明資料</title>
      <link>https://wamisnet.github.io/blog/2017-02-22-usb/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-02-22-usb/</guid>
      <description>USBはUSBメモリやスマートフォンの接続など様々なところで使われています。 その便利さゆえ電子工作でも多く使われています。
規格としてのusb USBにはいろいろと規格があります。その中からよく使われるものを軽く説明していきます。
USB2.0 現在よく使われている規格です。 今後はUSB3.0などの次の規格が普及すると思いますが、電子工作でつかわれるとしては当分USB2.0になると思います。 USB3.0とは通信速度や供給電流などが異なります。
USB Type C 最近のスマートフォンやmacなどで採用され、普及しています。 裏表を気にすることなく扱える点が特徴です。
USB micro B スマートフォンでよく見られる端子です。 注意点として充電専用のケーブルなどが出回っており、通信が出来ないことがあります。
USB B プリンターやスキャナーでよく見られる端子です。 他の端子と比べ、大きいのが特徴です。
電子工作としてのusb 電子工作でUSBを扱う理由としては、主にpcなどの外部端末と通信するためです。 どのように扱うのか注意点を併せて説明していきます。
シリアル通信する Arduinoなどで使われてるマイクロコンピューター(マイコン)でUSBを通じてプログラムの書き換えやデバッグなどの理由で通信する際には、マイコンがUSBと直接通信できる機能を持っていないことが大半です。
なので、USBとマイコンの間を取り持つモノが必要となります。 メジャーなのはFT232Cと呼ばれるICで通信することでPCからプログラムを書き込みが出来るようになります。
このあたりの詳しい内容はシリアル通信のページをご覧ください。
電源として使う USBは5Vの電圧で動いており、モバイルバッテリーなどで1Aの電流を供給することが出来ます。 しかし、PCなどと接続する際には注意が必要になります。 なぜなら、PCなどのUSBでは最大500mAの電流までしか規格上対応しておらず、過電流などの万が一の場合にはPCに対して深刻な影響を与える可能性があるので気をつけて使用してください。</description>
    </item>
    
    <item>
      <title>センサー　説明資料</title>
      <link>https://wamisnet.github.io/blog/2017-02-22-sensor/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-02-22-sensor/</guid>
      <description>センサについて センサとは、人の目や耳などの代わりに機械が周りの状況を取得するために使われる部品です。 音量を取得するものや明るさを取得するものなどその種類は多種多様で人が感じられるものはもちろん、人の感知することのできない微弱な信号を取得することができます。
1.どんなものを取得することができるのか
先ほど例に挙げた音量や明るさなどはもちろん、手のジェスチャーを取得するものやモノの色を取得するものなど本当に多種多様です。 センサによっては簡単に入手できないものもありしますので、今回はネットや秋葉原で電子部品を販売している秋月電子通商さんで扱っているものを基準にリストにまとめてみました。
 音量センサ 距離センサ 方位センサ アルコールセンサ 角度センサ 圧力センサ 放射線センサ 加速度センサ カラーセンサ 明るさセンサ 温度センサ 湿度センサ ジェスチャセンサ  秋月電子通商で扱っているセンサはこれだけではありませんが、目立ったセンサだけでもこれだけあります。 一般的にはこれらのセンサからの入力を使って他のモノを制御します。
2.センサの選び方
次にセンサの選び方について簡単に説明します。
例として 『大体100cm以内に人やモノが来たことを発見したい』 という前提で説明していきます。
まずはどのようなことを取得したいかをはっきりとさせ、目的の種類のセンサを探します。 今回は距離を測る目的のため今回は距離センサのページを開きます。 距離センサといっても複数の種類があります。 80cmまでしかはかれないものや5.5mまではかれるものなど様々です。 この中から今回の目的に向いたものを選んでみましょう。
この時に見るのがデータシートと呼ばれるセンサの性能が記載されている書類です。
それを読むのが一番詳しいことが書いてありよいのですが、とても詳しく書かれており、その内容を理解するのはなかなか難しいです。
もちろんデータシートを読めるようになるのは大切ですが、初心者の方にオススメする方法は秋月電子通商さんのセンサーごとのページに書かれている概要を読み、このセンサーで出来そうなモノにおおざっぱに目星を付け、センサの名前（例えば　○○） ＋ 使いたいボード（例えばArduino）で検索をかけることをお勧めします。
そのような検索でサンプルプログラムや回路図が記載されているブログなどのサイトが見つかると思うのでその内容を読み問題なく使えそうであればよいと思われます。 全く見つからない場合はプログラムを１から作らないといけないので、そのようなものはなかなか扱えるようにするまでが大変ですのでオススメできません。 見つからない場合は、先ほどのデータシートをよく読みプログラムや回路を作成することで扱えるようになるのですが、少し難易度は上がりますので興味があれば試してみるのも面白いと思います。
先ほどの選び方で秋月電子通商で扱っている距離センサの中から、シャープ製のGP2Y0A02YKという型番のセンサをえらんでみました。
距離も0.2mから1.5mまで読めますし、検索すると複数のサイトが見つかりますので問題なく作成出来るでしょう。
他にもありますがこのセンサは距離の精度やお値段も安いのでこれでいいでしょう。
距離に精度が必要であれば別のセンサを使えばいいと思います。
3．センサーとマイコンのつなぎ方
センサを選んだあと、普通はセンサとマイコン(センサのデータを処理するところ)を繋げてプログラムを書き、他のモノと連携させていきます。
その繋げるということですが、どんな風に繋げることができるのか簡単に紹介していきます。
そもそもマイコンがなぜ必要かと言うと、様々なセンサで取得した値は電気信号であるので何らかの形で私たちが分かるようにしないと扱うことができません。 センサの値を受け取るのにお勧めなのはArduinoとよばれるマイコンボードが本やインターネットの情報が多くて困ったときに助かるので良いです。
先ほどセンサから電気信号で出ているといいましたが、アナログの値で出力されているものやある規則に沿って通信するものもあるので順に説明していきます。
アナログ これはシンプルな圧力センサや明るさセンサでよくみられるものです。 電圧が徐々に変化するためこの情報を取得するのには多くは指定されたアナログ入力ピンに接続するのが前提になります。
##デジタル
これはHIGH or LOWの2つの状態を持つセンサです。 スイッチや人感センサなどで見られます。この情報はデジタル入力ピンで取得することができます。
I2C,SPIなど これは特定の規格で通信できるセンサで、規格によっては複数のセンサを少ない制御線で制御出来たり、アナログのセンサなどに比べて明確な数値でセンサの値を入力出来るなどメリットがあります。 しかしプログラムが少し複雑になるためセンサごとにライブラリーが出回っていることが多いです。</description>
    </item>
    
    <item>
      <title>デジタル、アナログ　説明資料</title>
      <link>https://wamisnet.github.io/blog/2017-02-22-digital_analog/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-02-22-digital_analog/</guid>
      <description>アナログ、デジタルと聞いて何が思い浮かぶでしょうか？
テレビもありますが、今回は電気的にデジタル、アナログの違いについて説明していきます。
アナログデジタルの違いって？ 一番の違いはグラフにしたときに分かります。 これは電圧の変化のことを指します。
デジタルはある(1)ない(0)のどちらかでの表現のためシンプルなデータになっています。 これによってあるかないかはハッキリと見て分かるのですがもともとの値がどれくらい大きかったのか、小さかったのかは分からなくなってしまいました。
アナログであればどれだけ大きい、小さいのかは分かるのですがデータとしては大きいという状態になります。
マイコンでみるアナログ、デジタル アナログ、デジタルがどの様なものか分かったところで、マイコン（Arduinoなど）でその値を取得する方法を説明します。
マイコンの種類により詳細な手順は変わるので注意してください。
アナログ、デジタルの入出力については、指定されたピンでやりとりします。
今回のプログラムについての説明は全てArduino Unoを対象にさせていただきます。
デジタル 入力 Arduino Unoで例えるとdigitalRead関数により、ある(HIGH)ない(LOW)を取得できます。 このときに注意しないといけないのが閾値の値です。
Arduino Unoの場合、閾値は2.5v以上になるとHIGHになり、それ以下はLOWとなります。この閾値はマイコンより異なるので注意が必要です。
スイッチなどを付けて、押された押されてないという状態を取得する場合、ノイズによって押していないのに押したと誤検知することがあります。 その時にはプルアップという方法をすることで誤検知を減らすことができます。
出力 Arduino Unoで例えるとdigitalWrite関数により、ある(HIGH)ない(LOW)を出力できます。
Arduino UnoではHIGHのとき5vが出力され、LOWのとき0vが出力されます。
アナログ 入力 Arduino Unoで例えるとanalogRead関数により、0(0v)-1023(5v)の1024段階で値を取得できます。
入力する電圧が5vを超える場合、抵抗で分圧をすることで入力することができます。
分圧については、検索していただくと計算してくれるサイトなどあるので参考にしてください。
出力 Arduino Unoではアナログ出力はできません。 しかしPWMと呼ばれる方式により、擬似的にアナログ出力をすることができます。　PWMの出力方法はanalogWrite関数により可能となります。0(0v)-255(5v)の256段階で指定することが可能です。
それによりLEDをふんわり付けたりすることが可能です。</description>
    </item>
    
    <item>
      <title>回路図　説明資料</title>
      <link>https://wamisnet.github.io/blog/2017-02-22-circite/</link>
      <pubDate>Wed, 22 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-02-22-circite/</guid>
      <description>回路図とは、電子部品同士をどのように繋ぐのか図解したものです。
回路図があることで自分が見たときはもちろん、他の人に伝える時に間違えることなく電子回路を組み立てることができます。
回路図をみてみよう 回路図にもいろいろと種類があり、線と簡単な図形で描かれたものが一般的です。
このような回路図を読むことが出来るとインターネットにある様々な回路を組むことができます。 しかし、この様な回路図を初めて見るような方には難易度が高いです。 上の様な回路図を読みたい場合、他に説明してくれるサイトもありますのでそちらをご覧ください。
今回は、『Frizing』と呼ばれる回路図作成ソフトの回路図を見てみようと思います。 このソフトで描かれた回路図の特徴は、電子部品をイラストで表してくれるところです。
ボタンを押すとLEDが光る回路を組んでみました。
実は上のシンプルな図形の回路図とこのFrizingで書いた回路図は同じ意味をもっています。 多くの場合はシンプルな図形の方で表記されるため理解できるとよいとは思いますがこの図形ってなんだっけ？と思うことがあれば検索するようにすればよいと思います。
回路図でよくみる図    名称 回路図記号 説明     電源  電池やUSBなどから供給される電気の供給源です。プラスとマイナスがあり、回路図では横に２本線があるうちの長い方がプラス、短い方がマイナスとなります。   コンデンサ  コンデンサは電気を蓄えたり放出したりする電子部品です。プラスマイナスの極性が決まっているものもあるので注意が必要です。   抵抗  電流の流れを抑えることができます。LEDと一緒に使うことでLEDが焼けることを保護するこことができます。   スイッチ  オン、オフを切り替えすることができるものです。スイッチは様々なものがあり、どのようなことがしたいかでスイッチを変えるとよいです。   LED  小さい電力で操作でき、光らせることができます。明るいものやマトリックス状になったものなどがあります。    </description>
    </item>
    
    <item>
      <title>CocoaBitというオリジナルBitを作った話</title>
      <link>https://wamisnet.github.io/blog/2016-12-21-cocoabit_create/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-12-21-cocoabit_create/</guid>
      <description>CocoaBitというlittleBits拡張モジュールを作ってみて気がついたことを書き連ねておきます。
CocoaBitとは まずはカンタンにCocoaBitについて説明していこうと思います。
CocoaBitとは、cloudBitと呼ばれるインターネットと通信ができるモジュールが日本では技適のため使えないため、開発された拡張モジュール(拡張Bit)です。
私が作成しているNefryをベースとしており、NefryのメリットであるWiFiやモジュールの設定を簡単に出来る点を引き継ぎ、littleBits向けにさらにカスタマイズしています。
(CocoaBitはまだ販売されてませんが、反響があれば…
CocoaBitのサイトはこちら
カンタンにCloudBitがどのようなものか分かったところで作ってみて気が付いたメリットデメリットについて話してみようと思います。
メリット 手軽に試せる なんといってもこれが一番のlittleBitsと繋げられるメリットだと思います！
普通の電子工作であると半田付けが必要だったり、ブレッドボードにピンを何本も刺さないといけなかったりするのが、littleBitsなら繋ぐだけでいけます！磁石で繋がるので間違えることもない！
子どもでもあそべる 向きを間違えないため、こどもに任せてしまっても問題なく作ることができます！
子どもももちろんですが大人でもロジックBitなどもあるので充分に遊ぶことが出来ます！
デメリット とりあえずお高い　 littleBits自体セットで販売などもされているため若干安くなったりしますが、それでもお高い…
これは特に多数のBitがあるとより楽しめるのですが、揃えるまでが…
ときどき接触がわるいときがある 磁石で接続しているため仕方無いのですがカンタンにとれてしまいます。それはlittleBitsの手軽に繋げられるとこと関わるので難しいところです…
(Bitを留められるボードもあるのでそれで解決するところですが…
bitの形に制限がある これもlittleBitsの世界なので仕方無いところですが、公式からこのようなサイズで作るといいよ、という情報が出ています。
(これも無視して作ることも出来ますが、littleBits同士キレイに揃うといいので出来るだけ合わせましょう。
オリジナルのBitをつくるまで！ 私の備忘録を兼ねて今回のCocoaBitを作成した流れを説明していこうと思います。
まずは、どんなものを作るのか検討しよう。 どんなものを作るのか検討すれば、必要な部品数が判明すると思われます。その部品から必要となるであろうサイズを割り出します。
そのサイズからその部品が収まるBitのサイズを選びます。
こちらのサイト内にあるHDK manualのリンクをクリックします。
 よりプロフェッショナルなTIPSについてはHDK manual やTips &amp;amp; Tricks もチェックして下さい。
 ファイルがダウンロードされるのを待って、Design\Design Manual\PDFsの中にあるUser Interface Considerations for littleBits Module Design.pdfを開き部品が収まるサイズを探します。
無事に見つかったら図の下にある英語の文字を覚えておきましょう。
さくっと回路を起こしていこう eagleのテンプレートファイルがGitHubで公開されているのでそれをベースに作成するのがお勧めです。
私はKicadの方が好きなので、採寸をまねて作成しました。 こんな感じにできれば、問題ありません。
回路ができれば、SeeedStudioさんやElecrowさんを作成してもらいましょう！
##　部品をそろえよう
まずは、littleBitsの公式サイトからBITSNAPSというlittleBitsの両端を購入しましょう。
もしくは、littleBitsのHardware Development Kitを日本の代理店であるKORGさんから購入することもできます。
あとはほかに必要な部品を購入していてください。
組み立てよう！ BITSNAPSともろもろの部品をつければ、無事にオリジナルの拡張Bitが出来上がりました！
このあたりもSeeedStudioさんやElecrowさんの部品実装サービスを使うと大変便利です。 CocoaBitも作成していただいています。
#まとめ
そもそも、littleBitsの拡張することができるなんて思いませんでした。 BitSnaps自体がちょっと高価ではありますが、自分好みのものをつくれるメリットは大きいと思います。
回路を作成するなど難易度は高めですが、完成度も高いので是非お勧めします！ よいlittleBitsライフを！</description>
    </item>
    
    <item>
      <title>Arduino勉強会資料</title>
      <link>https://wamisnet.github.io/blog/2016-11-01-arduino/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-11-01-arduino/</guid>
      <description>ArduinoIDEをダウンロードする https://www.arduino.cc/
こちらからダウンロードしましょう
早速Lチカしてみよう ハードウエア入門しよう
// the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output.  pinMode(13, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(1000); // wait for a second  digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(1000); // wait for a second } LEDを繋いでみよう 向きを間違えないように！</description>
    </item>
    
    <item>
      <title>Azure IoT HubをESP8266で使おう！</title>
      <link>https://wamisnet.github.io/blog/2016-09-05-azure/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-09-05-azure/</guid>
      <description>日本での発売から一年がたち多数の作例が出てくる「ESP8266」(ESP-WROOM-02)をもっと使いこなしてみませんか？
今回はAzureのサービスの一つであるIoTHub、それを簡単に扱えるライブラリーを作ったので紹介してみようと思います。
ちょこっと宣伝 ところどころで出てくるESP8266の基板ですが、私が作成した「Nefry」(ねふりー)という基板を使っています。
dotstudioさんにて販売中です！！
USBに直接繋げられたり、Webページ上でWiFiの設定やESP8266の端末設定ができるようになっていたりとESP8266をより簡単に扱えるものになっています。
詳しくはLigブログで記事をいくつか載せていますのでご覧ください。
自作したオリジナルIoTデバイス「Nefry」とインターネットを繋いでみた
Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた
Azure IoT Hub って？ IoT Hubは、その名の通りIoTデバイスとクラウドを繋ぐHubとなるサービスです。 似たようなサービスとして「Event Hubs」がありますが、Event Hubsとの大きな違いは2つあります。
IoTHubの優れた点
 デバイスとクラウドとの双方向通信が可能。(Event Hubsはデバイス→クラウドの一方のみ) デバイス毎にIDを登録して認証する為、よりセキュアに利用できる。(Event HubsはEvent Hubsごとの許可)  
http://qiita.com/hiiyan0402/items/9c93d9673114675a57d4
用意するもの  ESP8266(ESP-WROOM-02) Azure アカウント ArduinoIDE Arduino core for ESP8266 WiFi chip(https://github.com/esp8266/Arduino) AzureIoTHubライブラリー(https://github.com/wamisnet/Azure-iothub-mqtt-esp8266)  IoTHubで通信をしてみる 今回はESP8266からIoTHubで通信するところまでを作っていきます。
Azure IoTHubの設定 それでは、AzureにログインしてIoTHubを実際に作っていきましょう！
Azure ポータルを開いていきます。
新規からモノのインターネット(IoT)をクリックして、IoTHubをクリックします。これから必要な設定を行っていきます。
無事にIoTHubが開かれると複数の入力欄が出るので写真を参考に入力欄を埋めていきましょう。 それでは、必須項目であるIoTHubの名前を入力してください。この名前はドメインでも使われますので他の方と重複するとエラーが出ます。入力欄の右端が緑のチェックが入れば大丈夫です。 次に、価格とスケールティアを変更していきます。この際にFreeを必ず選んでください。Standardを選んだまま作成してしまうと、後からFreeに変更することができず、再度作り直すことになります。
Freeを選択したらクリックして反映させてください。
リソースグループは既存ものがあれば、それを使って頂いてもかまいませんが、今回は初めてだという前提で、新規作成で好きなグループ名を入力してください。
Azureサーバーがある場所を指定することができます。東日本、西日本と選べますのでお好みでどうぞ。
ここまで問題なくできていれば、作成ボタンをクリックしてIoTHubをデプロイしていきます。
数分かかりますのでしばしお待ちを…
無事にIoTHubのデプロイが終わるとこのような画面が表示されます。 この画面では先ほど設定した内容が見れるほか、IoTHubの使用状態を確認することができます。
デバイスを繋げるために必要な設定を行っていきます。 共有アクセスポリシーからiothubownerをクリックし、プライマリキーをコピーします。 このとき写真で示してある部分をクリックすると簡単にキーをコピーすることができます。
このプライマリキーは次の作業で使用します。 この作業からDevice Explorerというツールを使っていきます。 このツールはWindows専用になります。MacやLinuxの場合iothub-explorerを使うようですが、今回は取り扱いません。
Device Explorerのダウンロード こちらの**リンク**からダウンロードしてインストールをよろしくお願いします。</description>
    </item>
    
    <item>
      <title>ESP8266で静的なIPをわりふってみる</title>
      <link>https://wamisnet.github.io/blog/2016-04-27-esp8266_staticip/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-04-27-esp8266_staticip/</guid>
      <description>家のネット環境によってはDHCPでIPアドレスを取得するより、静的（static）なIPで割り振りたいという要望を聞きましたのでソースコードを公開します。
#表示内容
ESP8266のlocalIP ゲートウェイのIP サブネットマスク ESP8266のmacAddress
#コード
#include &amp;lt;ESP8266WiFi.h&amp;gt;#define debug Serial /* IPアドレスをDHCPではなく手動で割り振ることをすることができる。 localIP:moduleのIP gateway:デフォルトゲートウエイ subnet:サブネットマスク DNSは指定しなくてよい。 config(IPAddress local_ip, IPAddress gateway, IPAddress subnet, IPAddress dns1 = (uint32_t)0x00000000, IPAddress dns2 = (uint32_t)0x00000000) */ void setup(){ debug.begin(115200); WiFi.config(IPAddress(192,168,1,2),IPAddress(192,168,1,1),IPAddress(255,255,255,0)); debug.print(&amp;#34;Local IP :&amp;#34;);debug.println(address(WiFi.localIP())); debug.print(&amp;#34;Gateway IP:&amp;#34;);debug.println(address(WiFi.gatewayIP())); debug.print(&amp;#34;SubnetMask:&amp;#34;);debug.println(address(WiFi.subnetMask())); debug.print(&amp;#34;macAddress:&amp;#34;);debug.println(WiFi.macAddress()); } void loop(){ } String address(IPAddress ip){ String ipStr = String(ip[0]) + &amp;#39;.&amp;#39; + String(ip[1]) + &amp;#39;.&amp;#39; + String(ip[2]) + &amp;#39;.&amp;#39; + String(ip[3]); return ipStr; } </description>
    </item>
    
    <item>
      <title>ESP8266でWPSを実装してみる</title>
      <link>https://wamisnet.github.io/blog/2016-04-22-esp8266_wps/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-04-22-esp8266_wps/</guid>
      <description>http://bbs.espressif.com/viewtopic.php?t=1096
ソース元はこちら
ESP-WROOM-02にはWPSでWiFiの設定をすることができる環境がつくられているようなのでその解説と結果を報告します。
環境 Arduino IDE 1.6.7 Arduino core for ESP8266 WiFi chip (https://github.com/esp8266/Arduino) v2.2.0
Arduino coreのバージョンが古いと実装されてない可能性があります。
コード #include &amp;lt;ESP8266WiFi.h&amp;gt; void Wifi_wait(); void setup() { Serial.begin(115200); WiFi.mode(WIFI_STA); //WiFi.begin(&amp;#34;&amp;#34;,&amp;#34;&amp;#34;)このようにすることでWPSで保存したデータがある場合そちらに接続するようになる  WiFi.begin(&amp;#34;&amp;#34;, &amp;#34;&amp;#34;); Wifi_wait(); // Wifiに接続していないときにはWPSを開始します  if (WiFi.status() != WL_CONNECTED) { Serial.println(&amp;#34;\nAttempting connection ...&amp;#34;); WiFi.beginWPSConfig(); Wifi_wait(); if (WiFi.status() == WL_CONNECTED) { Serial.println(&amp;#34;Connected!&amp;#34;); Serial.println(WiFi.localIP()); Serial.println(WiFi.SSID()); Serial.println(WiFi.macAddress()); } else { Serial.println(&amp;#34;Connection failed!&amp;#34;); } } else { Serial.println(&amp;#34;\nConnection already established.&amp;#34;); } } void loop() { } void Wifi_wait() { int wait=0; Serial.</description>
    </item>
    
  </channel>
</rss>