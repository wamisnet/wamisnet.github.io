<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nefry on わみめも</title>
    <link>https://wamisnet.github.io/tags/nefry/</link>
    <description>Recent content in nefry on わみめも</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 20 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://wamisnet.github.io/tags/nefry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>obniz OSをESP32(NefryBT)に入れて動かそう！</title>
      <link>https://wamisnet.github.io/blog/2019-08-20-obniz_install_nefry/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2019-08-20-obniz_install_nefry/</guid>
      <description>こんにちは！わみです！ 今日は先日リリースされたobnizOSを使い始めてみたので、どんな感じなのかも合わせて書いていこうと思います。
そもそも「obniz」ってなに？って方は「arduinoとは全く違う、IoTツールobnizのしくみ」をご覧ください。
なにができるのか NefryでobnizOS動いた！！ pic.twitter.com/YAbw8ggR5B
&amp;mdash; わみ@NefryとかFlutter本とか (@wamisnet) August 17, 2019  HTML+JSでハードウエア(ESP32(NefryBT))を動かしてみた動画です！
JavaScriptやpythonでハードウエアを動かすことができる「obniz」ただ、6000円近くするので少々お値段がします…
その技術をお店で1500円ぐらいで売っているESP32のボードにインストールができるのが先日発表された「obnizOS」なのです！
私が作っている「Nefry BT」というデバイスにインストールしてみたのでその方法とどんな感じなのかをまとめてみようと思います。 ESP32を搭載したボードであれば、同じような手順で行うことができるのでぜひお試しください。
（ESP32-picoについては未サポート（具体例：M5stickC））
インストール ライセンスを購入する https://obniz.io/ja/console 上記ページから「デバイス」を選択し、「obniz OSのライセンスを新規購入」をクリックします。
ライセンスの選択画面で「Hobby」ライセンス、「新規にobnizIDを発行」、個数を選び、「金額を確認」をクリックします。 カードの情報がない場合、このタイミングで入力します。
確認画面が表示されて、問題なければ「ライセンスを購入」を押します。
購入が完了すると、「DeviceKey」をダウンロードできます。 これはインストール時に使用するので必ずダウンロードしておいてください。 （画像取り忘れたので公式ドキュメントの画像…）
前提条件 obniz cliを使用しますのでpython3.4以上のものをインストールしておいてください。
py -3 -Vでバージョン情報を確認することができます。 インストールされていれば、上記のコマンドをターミナルで実行すると次のようにバージョンが表示されます。
表示されない場合は、インストールされているか確認したり、pathが通っているか確認してください。
obniz_cliをインストール obniz_cliとは、簡単にobnizOSをインストールするために作られたアプリになります。それを使って、セットアップを行っていきたいと思います。
ターミナルでpip3 install obniz_cliと入力します。
インストールが開始されるはずです！「Successfully installed obniz_cli」とでれば大丈夫です。
Nefry BTにobnizOSをインストール Nefry BTをPCと接続し、obnizOSをインストールしていこうと思います。
ターミナルでobniz_cli flashosと入力します。
ESP32を接続しているポートを選択画面がでるので、ポートの横に書かれている数字（今回なら0）を入力します。ここで選んだポート名（今回ならCOM5）を覚えておいてください。
入力するとインストールが開始されます。
しばらくするとインストールが完了します。
次に無線LANの設定とライセンスの適用を行っていきます。
ターミナルでpython -m serial.tools.miniterm ポート名 115200と入力します。
ポート名は先ほど選んだものに変更しておいてください。
指示に従って、次の項目を入力します。
 DeviceKey:購入時に取得したファイルに書かれた文字列 SSID:接続したい無線LANのもの PASS:接続したい無線LANのもの 固定IP or DHCP:基本的にはDHCPの「0」を選択する  固定IPの場合 下記の項目を設定する  IP Address Subnetmask Default gateway      設定された項目が正しければ、最後に「Online」と表示されます。</description>
    </item>
    
    <item>
      <title>Nefry Tips 無線LAN接続について</title>
      <link>https://wamisnet.github.io/blog/nefry_tips_2018_08_28/</link>
      <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_tips_2018_08_28/</guid>
      <description>Nefryを使ったいろんな作品が見られて幸せなわみさんです。
今回は無線LANのプチTipsを共有したいと思っています。
Nefryには、Webページ上で設定した無線LANから自動的にもっとも電波強度が強いものに接続するような機能があります。
ただ、基本的には起動時に接続しにいくのみで、起動したあとに切断された場合再接続処理が上手くいかず接続できないことがあります。
デモのような短時間の動作であれば上記のような現象は気にならないと思いますが、長時間のモニタリングなどでなってしまうとなかなか辛いことがあると思いますので今回のTipsを試してもらえればと思います！
#include&amp;lt;Nefry.h&amp;gt;void setup() { // 何か処理 } void loop() { // なんか処理a  if(WiFi.status() != WL_CONNECTED){ //無線LANが接続されていないとき  Nefry.reset(); } } 上記のコードが今回のTipsです。
無線LANに接続していないときにNefryをリセットするコードになります。
Nefryがネットワークにつながらなくなっても再起動して無線LAN接続が正常に行えるはずです！！
ぜひ試してみてください！</description>
    </item>
    
    <item>
      <title>Nefry BTと連携できるFirebaseライブラリの解説記事を寄稿しました</title>
      <link>https://wamisnet.github.io/blog/nefry_firebase_repo/</link>
      <pubDate>Tue, 14 Aug 2018 02:45:17 +0900</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_firebase_repo/</guid>
      <description>DotstudioさんにFirebaseとNefryを連携方法を説明する記事を寄稿しました。
ぜひご覧ください！
https://dotstud.io/docs/nefrybt-firebase-library/</description>
    </item>
    
    <item>
      <title>9/2 NefryUGもくもく会イベント開催します！！</title>
      <link>https://wamisnet.github.io/blog/nefry_ug_2/</link>
      <pubDate>Sat, 11 Aug 2018 00:40:17 +0900</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_ug_2/</guid>
      <description>Nefry ユーザグループイベント 2回目開催決定 9/2（日）に開催しますので、ぜひ遊びにきてください。
ナゾ枠で私が質問を受け付ける枠があるのでぜひ（だれもいないと寂しい）
イベントページはこちら！</description>
    </item>
    
    <item>
      <title>NefryUG参加レポ</title>
      <link>https://wamisnet.github.io/blog/nefry_ug_1/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/nefry_ug_1/</guid>
      <description>8/7にdotstudioで開催された、Nefryユーザグループイベントに参加してきました。
（一応主催　ちゃんとくさんにほとんどやっていただいた。ありがとうございます。）
connpassページ
ちゃんとくさんも言っていたけど、UGイベント初なんですよね。
これから大きく育っていってほしいです。
初イベントは13人の方に来ていただいて、6人の人に発表して頂きました！ ホントにありがたい限りです！
イベントの様子の画像を何枚か貼っておきます！
ちなみに次のイベントは来月頃の予定らしい…</description>
    </item>
    
    <item>
      <title>Nefryいろんなウラの話</title>
      <link>https://wamisnet.github.io/blog/2017-12-25-nefry_talk/</link>
      <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-12-25-nefry_talk/</guid>
      <description>2020/7/4 追記
  　2年前に書いた記事を振り返ってみると、実際に実現できたことも多々あって、やってこれてほんとによかったなと思います。
  　現在、他のESP32ボードに押されてしまっていますがこういった情報の蓄積は非常に強みであり、支えていただいた皆さんには感謝の気持ちでいっぱいです。ありがとうございました。
 Nefry AdventCalendar最終日の担当のわみです！
まずは今日までNefry Advent Calendarを書いてくれた皆さんに感謝です！！はじめのころはちゃんと埋まるのか不安ですがみなさんのおかげで今日まで無事にこれてホントにうれしい気持ちでいっぱいです！
最終日のテーマとして、Nefryの作者から見たNefryの過去と未来の夢の話をしようと思います。ぜひご覧ください！
Nefryの過去話 Nefryの過去話として、作ったNefryの遍歴をぱぱっとまとめてみようと思います。
Nefry誕生 Nefryは2015年8月9日に開催されたJS Board Shibuyaというイベントをきっかけに知り合ったMilkcocoaの中の人である川野さん、平間さん、落合さんとの会話から
 ESP8266を簡単に触れるボードがほしい
 というこの一言から生まれました。
一番初期に作られたNefryの原型となるものです。
この時はジャンパーワイヤで切り替えをしないと書き込みができないものでしたが、これでもあの当時はそれなりに便利に使えるボードでした。 switch-scienceさんのEsprシリーズすらなかった時代でした。
まだNefryという名前すらついてないですねｗ
Nefry (v1) このあと第2号として先ほどボードの改良版として今のNefry v2に近い形のNefry(v1)?を2015年11月ごろに作成しました。 このころのバージョンはフリスクケースを改造したケースが付属していました。結構量産が大変でフリスクを山のように食べていた思い出がありますね。
このバージョンは60個程度つくってイベントなどで販売していました。無事に全数捌けたのがうれしかったですね。
この時は今まで続くシリーズになるのかどうなのか確定していなくてフワフワしていたように思います。
このころは写真に写っているMilkcocoaとどうやっていこうかと模索していたように思います。 全部私が手で半田付けとかしていたのでなかなか大変でしたね。 あとこのころにのびさんと出会ってLIGブログで記事を書くことになりましたね。そう思うとこのタイミングが今に至る転換点だったように思います。
Nefry v2 2016年7月にNefry(v1)の改良版としてNefry v2を作成しました。 このころから中国に量産をかけるようになりました。MDFのケースが付属するようになったのもこのタイミングからですね。
このタイミングでのびさんがLIGから独立してdotstudioになったのもこのタイミングに近いですね。 dotstudioになってからネット販売が増え、累計で150台程度販売されました。
販売してから反省したのですが、シリアル変換を搭載すればよかったと思ってますｗ
このタイミングから徐々にコミュニティが生まれ始めたのかなと思います。
Nefry BT 2017年5月にクラウドファンディングをした、Nefry BTです。
dotstudioと共同で開発、販売を行いました。これがたった３時間足らずで目標金額を達成することになるとは思いませんでした。 みなさんに支援していただけてホントによかったです。
Facebookグループなどで最近書き込みが多くコミュニティが発展しているのはホントにうれしいです！！
予想以上の売れ行きで現在在庫切れで申し訳ないです…(´・ω・｀)
次のロットを量産しているので少々お待ちください！！
Nefryの未来の夢 これまででNefryの過去話をしました。 ちょっとこれから私の思い浮かべる未来の夢のお話をしようかと思います。
今のところのNefryは累計出荷台数をまとめてみました。
   Year Nefryシリーズ合計出荷台数     2015 30   2016 100   2017 350   2018 400   2019 200     2019年までのものを追記</description>
    </item>
    
    <item>
      <title>CocoaBitというオリジナルBitを作った話</title>
      <link>https://wamisnet.github.io/blog/2016-12-21-cocoabit_create/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-12-21-cocoabit_create/</guid>
      <description>CocoaBitというlittleBits拡張モジュールを作ってみて気がついたことを書き連ねておきます。
CocoaBitとは まずはカンタンにCocoaBitについて説明していこうと思います。
CocoaBitとは、cloudBitと呼ばれるインターネットと通信ができるモジュールが日本では技適のため使えないため、開発された拡張モジュール(拡張Bit)です。
私が作成しているNefryをベースとしており、NefryのメリットであるWiFiやモジュールの設定を簡単に出来る点を引き継ぎ、littleBits向けにさらにカスタマイズしています。
(CocoaBitはまだ販売されてませんが、反響があれば…
CocoaBitのサイトはこちら
カンタンにCloudBitがどのようなものか分かったところで作ってみて気が付いたメリットデメリットについて話してみようと思います。
メリット 手軽に試せる なんといってもこれが一番のlittleBitsと繋げられるメリットだと思います！
普通の電子工作であると半田付けが必要だったり、ブレッドボードにピンを何本も刺さないといけなかったりするのが、littleBitsなら繋ぐだけでいけます！磁石で繋がるので間違えることもない！
子どもでもあそべる 向きを間違えないため、こどもに任せてしまっても問題なく作ることができます！
子どもももちろんですが大人でもロジックBitなどもあるので充分に遊ぶことが出来ます！
デメリット とりあえずお高い　 littleBits自体セットで販売などもされているため若干安くなったりしますが、それでもお高い…
これは特に多数のBitがあるとより楽しめるのですが、揃えるまでが…
ときどき接触がわるいときがある 磁石で接続しているため仕方無いのですがカンタンにとれてしまいます。それはlittleBitsの手軽に繋げられるとこと関わるので難しいところです…
(Bitを留められるボードもあるのでそれで解決するところですが…
bitの形に制限がある これもlittleBitsの世界なので仕方無いところですが、公式からこのようなサイズで作るといいよ、という情報が出ています。
(これも無視して作ることも出来ますが、littleBits同士キレイに揃うといいので出来るだけ合わせましょう。
オリジナルのBitをつくるまで！ 私の備忘録を兼ねて今回のCocoaBitを作成した流れを説明していこうと思います。
まずは、どんなものを作るのか検討しよう。 どんなものを作るのか検討すれば、必要な部品数が判明すると思われます。その部品から必要となるであろうサイズを割り出します。
そのサイズからその部品が収まるBitのサイズを選びます。
こちらのサイト内にあるHDK manualのリンクをクリックします。
 よりプロフェッショナルなTIPSについてはHDK manual やTips &amp;amp; Tricks もチェックして下さい。
 ファイルがダウンロードされるのを待って、Design\Design Manual\PDFsの中にあるUser Interface Considerations for littleBits Module Design.pdfを開き部品が収まるサイズを探します。
無事に見つかったら図の下にある英語の文字を覚えておきましょう。
さくっと回路を起こしていこう eagleのテンプレートファイルがGitHubで公開されているのでそれをベースに作成するのがお勧めです。
私はKicadの方が好きなので、採寸をまねて作成しました。 こんな感じにできれば、問題ありません。
回路ができれば、SeeedStudioさんやElecrowさんを作成してもらいましょう！
##　部品をそろえよう
まずは、littleBitsの公式サイトからBITSNAPSというlittleBitsの両端を購入しましょう。
もしくは、littleBitsのHardware Development Kitを日本の代理店であるKORGさんから購入することもできます。
あとはほかに必要な部品を購入していてください。
組み立てよう！ BITSNAPSともろもろの部品をつければ、無事にオリジナルの拡張Bitが出来上がりました！
このあたりもSeeedStudioさんやElecrowさんの部品実装サービスを使うと大変便利です。 CocoaBitも作成していただいています。
#まとめ
そもそも、littleBitsの拡張することができるなんて思いませんでした。 BitSnaps自体がちょっと高価ではありますが、自分好みのものをつくれるメリットは大きいと思います。
回路を作成するなど難易度は高めですが、完成度も高いので是非お勧めします！ よいlittleBitsライフを！</description>
    </item>
    
    <item>
      <title>Azure IoT HubをESP8266で使おう！</title>
      <link>https://wamisnet.github.io/blog/2016-09-05-azure/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-09-05-azure/</guid>
      <description>日本での発売から一年がたち多数の作例が出てくる「ESP8266」(ESP-WROOM-02)をもっと使いこなしてみませんか？
今回はAzureのサービスの一つであるIoTHub、それを簡単に扱えるライブラリーを作ったので紹介してみようと思います。
ちょこっと宣伝 ところどころで出てくるESP8266の基板ですが、私が作成した「Nefry」(ねふりー)という基板を使っています。
dotstudioさんにて販売中です！！
USBに直接繋げられたり、Webページ上でWiFiの設定やESP8266の端末設定ができるようになっていたりとESP8266をより簡単に扱えるものになっています。
詳しくはLigブログで記事をいくつか載せていますのでご覧ください。
自作したオリジナルIoTデバイス「Nefry」とインターネットを繋いでみた
Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた
Azure IoT Hub って？ IoT Hubは、その名の通りIoTデバイスとクラウドを繋ぐHubとなるサービスです。 似たようなサービスとして「Event Hubs」がありますが、Event Hubsとの大きな違いは2つあります。
IoTHubの優れた点
 デバイスとクラウドとの双方向通信が可能。(Event Hubsはデバイス→クラウドの一方のみ) デバイス毎にIDを登録して認証する為、よりセキュアに利用できる。(Event HubsはEvent Hubsごとの許可)  
http://qiita.com/hiiyan0402/items/9c93d9673114675a57d4
用意するもの  ESP8266(ESP-WROOM-02) Azure アカウント ArduinoIDE Arduino core for ESP8266 WiFi chip(https://github.com/esp8266/Arduino) AzureIoTHubライブラリー(https://github.com/wamisnet/Azure-iothub-mqtt-esp8266)  IoTHubで通信をしてみる 今回はESP8266からIoTHubで通信するところまでを作っていきます。
Azure IoTHubの設定 それでは、AzureにログインしてIoTHubを実際に作っていきましょう！
Azure ポータルを開いていきます。
新規からモノのインターネット(IoT)をクリックして、IoTHubをクリックします。これから必要な設定を行っていきます。
無事にIoTHubが開かれると複数の入力欄が出るので写真を参考に入力欄を埋めていきましょう。 それでは、必須項目であるIoTHubの名前を入力してください。この名前はドメインでも使われますので他の方と重複するとエラーが出ます。入力欄の右端が緑のチェックが入れば大丈夫です。 次に、価格とスケールティアを変更していきます。この際にFreeを必ず選んでください。Standardを選んだまま作成してしまうと、後からFreeに変更することができず、再度作り直すことになります。
Freeを選択したらクリックして反映させてください。
リソースグループは既存ものがあれば、それを使って頂いてもかまいませんが、今回は初めてだという前提で、新規作成で好きなグループ名を入力してください。
Azureサーバーがある場所を指定することができます。東日本、西日本と選べますのでお好みでどうぞ。
ここまで問題なくできていれば、作成ボタンをクリックしてIoTHubをデプロイしていきます。
数分かかりますのでしばしお待ちを…
無事にIoTHubのデプロイが終わるとこのような画面が表示されます。 この画面では先ほど設定した内容が見れるほか、IoTHubの使用状態を確認することができます。
デバイスを繋げるために必要な設定を行っていきます。 共有アクセスポリシーからiothubownerをクリックし、プライマリキーをコピーします。 このとき写真で示してある部分をクリックすると簡単にキーをコピーすることができます。
このプライマリキーは次の作業で使用します。 この作業からDevice Explorerというツールを使っていきます。 このツールはWindows専用になります。MacやLinuxの場合iothub-explorerを使うようですが、今回は取り扱いません。
Device Explorerのダウンロード こちらの**リンク**からダウンロードしてインストールをよろしくお願いします。</description>
    </item>
    
    <item>
      <title>ESP8266で静的なIPをわりふってみる</title>
      <link>https://wamisnet.github.io/blog/2016-04-27-esp8266_staticip/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-04-27-esp8266_staticip/</guid>
      <description>家のネット環境によってはDHCPでIPアドレスを取得するより、静的（static）なIPで割り振りたいという要望を聞きましたのでソースコードを公開します。
#表示内容
ESP8266のlocalIP ゲートウェイのIP サブネットマスク ESP8266のmacAddress
#コード
#include &amp;lt;ESP8266WiFi.h&amp;gt;#define debug Serial /* IPアドレスをDHCPではなく手動で割り振ることをすることができる。 localIP:moduleのIP gateway:デフォルトゲートウエイ subnet:サブネットマスク DNSは指定しなくてよい。 config(IPAddress local_ip, IPAddress gateway, IPAddress subnet, IPAddress dns1 = (uint32_t)0x00000000, IPAddress dns2 = (uint32_t)0x00000000) */ void setup(){ debug.begin(115200); WiFi.config(IPAddress(192,168,1,2),IPAddress(192,168,1,1),IPAddress(255,255,255,0)); debug.print(&amp;#34;Local IP :&amp;#34;);debug.println(address(WiFi.localIP())); debug.print(&amp;#34;Gateway IP:&amp;#34;);debug.println(address(WiFi.gatewayIP())); debug.print(&amp;#34;SubnetMask:&amp;#34;);debug.println(address(WiFi.subnetMask())); debug.print(&amp;#34;macAddress:&amp;#34;);debug.println(WiFi.macAddress()); } void loop(){ } String address(IPAddress ip){ String ipStr = String(ip[0]) + &amp;#39;.&amp;#39; + String(ip[1]) + &amp;#39;.&amp;#39; + String(ip[2]) + &amp;#39;.&amp;#39; + String(ip[3]); return ipStr; } </description>
    </item>
    
  </channel>
</rss>
