<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arduino on わみめも</title>
    <link>https://wamisnet.github.io/categories/arduino/</link>
    <description>Recent content in Arduino on わみめも</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 21 Dec 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://wamisnet.github.io/categories/arduino/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CocoaBitというオリジナルBitを作った話</title>
      <link>https://wamisnet.github.io/blog/2016-12-21-cocoabit_create/</link>
      <pubDate>Wed, 21 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-12-21-cocoabit_create/</guid>
      <description>CocoaBitというlittleBits拡張モジュールを作ってみて気がついたことを書き連ねておきます。
CocoaBitとは まずはカンタンにCocoaBitについて説明していこうと思います。
CocoaBitとは、cloudBitと呼ばれるインターネットと通信ができるモジュールが日本では技適のため使えないため、開発された拡張モジュール(拡張Bit)です。
私が作成しているNefryをベースとしており、NefryのメリットであるWiFiやモジュールの設定を簡単に出来る点を引き継ぎ、littleBits向けにさらにカスタマイズしています。
(CocoaBitはまだ販売されてませんが、反響があれば…
CocoaBitのサイトはこちら
カンタンにCloudBitがどのようなものか分かったところで作ってみて気が付いたメリットデメリットについて話してみようと思います。
メリット 手軽に試せる なんといってもこれが一番のlittleBitsと繋げられるメリットだと思います！
普通の電子工作であると半田付けが必要だったり、ブレッドボードにピンを何本も刺さないといけなかったりするのが、littleBitsなら繋ぐだけでいけます！磁石で繋がるので間違えることもない！
子どもでもあそべる 向きを間違えないため、こどもに任せてしまっても問題なく作ることができます！
子どもももちろんですが大人でもロジックBitなどもあるので充分に遊ぶことが出来ます！
デメリット とりあえずお高い　 littleBits自体セットで販売などもされているため若干安くなったりしますが、それでもお高い…
これは特に多数のBitがあるとより楽しめるのですが、揃えるまでが…
ときどき接触がわるいときがある 磁石で接続しているため仕方無いのですがカンタンにとれてしまいます。それはlittleBitsの手軽に繋げられるとこと関わるので難しいところです…
(Bitを留められるボードもあるのでそれで解決するところですが…
bitの形に制限がある これもlittleBitsの世界なので仕方無いところですが、公式からこのようなサイズで作るといいよ、という情報が出ています。
(これも無視して作ることも出来ますが、littleBits同士キレイに揃うといいので出来るだけ合わせましょう。
オリジナルのBitをつくるまで！ 私の備忘録を兼ねて今回のCocoaBitを作成した流れを説明していこうと思います。
まずは、どんなものを作るのか検討しよう。 どんなものを作るのか検討すれば、必要な部品数が判明すると思われます。その部品から必要となるであろうサイズを割り出します。
そのサイズからその部品が収まるBitのサイズを選びます。
こちらのサイト内にあるHDK manualのリンクをクリックします。
 よりプロフェッショナルなTIPSについてはHDK manual やTips &amp;amp; Tricks もチェックして下さい。
 ファイルがダウンロードされるのを待って、Design\Design Manual\PDFsの中にあるUser Interface Considerations for littleBits Module Design.pdfを開き部品が収まるサイズを探します。
無事に見つかったら図の下にある英語の文字を覚えておきましょう。
さくっと回路を起こしていこう eagleのテンプレートファイルがGitHubで公開されているのでそれをベースに作成するのがお勧めです。
私はKicadの方が好きなので、採寸をまねて作成しました。 こんな感じにできれば、問題ありません。
回路ができれば、SeeedStudioさんやElecrowさんを作成してもらいましょう！
##　部品をそろえよう
まずは、littleBitsの公式サイトからBITSNAPSというlittleBitsの両端を購入しましょう。
もしくは、littleBitsのHardware Development Kitを日本の代理店であるKORGさんから購入することもできます。
あとはほかに必要な部品を購入していてください。
組み立てよう！ BITSNAPSともろもろの部品をつければ、無事にオリジナルの拡張Bitが出来上がりました！
このあたりもSeeedStudioさんやElecrowさんの部品実装サービスを使うと大変便利です。 CocoaBitも作成していただいています。
#まとめ
そもそも、littleBitsの拡張することができるなんて思いませんでした。 BitSnaps自体がちょっと高価ではありますが、自分好みのものをつくれるメリットは大きいと思います。
回路を作成するなど難易度は高めですが、完成度も高いので是非お勧めします！ よいlittleBitsライフを！</description>
    </item>
    
    <item>
      <title>Arduino勉強会資料</title>
      <link>https://wamisnet.github.io/blog/2016-11-01-arduino/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-11-01-arduino/</guid>
      <description>ArduinoIDEをダウンロードする https://www.arduino.cc/
こちらからダウンロードしましょう
早速Lチカしてみよう ハードウエア入門しよう
// the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output.  pinMode(13, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(1000); // wait for a second  digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(1000); // wait for a second } LEDを繋いでみよう 向きを間違えないように！</description>
    </item>
    
    <item>
      <title>ESP8266でWPSを実装してみる</title>
      <link>https://wamisnet.github.io/blog/2016-04-22-esp8266_wps/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2016-04-22-esp8266_wps/</guid>
      <description>http://bbs.espressif.com/viewtopic.php?t=1096
ソース元はこちら
ESP-WROOM-02にはWPSでWiFiの設定をすることができる環境がつくられているようなのでその解説と結果を報告します。
環境 Arduino IDE 1.6.7 Arduino core for ESP8266 WiFi chip (https://github.com/esp8266/Arduino) v2.2.0
Arduino coreのバージョンが古いと実装されてない可能性があります。
コード #include &amp;lt;ESP8266WiFi.h&amp;gt; void Wifi_wait(); void setup() { Serial.begin(115200); WiFi.mode(WIFI_STA); //WiFi.begin(&amp;#34;&amp;#34;,&amp;#34;&amp;#34;)このようにすることでWPSで保存したデータがある場合そちらに接続するようになる  WiFi.begin(&amp;#34;&amp;#34;, &amp;#34;&amp;#34;); Wifi_wait(); // Wifiに接続していないときにはWPSを開始します  if (WiFi.status() != WL_CONNECTED) { Serial.println(&amp;#34;\nAttempting connection ...&amp;#34;); WiFi.beginWPSConfig(); Wifi_wait(); if (WiFi.status() == WL_CONNECTED) { Serial.println(&amp;#34;Connected!&amp;#34;); Serial.println(WiFi.localIP()); Serial.println(WiFi.SSID()); Serial.println(WiFi.macAddress()); } else { Serial.println(&amp;#34;Connection failed!&amp;#34;); } } else { Serial.println(&amp;#34;\nConnection already established.&amp;#34;); } } void loop() { } void Wifi_wait() { int wait=0; Serial.</description>
    </item>
    
  </channel>
</rss>
