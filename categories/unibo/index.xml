<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unibo on わみめも</title>
    <link>https://wamisnet.github.io/categories/unibo/</link>
    <description>Recent content in Unibo on わみめも</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 11 May 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://wamisnet.github.io/categories/unibo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UniboとIFTTTで簡単にIoTしてみる</title>
      <link>https://wamisnet.github.io/blog/2017-05-11-unibo_ifttt/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-05-11-unibo_ifttt/</guid>
      <description>IFTTTは（イフト）TwitterやFacebook、SlackなどのWebサービス同士を組み合わせて簡単に連携できるサービスです。
今回はそのIFTTTとUniboをつなげてUniboからSlackやTwitterなどにメッセージを送信する仕組みについて説明します。
#全体図
[{&amp;#34;id&amp;#34;:&amp;#34;1a22c6251f.020e3a&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;tab&amp;#34;,&amp;#34;label&amp;#34;:&amp;#34;IFTTT&amp;#34;},{&amp;#34;id&amp;#34;:&amp;#34;1ad734c9dd.af1808&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;http request&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a22c6251f.020e3a&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;IFTTTにアクセス&amp;#34;,&amp;#34;method&amp;#34;:&amp;#34;GET&amp;#34;,&amp;#34;ret&amp;#34;:&amp;#34;txt&amp;#34;,&amp;#34;url&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;tls&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;x&amp;#34;:586,&amp;#34;y&amp;#34;:440,&amp;#34;wires&amp;#34;:[[&amp;#34;1a70e6eb3f.c26754&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1ad02e9d78.efebc&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;speech&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a22c6251f.020e3a&amp;#34;,&amp;#34;word&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;subtitle&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;edit&amp;#34;:false,&amp;#34;language&amp;#34;:&amp;#34;jp&amp;#34;,&amp;#34;voice&amp;#34;:&amp;#34;yuuto&amp;#34;,&amp;#34;version&amp;#34;:1,&amp;#34;x&amp;#34;:987,&amp;#34;y&amp;#34;:440,&amp;#34;wires&amp;#34;:[[]]},{&amp;#34;id&amp;#34;:&amp;#34;1a70e6eb3f.c26754&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;function&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a22c6251f.020e3a&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;発話のためにコピー&amp;#34;,&amp;#34;edit&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;func&amp;#34;:&amp;#34;msg.word = msg.subtitle = msg.payload;\nreturn msg;&amp;#34;,&amp;#34;outputs&amp;#34;:1,&amp;#34;dummy&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;noerr&amp;#34;:0,&amp;#34;x&amp;#34;:805,&amp;#34;y&amp;#34;:440,&amp;#34;wires&amp;#34;:[[&amp;#34;1ad02e9d78.efebc&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a8a30f02a.12783&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;inject&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a22c6251f.020e3a&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;topic&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payload&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payloadType&amp;#34;:&amp;#34;date&amp;#34;,&amp;#34;repeat&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;crontab&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;once&amp;#34;:false,&amp;#34;x&amp;#34;:390,&amp;#34;y&amp;#34;:440,&amp;#34;wires&amp;#34;:[[&amp;#34;1ad734c9dd.af1808&amp;#34;]]}] #手順
IFTTTの登録についてはこちらの記事をご覧ください。
 Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた
 登録ができたところで、実際に連携させてみようと思います。
IFTTTでシナリオを作成してみる IFTTTでUniboとLineをつなげるレシピと呼ばれるシナリオを作成していきます。 上のリンクをクリックして作成していきましょう。
まずはMakerWebhooksをトリガーにするため”make”と検索欄に入力します。 MakerWebhooksがあればそれをクリックします。
MakerWebhooksはEvent単位でトリガーがかかります。今回はEventNameに&amp;quot;Unibo&amp;quot;と入力し”Create trigger”をクリックし作成していきます。 今入力したEventNameはあとでUniboに入力するのでSecretKeyと合わせて覚えておきましょう。
次にトリガーが起こった時にしたい動作を選択します。 IFTTTの検索欄でLineを検索し、連携させていきます。 ちなみに、このときにTwitterやGmailなどを選択するとそれと連携させることが出来ます。
Recipientと書かれた欄にメッセージを送るLineのグループを選択します。 Messageと書かれた欄に送信するメッセージを入力を入力します。Value1、Value2などがありプログラムから値を渡すことができます。これを使えば温度センサや明るさセンサーの値をプログラムから渡しメッセージに組み込むことが可能です。 オプションですが写真のURLさえあれば、Lineに写真を投稿することができます。
Create actionをクリックしてメッセージを保存します。
最後にFinishを押し、作成を完了します。
こちらのリンクをクリックしDocumentationのリンクをクリックします。
クリックするとこのような画面に移動します。
このときに表示される赤枠のURLをUniboにコピーします。
Uniboの準備をする Uniboのスキルクリエイターに移動し、全体図の章で見せたJSONの文字列をスキルクリエイターにインポートしてください。
インポートが終わったら先ほどIFTTTで取得したURLを張り付けていきます。 http request Nodeをクリックし、赤枠の入力欄に先ほどのURLを貼り付けていきます。この時にURL中央部にある{event}は先ほどIFTTTに登録したイベント名に変えておきましょう。 記事の通りに作成している場合はUniboになります。
入力できたら完了を押し作成を完了します。
これでDeployを押し、タイムスタンプのボタンを押せばLineにメッセージが飛ぶような仕組みが完成しました！ 余談ですが、functionNodeでhttp request Nodeの応答をUniboでしゃべらすためにメッセージ内容をコピーする処理をいれることでレスポンスをしゃべらすことができるようになります。</description>
    </item>
    
    <item>
      <title>UniboでAzure IoTHubと連携させてみる</title>
      <link>https://wamisnet.github.io/blog/2017-05-10-unibo_iothub/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wamisnet.github.io/blog/2017-05-10-unibo_iothub/</guid>
      <description>AzureIoTHubでメッセージを送受信してみる。 Azure IoTHubとUniboのメッセージをやりとりしてみましょう。
##全体図
[{&amp;#34;id&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;tab&amp;#34;,&amp;#34;label&amp;#34;:&amp;#34;iothub&amp;#34;},{&amp;#34;id&amp;#34;:&amp;#34;1adc54aae1.2cb078&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;inject&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;開始&amp;#34;,&amp;#34;topic&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payload&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;payloadType&amp;#34;:&amp;#34;date&amp;#34;,&amp;#34;repeat&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;crontab&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;once&amp;#34;:false,&amp;#34;x&amp;#34;:320,&amp;#34;y&amp;#34;:324.888916015625,&amp;#34;wires&amp;#34;:[[&amp;#34;1a50458b29.daf934&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a5b568748.b15d28&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;azureiothub&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;Azure IoT Hub&amp;#34;,&amp;#34;protocol&amp;#34;:&amp;#34;mqtt&amp;#34;,&amp;#34;x&amp;#34;:958.1041870117188,&amp;#34;y&amp;#34;:325,&amp;#34;wires&amp;#34;:[[&amp;#34;1a452ce6f4.4d1838&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a6872e007.3f029&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;template&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;Azure IoTHubに接続情報&amp;#34;,&amp;#34;field&amp;#34;:&amp;#34;payload&amp;#34;,&amp;#34;fieldType&amp;#34;:&amp;#34;msg&amp;#34;,&amp;#34;format&amp;#34;:&amp;#34;json&amp;#34;,&amp;#34;syntax&amp;#34;:&amp;#34;mustache&amp;#34;,&amp;#34;template&amp;#34;:&amp;#34;{\n \&amp;#34;deviceId\&amp;#34;: \&amp;#34;unibo\&amp;#34;,\n \&amp;#34;key\&amp;#34;: \&amp;#34;SharedAccessKey=以下のものを貼る\&amp;#34;,\n \&amp;#34;protocol\&amp;#34;: \&amp;#34;mqtt\&amp;#34;,\n \&amp;#34;data\&amp;#34;: \&amp;#34;{value1: 0, value2: \\\&amp;#34;test\\\&amp;#34;}\&amp;#34;\n}&amp;#34;,&amp;#34;x&amp;#34;:718.1041870117188,&amp;#34;y&amp;#34;:325,&amp;#34;wires&amp;#34;:[[&amp;#34;1a5b568748.b15d28&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1ad307ac75.70343&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;motion&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;target&amp;#34;:&amp;#34;other&amp;#34;,&amp;#34;motion&amp;#34;:&amp;#34;happy&amp;#34;,&amp;#34;x&amp;#34;:1042.1041870117188,&amp;#34;y&amp;#34;:561,&amp;#34;wires&amp;#34;:[[]]},{&amp;#34;id&amp;#34;:&amp;#34;1a9501606e.fe849&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;debug&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;active&amp;#34;:true,&amp;#34;console&amp;#34;:&amp;#34;false&amp;#34;,&amp;#34;complete&amp;#34;:&amp;#34;payload&amp;#34;,&amp;#34;x&amp;#34;:747.1041870117188,&amp;#34;y&amp;#34;:432,&amp;#34;wires&amp;#34;:[]},{&amp;#34;id&amp;#34;:&amp;#34;1a50458b29.daf934&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;led&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;color&amp;#34;:&amp;#34;black&amp;#34;,&amp;#34;version&amp;#34;:1,&amp;#34;x&amp;#34;:499.10418701171875,&amp;#34;y&amp;#34;:325,&amp;#34;wires&amp;#34;:[[&amp;#34;1a6872e007.3f029&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a452ce6f4.4d1838&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;function&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;データ整形&amp;#34;,&amp;#34;edit&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;func&amp;#34;:&amp;#34;msg.payload = msg.payload.toString();\nreturn msg;&amp;#34;,&amp;#34;outputs&amp;#34;:1,&amp;#34;dummy&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;noerr&amp;#34;:0,&amp;#34;x&amp;#34;:336.10418701171875,&amp;#34;y&amp;#34;:485,&amp;#34;wires&amp;#34;:[[&amp;#34;1a513c662f.d3f0a8&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a513c662f.d3f0a8&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;switch&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;送受信分岐&amp;#34;,&amp;#34;property&amp;#34;:&amp;#34;payload&amp;#34;,&amp;#34;propertyType&amp;#34;:&amp;#34;msg&amp;#34;,&amp;#34;rules&amp;#34;:[{&amp;#34;t&amp;#34;:&amp;#34;eq&amp;#34;,&amp;#34;v&amp;#34;:&amp;#34;Message sent.&amp;#34;,&amp;#34;vt&amp;#34;:&amp;#34;str&amp;#34;},{&amp;#34;t&amp;#34;:&amp;#34;neq&amp;#34;,&amp;#34;v&amp;#34;:&amp;#34;Message sent.&amp;#34;,&amp;#34;vt&amp;#34;:&amp;#34;str&amp;#34;}],&amp;#34;checkall&amp;#34;:&amp;#34;true&amp;#34;,&amp;#34;outputs&amp;#34;:2,&amp;#34;x&amp;#34;:521.1041870117188,&amp;#34;y&amp;#34;:485,&amp;#34;wires&amp;#34;:[[&amp;#34;1a9501606e.fe849&amp;#34;],[&amp;#34;1a14de07ea.ded998&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a14de07ea.ded998&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;delay&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;pauseType&amp;#34;:&amp;#34;rate&amp;#34;,&amp;#34;timeout&amp;#34;:&amp;#34;5&amp;#34;,&amp;#34;timeoutUnits&amp;#34;:&amp;#34;seconds&amp;#34;,&amp;#34;rate&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;nbRateUnits&amp;#34;:&amp;#34;30&amp;#34;,&amp;#34;rateUnits&amp;#34;:&amp;#34;second&amp;#34;,&amp;#34;randomFirst&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;randomLast&amp;#34;:&amp;#34;5&amp;#34;,&amp;#34;randomUnits&amp;#34;:&amp;#34;seconds&amp;#34;,&amp;#34;drop&amp;#34;:false,&amp;#34;x&amp;#34;:764.1041870117188,&amp;#34;y&amp;#34;:526,&amp;#34;wires&amp;#34;:[[&amp;#34;1ad307ac75.70343&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a7c821ed2.91754&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;delay&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;pauseType&amp;#34;:&amp;#34;timed&amp;#34;,&amp;#34;timeout&amp;#34;:&amp;#34;5&amp;#34;,&amp;#34;timeoutUnits&amp;#34;:&amp;#34;seconds&amp;#34;,&amp;#34;rate&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;nbRateUnits&amp;#34;:&amp;#34;30&amp;#34;,&amp;#34;rateUnits&amp;#34;:&amp;#34;second&amp;#34;,&amp;#34;randomFirst&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;randomLast&amp;#34;:&amp;#34;5&amp;#34;,&amp;#34;randomUnits&amp;#34;:&amp;#34;seconds&amp;#34;,&amp;#34;drop&amp;#34;:false,&amp;#34;x&amp;#34;:771.1041870117188,&amp;#34;y&amp;#34;:621,&amp;#34;wires&amp;#34;:[[&amp;#34;1ad307ac75.70343&amp;#34;]]},{&amp;#34;id&amp;#34;:&amp;#34;1a289d2a8d.919826&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;comment&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;AzureIoTHubで必要となる情報を入力します。&amp;#34;,&amp;#34;info&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;x&amp;#34;:736.1041870117188,&amp;#34;y&amp;#34;:275,&amp;#34;wires&amp;#34;:[]},{&amp;#34;id&amp;#34;:&amp;#34;1af14fac81.3eab5&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;comment&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;３０秒毎に順番に処理をします&amp;#34;,&amp;#34;info&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;x&amp;#34;:774.1041870117188,&amp;#34;y&amp;#34;:485,&amp;#34;wires&amp;#34;:[]},{&amp;#34;id&amp;#34;:&amp;#34;1a63ab930e.7d0b8c&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;comment&amp;#34;,&amp;#34;z&amp;#34;:&amp;#34;1a885986dc.5c17f8&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;３０秒の間に届いた最新のメッセージの処理をします&amp;#34;,&amp;#34;info&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;x&amp;#34;:767.1041870117188,&amp;#34;y&amp;#34;:672,&amp;#34;wires&amp;#34;:[]}] 前提条件  Azureに登録できていること  手順 AzureのIoTHubに登録するところから説明していきます。
##Azure IoTHubの設定 それでは、AzureにログインしてIoTHubを実際に作っていきましょう！
Azure ポータルを開いていきます。
新規からモノのインターネット(IoT)をクリックして、IoTHubをクリックします。これから必要な設定を行っていきます。 無事にIoTHubが開かれると複数の入力欄が出るので写真を参考に入力欄を埋めていきましょう。 それでは、必須項目であるIoTHubの名前を入力してください。この名前はドメインでも使われますので他の方と重複するとエラーが出ます。入力欄の右端が緑のチェックが入れば大丈夫です。 次に、価格とスケールティアを変更していきます。この際にFreeを必ず選んでください。Standardを選んだまま作成してしまうと、後からFreeに変更することができず、再度作り直すことになります。
Freeを選択したらクリックして反映させてください。
リソースグループは既存ものがあれば、それを使って頂いてもかまいませんが、今回は初めてだという前提で、新規作成で好きなグループ名を入力してください。
Azureサーバーがある場所を指定することができます。東日本、西日本と選べますのでお好みでどうぞ。
ここまで問題なくできていれば、作成ボタンをクリックしてIoTHubをデプロイしていきます。 数分かかりますのでしばしお待ちを… 無事にIoTHubのデプロイが終わるとこのような画面が表示されます。 この画面では先ほど設定した内容が見れるほか、IoTHubの使用状態を確認することができます。
デバイスを繋げるために必要な設定を行っていきます。 共有アクセスポリシーからiothubownerをクリックし、プライマリキーをコピーします。 このとき写真で示してある部分をクリックすると簡単にキーをコピーすることができます。
このプライマリキーは次の作業で使用します。 この作業からDevice Explorerというツールを使っていきます。 このツールはWindows専用になります。MacやLinuxの場合iothub-explorerを使うようですが、今回は取り扱いません。
###Device Explorerのダウンロード こちらの**リンク**からダウンロードしてインストールをよろしくお願いします。
インストールが終わったところでDevice Explorerを使っていこうと思います。
このツールでIoTHubに接続できる端末の登録、削除、ほかにはデバイスからIoTHubへの通信モニターになったり、IoTHubからデバイスにデータを送ることができるなどIoTHubに必須のものとなっております。
説明が長くなりましたが、それではこのDevice Explorerに先ほどのプライマリキーを入力してUpdateをクリックしてください。 プライマリキーが合っていれば、このような表示がされます。この表示がでれば先ほど作ったIoTHubと連携ができるようになります。 これからIoTHubに接続できるデバイスの設定をしていこうと思います。
この作業はデバイスごとにIDを割り振る作業になります。 ManagementからCreateをクリックします。 Createをクリックするとこのような画面が出ますので、Device IDに接続するデバイス名を入力してください。
入力が終わったらCreateをクリックしてください。 無事にデバイスが作れると先ほどのDevice IDを持ったものが増えているはずです。 無事に作成できていれば、次はデバイスに必要な情報をコピーしておきましょう。 今回作成したDevice IDをクリックすると青色の欄が移動しますので、選択された状態で右クリックするとCopy connection string for selected deviceを選んでクリックしてください。</description>
    </item>
    
  </channel>
</rss>
