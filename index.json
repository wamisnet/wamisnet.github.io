[{
    "title": "このサイトの構成について",
    "date": "2020-07-04",
    "description": "このサイトがどのような技術を使って動作しているか説明します",
    "body": "warning Warning 各自の環境で同様に動作する保証はありません。      使用技術 このサイトでは下記の技術を使用して構成されています。\n  Hugo\n テンプレート: hugo-future-imperfect-slim    CircleCi\n Docker    Netlify CMS\n firebase cloud Functions    GitHub\n GitHub pages    こんな感じでしょうか。\nHugo 静的サイトジェネレータとしてマークダウンからHTMLを生成しています。 テンプレートを使用して、デザインを整えています。\nCircleCI マークダウンを更新してGithubにコミットをすると、CIが発火してHTMLを自動的に生成してくれます。 後述する、CMSでマークダウンを書いたら自動的にビルドして、デプロイしてくれます。\n記事を書くだけでOKなのはらくちん\nNetlify CMS 別の記事で軽く書きましたが、WordPressのようなコンテンツ管理システムになります。\nこの記事もCMS上で書いてます。\n認証にFirebaseを使っています。\nauto save的なものがあるといいなぁ\nGitHub マークダウンやホームページの配布までまるっとやってもらっています。\nGitHubが使えるということは差分やプルリクで管理するといったこともできます。\nいつもと同じ感じに記事がかけるって便利ですね\nこんな感じの構成になっています。\n次の項目でどういう手順でいろんなものが連動して動いているのか確認しておこうと思います。\n動作手順(私から見た動作)  Netlify CMSにログインして、記事を書く 記事を書き終えたら、Netlify CMSの公開ボタンを押す ホームページで記事が公開される  めちゃくちゃ普通のサービスと一緒ですね\n動作手順(サービス側の動作)  Netlify CMSにログインして、記事を書く 保存を押すと、記事用のブランチが生成されてGitHubにコミットされる 記事を書き終えたら、Netlify CMSの公開ボタンを押す GitHubにプルリクエストが生成され、自動的に承認される CircleCIが特定のブランチが更新されたのを確認し、Hugoのビルドを開始する ビルドされたものをGitHubにコミットする GitHub Pagesでコミットされた内容でホームページが更新される  裏側ではいろいろ動いてくれますが、なにも気にしなくてOKです！\nこれが無料でつくれちゃうんですから、すごいもんですよね\n私も役に立てるように世の中に価値を出していきたいです。\nこんな感じでこのサイトは動いています。興味があれば、GitHubを見たりするとよいでしょう！\n",
    "ref": "/blog/2020-07-05-site_info/"
  },{
    "title": "Firebase使ってログインできるようになったよ！",
    "date": "2020-07-03",
    "description": "Firebaseで Loginできるようになった",
    "body": "Firebaseでログインできるようになりました！\n",
    "ref": "/blog/firebase_login/"
  },{
    "title": "NetlifyCMSから投稿テスト",
    "date": "2020-07-03",
    "description": "NetlifyCMSから投稿できるかためしてみます",
    "body": "こんな感じのエディタから入力して、記事を投稿できるんだよ！ めっちゃええやん？\nこんな感じで画像をいれたり\nfunction hello(){ console.log(\u0026#34;hello world!\u0026#34;); } みたいにコードいれたりいろいろできるっぽい\n",
    "ref": "/blog/2020-07-03-netlifycms/"
  },{
    "title": "Suicaで開けられるスマートロックを作ってみた",
    "date": "2020-01-03",
    "description": "Suicaで開けられるスマートロックを作ってみた",
    "body": "こんにちは！わみです。\n私が住むギークハウス新宿がついにアップデートされました。\n少し前にはスマートロックを壊したこともありましたが… (その時の記事 :スマートロックが壊れたのでobnizを使ってハックしてみた)\nSesameをもう一台新たに購入して、ついに完成をしました！\nなにをしたのか 音が鳴るよ！\n@fukubaka0825 さんと @retoruto_carry さんと作った鍵システムがついに動いたああああ！ pic.twitter.com/uQZ44INF93\n\u0026mdash; わみ@NefryとかFlutter本とか (@wamisnet) January 1, 2020  登録されていないSuicaの場合はエラー音を、登録されたSuicaの場合は効果音の後、obnizからBLE経由でSesameをコントロールします。\n早いときだとタッチして、すぐに鍵が開くのでめちゃくちゃ便利です。\nきっかけ スマートロックが壊れたのでobnizを使ってハックしてみた\n上記の記事でも書いているのですが、7月の開発合宿で作りかけのまま止まっていたスマートロックの制御をしたいと思っていて、ただSesame API経由だと鍵が開くまで時間がかかりすぎる。\nその解決で前回、私はハードウエアのハックをしたわけですが、安定動作を担保するのはなかなかめんどくさいので結局本番反映はしませんでした。\n今回は安定稼働はSesameを信用し、BLEで制御をするように変更してこっちのスマートロック制御が壊れても問題ないようにしました。\n技術構成 今回はギークハウス新宿に住む3人の力を合わせて作りました。 メインの担当箇所はこんな感じです。\n@fukubaka0825 : Suica認証、Sesame開錠指示　（記事 : Raspberry pi とGoとMackerelでシェアハウスの運用しやすい鍵システムを作る  ） @retoruto_carry : Suica登録用Webページ（記事 : 【おうちハック】開発合宿で3人でシェアハウスの鍵管理システムを作った【チーム開発】） @wamisnet : Sesame開錠デバイス作成、ハードウエア（記事 : 本記事）\n全体構成はすこし大きめですが、次の画像の通りです。\nせっかくなので私の担当箇所について深堀していきます。\nSesameハック https://qiita.com/odetarou/items/9628d66d4d94290b5f2d\n上記の方の手順を参考に設定値を取得します。\nAndroidのRoot化だったり、しれっとやってますが普通に一日がかりかかるようなやつでいろいろ私も初めてでしたが、頑張ってSesameのBLEキーを取得します。 Xposedモジュールつくるのも個人的にはハマったり…\n取得できれば、ほぼほぼ完成です。\n上記の記事だと、Macで接続していますがMacを持っていないもしくはバージョンが違うとうまく動かなかったです。（これだから…\nめんどくさいなぁ…そんなことを思っていたら、そういえばobnizもnobleライブラリ出していたなと…\nhttps://qiita.com/wicket/items/16622097b8e6b5758d80\nこれに書かれているように、nobleを呼び出しているところを変更しました。 一応、全体のコードをGithubに上げておきましたのでぜひ。\nhttps://github.com/wamisnet/obniz_sesame_noble\nobniz 今回みたいなnobleで動かしたいときに、パソコンを置いておくみたいなことはなかなか難しい…\nそんなときにはobniz!!\n6000円ぐらいでNode.jsで動かせるデバイスをゲットできます。\nプログラム const crypto = require(\u0026#39;crypto\u0026#39;); const Peripheral = require(\u0026#34;obniz-noble/lib/peripheral\u0026#34;); const noble = require(\u0026#34;obniz-noble\u0026#34;)(\u0026#34;OBNIZ_ID_\u0026#34;); const events = require(\u0026#39;events\u0026#39;); const os = require(\u0026#39;os\u0026#39;); const log4js = require(\u0026#39;log4js\u0026#39;); const logger = log4js.getLogger(); logger.level = \u0026#39;debug\u0026#39;; // config block start const userId = \u0026#39;Sesameログインメールアドレス\u0026#39;; const password = \u0026#39;Sesameアプリから取得したHmacSHA256\u0026#39;; // 下記はoption。指定したほうがscanがskipできるため早くなる。 // Scanで取得する const deviceId = \u0026#39;スキャンで見つけたID\u0026#39;;//ff00ff00ff00 const address = \u0026#39;Macアドレス\u0026#39;;//ff:00:ff:00:ff:00 const manufacturerDataMacData = []; // [0x00,0x00...]のように配列で指定する // config block end  const CODE_LOCK = 1; const CODE_UNLOCK = 2; const serviceOperationUuid = \u0026#39;000015231212efde1523785feabcd123\u0026#39;; const characteristicCommandUuid = \u0026#39;000015241212efde1523785feabcd123\u0026#39;; const characteristicStatusUuid = \u0026#39;000015261212efde1523785feabcd123\u0026#39;; const characteristicAngleStatusUuid = \u0026#39;000015251212efde1523785feabcd123\u0026#39;; // 接続後ロック系コマンドを打たないと10秒で切断される。 // ロック系コマンド実行から1分で切断される。 logger.info(\u0026#39;==\u0026gt; waiting on adapter state change\u0026#39;); let status; let cmd; let angleStatus; let peripheral; let lockStatus = null; const event = new events.EventEmitter; noble.on(\u0026#39;stateChange\u0026#39;, (state) =\u0026gt; { logger.info(\u0026#39;==\u0026gt; adapter state change\u0026#39;, state); if (state === \u0026#39;poweredOn\u0026#39;) { if (address === \u0026#39;\u0026#39;) { // scanする場合  logger.info(\u0026#39;==\u0026gt; start scanning\u0026#39;, [serviceOperationUuid]); //noble.startScanning([], true); // 都度advertisementパケット届き次第結果がでるが、余計なのがでたりうまく動かなかった。但し各BLE機器の送出間隔がわかるので一度見るのもよいかも。  noble.startScanning(); } else { // 直接接続する場合  connectSesame(); } } else { noble.stopScanning(); } }); noble.on(\u0026#39;discover\u0026#39;, (peripheral) =\u0026gt; { if (peripheral.id !== deviceId) { //logger.info(`BLE Device Found: ${peripheral.advertisement.localName}(${peripheral.uuid}) RSSI${peripheral.rssi}`);  logger.info(\u0026#39;peripheral discovered; id mismatch. peripheral.id:\u0026#39;, peripheral.id, \u0026#34;localName:\u0026#34;, peripheral.advertisement.localName, \u0026#34;address:\u0026#34;, peripheral.address, \u0026#34;addressType:\u0026#34;, peripheral.addressType); //logger.info(peripheral);  } else { logger.info(\u0026#39;ok. peripheral discovered; id match. peripheral.id:\u0026#39;, peripheral.id, \u0026#34;localName:\u0026#34;, peripheral.advertisement.localName, \u0026#34;address:\u0026#34;, peripheral.address, \u0026#34;addressType:\u0026#34;, peripheral.addressType, \u0026#34;manufacturerData:\u0026#34;, peripheral.advertisement.manufacturerData); //logger.info(peripheral);  noble.stopScanning(); connect(peripheral); } }); function connectSesame() { advertisement = { manufacturerData: Buffer.from(manufacturerDataMacData), serviceUuids: [\u0026#39;1523\u0026#39;] } //peripheral = new Peripheral(noble, deviceId, address, addressType, connectable, advertisement, rssi);  peripheral = new Peripheral(noble, deviceId, address, \u0026#39;random\u0026#39;, true, advertisement, -84); noble._peripherals[deviceId] = peripheral; noble._services[deviceId] = {}; noble._characteristics[deviceId] = {}; noble._descriptors[deviceId] = {}; if (os.platform() !== \u0026#39;darwin\u0026#39;) { // linuxの場合は下記も必要とのことでした。thx! warpzoneさん  noble._bindings._addresses[deviceId] = address; noble._bindings._addresseTypes[deviceId] = \u0026#39;random\u0026#39;; } connect(peripheral); } function disconnect() { peripheral = new Peripheral(noble, deviceId, address, \u0026#39;random\u0026#39;, true, advertisement, -84); noble._peripherals[deviceId] = peripheral; noble._services[deviceId] = {}; noble._characteristics[deviceId] = {}; noble._descriptors[deviceId] = {}; peripheral.disconnect((error)=\u0026gt;{ if (error) { logger.info(\u0026#39;==\u0026gt; Failed to disconnect:\u0026#39;, error); } else { logger.info(\u0026#39;==\u0026gt; disconnected\u0026#39;); } }); } function connect(peripheral) { //logger.info(\u0026#39;==\u0026gt; connecting to\u0026#39;, peripheral.id);  logger.info(\u0026#39;==\u0026gt; connecting start\u0026#39;); peripheral.connect((error) =\u0026gt; { if (error) { logger.info(\u0026#39;==\u0026gt; Failed to connect:\u0026#39;, error); } else { logger.info(\u0026#39;==\u0026gt; connected\u0026#39;); discoverService(peripheral); } }); peripheral.once(\u0026#39;disconnect\u0026#39;, function() { logger.info(\u0026#39;==\u0026gt; disconnect\u0026#39;); }); } function discoverService(peripheral) { logger.info(\u0026#39;==\u0026gt; discovering services\u0026#39;); peripheral.once(\u0026#39;servicesDiscover\u0026#39;, (services) =\u0026gt; { //services.map((s) =\u0026gt; logger.info(\u0026#34;uuid:\u0026#34;+s.uuid));  const opServices = services.filter((s) =\u0026gt; s.uuid === serviceOperationUuid); if (opServices.length !== 1) { throw new Error(\u0026#39;unexpected number of operation services\u0026#39;); } discoverCharacteristic(peripheral, opServices[0]); }); peripheral.discoverServices(); } function discoverCharacteristic(peripheralLocal, opService) { logger.info(\u0026#39;==\u0026gt; discovering characteristics\u0026#39;); opService.once(\u0026#39;characteristicsDiscover\u0026#39;, (characteristics) =\u0026gt; { const charStatus = characteristics.filter((c) =\u0026gt; c.uuid === characteristicStatusUuid); const charCmd = characteristics.filter((c) =\u0026gt; c.uuid === characteristicCommandUuid); const charAngleStatus = characteristics.filter((c) =\u0026gt; c.uuid === characteristicAngleStatusUuid); if (charStatus.length !== 1 || charCmd.length !== 1 || charAngleStatus.length !== 1) { throw new Error(\u0026#39;unexpected number of command/status/angleStatus characteristics\u0026#39;); } characteristics.map((c) =\u0026gt; logger.info(\u0026#34;info uuid:\u0026#34;+c.uuid)); characteristics.map((c) =\u0026gt; { if (c.uuid === characteristicStatusUuid || c.uuid === characteristicCommandUuid || c.uuid === characteristicAngleStatusUuid) { return } c.on(\u0026#39;data\u0026#39;, (data) =\u0026gt; { logger.info(\u0026#34;unknown uuid:\u0026#34;+c.uuid); logger.info(data); }); c.subscribe(); }); status = charStatus[0]; cmd = charCmd[0]; angleStatus = charAngleStatus[0]; peripheral = peripheralLocal; angleStatus.on(\u0026#39;data\u0026#39;, (data) =\u0026gt; { const angleRaw = data.slice(2, 4).readUInt16LE(0); const angle = Math.floor((angleRaw/1024*360)); logger.info(\u0026#34;angle: \u0026#34;, data, \u0026#34;angle:\u0026#34;+angle); event.emit(\u0026#39;lock_status_set\u0026#39;); }); angleStatus.subscribe(); status.subscribe(); // lock(0)だとErrorUnknownCmdになるが、認証することで現在の角度がわかるため実行する  lock(0); // 0だとErrorUnknownCmd。3だとErrorLength。4だとErrorUnknownCmd。3は何かできそう。  // 起動時にtoggleしてlock, unlockする場合は下記をコメントアウト  // event.once(\u0026#39;lock_status_set\u0026#39;, () =\u0026gt; {  // lock(lockStatus ? CODE_UNLOCK : CODE_LOCK);  // });  }); opService.discoverCharacteristics(); } function lock(cmdValue) { logger.info(\u0026#39;==\u0026gt; reading serial number\u0026#39;); status.read((error, data) =\u0026gt; { if (error) { logger.info(error); process.exit(-1); } if (data) { const macData = peripheral.advertisement.manufacturerData; const sn = data.slice(6, 10).readUInt32LE(0) + 1; const payload = _sign(cmdValue, \u0026#39;\u0026#39;, password, macData.slice(3), userId, sn); let cmdName; if (cmdValue === CODE_LOCK) { cmdName = \u0026#34;cmdValue:lock\u0026#34;; } else if (cmdValue === CODE_UNLOCK) { cmdName = \u0026#34;cmdValue:unlock\u0026#34;; } else { cmdName = \u0026#34;cmdValue:\u0026#34;+cmdValue; } logger.info(\u0026#39;==\u0026gt; \u0026#39;, cmdName, sn); write(cmd, payload); } }); } function _sign(code, payload, password, macData, userId, nonce) { logger.info(\u0026#34;macData: \u0026#34;, macData); logger.info(\u0026#34;pass: \u0026#34;, Buffer.from(password, \u0026#39;hex\u0026#39;)); const hmac = crypto.createHmac(\u0026#39;sha256\u0026#39;, Buffer.from(password, \u0026#39;hex\u0026#39;)); const hash = crypto.createHash(\u0026#39;md5\u0026#39;); hash.update(userId); const buf = Buffer.alloc(payload.length + 59); macData.copy(buf, 32); // len = 6  const md5 = hash.digest(); md5.copy(buf, 38); // len = 16  logger.info(\u0026#39;md5: \u0026#39;, md5); buf.writeUInt32LE(nonce, 54); // len = 4  buf.writeUInt8(code, 58); // len = 1  Buffer.from(payload).copy(buf, 59); hmac.update(buf.slice(32)); hmac.digest().copy(buf, 0); logger.info(\u0026#39;buf: \u0026#39;, buf); logger.info(\u0026#39;buf: \u0026#39;, buf.toString(\u0026#34;hex\u0026#34;)); return buf; } function write(char, payload) { const writes = []; for(let i=0;i\u0026lt;payload.length;i+=19) { const sz = Math.min(payload.length - i, 19); const buf = Buffer.alloc(sz + 1); if (sz \u0026lt; 19) { buf.writeUInt8(4, 0); } else if (i === 0) { buf.writeUInt8(1, 0); } else { buf.writeUInt8(2, 0); } payload.copy(buf, 1, i, i + 19); logger.info(\u0026#39;\u0026lt;== writing:\u0026#39;, buf.toString(\u0026#39;hex\u0026#39;).toUpperCase()); char.write(buf, false); } } const rl = require(\u0026#39;readline\u0026#39;) const rli = rl.createInterface(process.stdin, process.stdout) rli.on(\u0026#39;line\u0026#39;, function(line) { logger.info(line); if (line === \u0026#39;l\u0026#39;) { lock(CODE_LOCK); } else if (line === \u0026#39;u\u0026#39;) { lock(CODE_UNLOCK); } else if (line === \u0026#39;t\u0026#39;) { lock(lockStatus ? CODE_UNLOCK : CODE_LOCK); } else if (line === \u0026#39;c\u0026#39;) { connectSesame(); }else if(line === \u0026#39;d\u0026#39;){ disconnect(); } rli.prompt(); }).on(\u0026#39;close\u0026#39;, function() { logger.info(\u0026#39;close\u0026#39;); process.stdin.destroy(); }); rli.prompt(); API化 ベースは上のコードでできているのでちょちょっとExpressでAPIを作るだけです。\n試してみる obniz経由でsesameコントロールできた！！ pic.twitter.com/WXF4omm4bj\n\u0026mdash; わみ@NefryとかFlutter本とか (@wamisnet) January 1, 2020  ケースにいれる 基本的にはタカチのケースに収めておけばいい感じにみえるはず\nhttps://www.takachi-el.co.jp/\nケースがあれば安心。\n今後の検討  指紋認証で開けられるようにしたい ゲストでも開けられるようにしたい（時間で認可を出す） カメラもあるので顔認証だったり？  まとめ ギークハウス新宿にSuicaで開けられるスマートロックが取り付けられました。\nシェアハウスのメンバーでこうやったモノづくりができるのは幸せだなぁと思います。\nギークハウス新宿では定期的にゆるめしという緩いイベントをやっているので実際に見てみたい方がいればぜひ遊びにきてください。 内見等もできるので、私にTwitter等でメッセージいただければ！\nhttps://geekhouse-shinjuku.connpass.com/\nシェアハウス住民の紹介記事を載せておきますので是非！ Node-REDでシェアハウスのお風呂を爆速でハッキングする方法 - Qiita Reactとタブレットでバーコード使ったシェアハウス物々交換システム作った話【個人開発】 - Qiita スマートロックが壊れたのでobnizを使ってハックしてみた\n",
    "ref": "/blog/2020-01-03-smartlock/"
  },{
    "title": "obniz で BLEを使ってEddystoneを出してみた",
    "date": "2019-12-14",
    "description": "obniz で BLEを使ってEddystoneを出してみた",
    "body": "こんにちは、最近obnizの中の人になったわみです。\nobniz Board 1Yが明日には発売ですね！いろいろと作ったのでぜひ触ってみてください。\n今回はそんなこと関係なくBLEで遊んでいこうとおもいます。\nEddystoneとは Googleが2015年頃に発表した、BLEを使ったビーコンやURLの配信をするための規格。\n詳しい説明は、次のようなサイトにお任せするとして、なにがいいのかというとURLを手軽に配布できるところが非常によいです。\nhttps://dev.classmethod.jp/smartphone/eddystone/\nobnizがJavaScriptで動かせるのでWebエンジニアでも触れるようなデバイスで、URLを手軽に配布できるのはWebエンジニア的に導線を一つ増やすことができるので非常に良いと思います。\nプログラム \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, initial-scale=1\u0026quot;\u0026gt; \u0026lt;script src=\u0026quot;https://obniz.io/js/jquery-3.2.1.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://unpkg.com/obniz@3.0.0/obniz.js\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdn.jsdelivr.net/npm/uikit@3.2.3/dist/css/uikit.min.css\u0026quot; /\u0026gt; \u0026lt;style\u0026gt; body { margin: 2em ; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026quot;obniz-debug\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;H1\u0026gt;Obniz Eddystone\u0026lt;/H1\u0026gt; \u0026lt;form name=\u0026quot;form_url\u0026quot;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;label\u0026gt;URL \u0026lt;input class=\u0026quot;uk-textarea\u0026quot; name=\u0026quot;url\u0026quot; type=\u0026quot;text\u0026quot; value=\u0026quot;https://obniz.io/\u0026quot; size=\u0026quot;100\u0026quot; required/\u0026gt; \u0026lt;/label\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;input class=\u0026quot;uk-button uk-button-default\u0026quot; type=\u0026quot;button\u0026quot; value=\u0026quot;send\u0026quot; id=\u0026quot;sendurl\u0026quot;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;p id=\u0026quot;obniz_url\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; var obniz = new Obniz(\u0026quot;OBNIZ_ID\u0026quot;); obniz.onconnect = async function () { $(\u0026quot;#sendurl\u0026quot;).on(\u0026quot;click\u0026quot;, function(){ let url = document.form_url.url.value; console.log(url) if(url.length == 0){ alart(\u0026quot;url length error\u0026quot;); return; } let advData = [0x02, 0x01, 0x06, 0x03, 0x03, 0xAA, 0xFE, 0x00,//length 0x16, 0xAA, 0xFE, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]; if (url.indexOf(\u0026quot;https://www.\u0026quot;) == 0) { advData[13] = 0x01; url = url.substring(12); } else if (url.indexOf(\u0026quot;http://www.\u0026quot;) == 0) { advData[13] = 0x00; url = url.substring(11); } else if (url.indexOf(\u0026quot;https://\u0026quot;) == 0) { advData[13] = 0x03; url = url.substring(8); } else if (url.indexOf(\u0026quot;http://\u0026quot;) == 0) { advData[13] = 0x02; url = url.substring(7); } else { throw new Error(\u0026quot;URL Schema Error\u0026quot;); } console.log(url); if (url.length \u0026gt; 17) { throw new Error(\u0026quot;URL Length Error\u0026quot;); } for (let i = 0; i \u0026lt; url.length; i++) { advData[14 + i] = url.charCodeAt(i); } advData[7] = url.length + 6; obniz.ble.advertisement.setAdvDataRaw(advData) obniz.ble.advertisement.setScanRespData({ localName: \u0026quot;obniz Eddystone\u0026quot;, }); obniz.ble.advertisement.start(); document.getElementById(\u0026quot;obniz_url\u0026quot;).innerHTML = `sending url : ${document.form_url.url.value}`; obniz.display.clear(); obniz.display.print(\u0026quot;Eddystone Start\u0026quot;); obniz.display.print(document.form_url.url.value); }); } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; こんな感じの画面が表示されます。\nURLの欄に送信したいURLを入力して、「SEND」を押すとBLEで送信が始まります。 URLの文字長は17文字までになっています。\nBLEの出力をAndroidから確認してみましょう。\nこんな感じでアプリから確認できるでしょう！\nhttps://play.google.com/store/apps/details?id=com.bridou_n.beaconscanner\u0026amp;hl=ja\n昔だと、Eddystoneに近づくと通知がでたはず…うーん？\n検索してみる https://android-developers.googleblog.com/2018/10/discontinuing-support-for-android.html\nなんということでしょう！\nEddystoneは終わった規格でした。\nまとめ  obniz でBLEは簡単に出せる Eddystoneはいい規格だった 流行り廃りがはやいので注意しよう  かなしい…\n",
    "ref": "/blog/2019-12-14-obniz_eddystone/"
  },{
    "title": "IoT的シェアハウスのすすめ",
    "date": "2019-12-07",
    "description": "IoTで便利になるシェアハウスのススメです",
    "body": "12/24 ハンズオン資料はこちら\nこんにちは、ギークハウス新宿に住んでいるわみです。\n今回はIoT的シェアハウスのススメとして、こんな感じにうちのシェアハウスは便利になるよっていう話をしていこうとおもいます。\nレジシステム シェアハウスで食べ物などまとめ買いして、それをシェアしたいという要望はあると思います。\nそれを解決するシステムをつくりました。\nhttps://qiita.com/wamisnet/items/1c6f809be7c4847a900d\nお風呂場監視システム うちのシェアハウスでは、リビングと風呂場が階が違うので、わざわざ階段を無駄に上り下りしないといけない問題がありました。\nその空いているかどうかを監視するシステムをつくりました。\nhttps://qiita.com/retoruto_carry/items/00ec51a94d819925fad1\nNature Remo 赤外線リモコンをコントロールできるデバイス、エアコンやテレビのリモコンを探さなくてよくなる\nSesame スマートロックの中でAPIでいろいろ制御できるのはエンジニア的に面白い。普通に便利。\nのちのちハックされる。\nhttps://qiita.com/wamisnet/items/a07ca183dd97d2cdb483\nGoogle Home VUIでもろもろのIoTデバイスの状態を確認できる\nまとめ ちょっとづつだとしても、IoTを導入することで便利なシェアハウスにすることはできる\n",
    "ref": "/blog/iot_sharehouse/"
  },{
    "title": "obnizのサーバレスイベントでのはまりポイント＆Tips",
    "date": "2019-11-27",
    "description": "obnizのサーバレスイベントでのはまりポイント＆Tips",
    "body": "obnizを使っているとサーバレスイベントを活用するタイミングがあると思います。\n特に12月発売予定のobniz board 1Yではスリープが使えるようになるのでサーバレスイベントを使うと他になにも用意せずにセンシングするようなIoTのサービスをつくれます。\nhttps://blog.obniz.io/ja/news/obniz-board-1y-2/\n今回は私がサーバレスイベントを作るにあたってはまったポイントやTipsをまとめます。\nサーバレスイベントとは 公式ドキュメント：https://obniz.io/ja/doc/obniz_cloud/about_event\n obnizを使うには外部にobnizを使うためのプログラムが必要ですが、obnizクラウドのイベント機能を使えばサーバーレスでプログラムを動作させられます。\n  obniz Eventはあらかじめ設定したトリガーが発生したときに登録しておいたプログラムを自動的にクラウド上で実行するサービスです。 これによりあなたは自分でプログラムを動かして無くてもトリガーとプログラムだけ設定しておくことで、何かが起きた時にクラウド内で自動的に処理を行えます。\n 上記公式から引用しましたが私なりの言葉でまとめると、サーバを用意しなくても各自で作成したプログラムを、後述するトリガーをきっかけに実行してくるツールといった感じでしょうか？\nトリガー  Webhook（APIが生成される） 決められたある時間(11:11など) 決められた時間の間隔(1時間毎など) obnizがオンラインになったら obnizのボタンが押されたら  現在5つのトリガーがあります。 指定されたobnizIDで指定されたトリガーがあったときに、各自のプログラムが実行されます。\n制約事項 11/27現在\n 実行できる時間は30秒以内、それ以上は終了される 1日に実行可能な回数は120回  すこし制約はありますが例えばセンサーの値を取得するプログラムであれば12分に1回はデータを貯められます。\nはまりポイント APIを使用したとき 次のようにAPIを使用するときエラーが発生することがあります。\nawait fetch(\u0026#39;https://maker.ifttt.com/trigger/obniz_temp/with/key/\u0026#39;, { method: \u0026#39;POST\u0026#39;, mode: \u0026#34;no-cors\u0026#34;, body: formData }).then(()=\u0026gt;console.log(\u0026#34;success\u0026#34;)).catch((error) =\u0026gt; console.log(error)); このときにAPIの呼出し後にawait obniz.wait(1000)をいれるとエラーが発生しなくなります。\nTips 絶対にスリープさせる センサーの値読み取りなど予期しないところでプログラムが停止してしまうなど可能性があります。\n電池稼働しているデバイスではこの問題はクリティカルなので、サーバレスイベントが終了する前にスリープをするようにします。\n（obniz board 1Yでのみ使用可能です。）\n//Timeout 25s let tid = setTimeout(()=\u0026gt;{ let dt = new Date(); dt.setMinutes(Math.floor(dt.getMinutes()/10)*10+10,0,0); obniz.sleep(dt); obniz.close(); },25000); こんな感じでスリープするプログラムをobniz.onconnectの外でも呼び出せば問題ないかと思います。\n他にTipsがあれば追記していこうと思います。\nまとめ obnizの便利機能であるサーバレスイベント、そのはまりポイントとTipsを簡単にまとめました。\n定期的にセンシングしてみたいなと思ったら、ぜひ一度さわってみるとよいでしょう！\n",
    "ref": "/blog/2019-11-27-obniz_serverless/"
  },{
    "title": "BG96　開発に役立ったリンク集",
    "date": "2019-10-11",
    "description": "BG96　開発に役立ったリンク集",
    "body": "事例 https://sakura.io/blog/category/tech/\nhttps://eguchi.jp/blog/?p=1249\nhttps://sakura.io/blog/2019/07/05/%E3%80%90%E3%82%BB%E3%82%AD%E3%83%A5%E3%82%A2%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B3%E3%83%8D%E3%82%AF%E3%83%88%E3%80%91cat-m1%E3%81%AElte%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%ABquectel-bg/\n公式PDF　 https://www.quectel.com/UploadImage/Downlad/Quectel_BG96_TCP(IP)_AT_Commands_Manual_V1.1.pdf\nhttps://www.quectel.com/UploadImage/Downlad/Quectel_BG96_AT_Commands_Manual_V2.3.pdf\nhttps://www.quectel.com/UploadImage/Downlad/Quectel_BG96_QuecCell_AT_Commands_Manual_V1.0.pdf\nコード例 https://github.com/RAKWireless/WisLTE_Arduino\nhttps://github.com/SeeedJP/WioLTEforArduino/\n",
    "ref": "/blog/2019-10-11-bg96_link/"
  },{
    "title": "スマートロックが壊れたのでobnizを使ってハックしてみた",
    "date": "2019-08-27",
    "description": "スマートロックが壊れたのでobnizを使ってハックしてみた",
    "body": "こんにちは、わみです！\nギークハウス新宿では住民の入れ替わりの季節で住民減です！ こういうハック的な事に興味がある人いたら私のTwitterにメッセージしてくれると！\nなにをしたのか 壊れてしまったスマートロックからモータの制御や現在のポジションを取得するために制御を乗っ取り、obnizから指示を出すプログラムを作ってみました。\nobnizでsesameをハックしてみた！ pic.twitter.com/kdtwpJw26x\n\u0026mdash; わみ@NefryとかFlutter本とか (@wamisnet) August 27, 2019  Sesameを導入した話：https://speakerdeck.com/wamisnet/sieahausunisumatorotukuwotuketemita\nきっかけ 開発合宿にてSuicaで鍵を開けるシステムを作ったときにSesameのAPIを使ったのですが待ち時間が少々長く、実際に使うときにストレスになりそうだと思いました。\n10秒ぐらいかかってましたね… かかるタイミングだと気持ち1分ぐらい待ったような…\n玄関で待ちぼうけ(´・ω・｀)\nAPI以外は不満がなかったのでSesameをハックできないかと思い、Sesameを開けてみることにしました。\nBLEモジュールやモータドライバーなどが取り付けられていることを確認したのち元に戻そうとしたとき…\n「じゅっ」というどこかが壊れた音がしました\n慌てて、電源を外しましたが時すでに遅し\nもう動かなくなってしまいました\n普通ならあきらめて新しいのをもう一つ買うところですが、せっかくだから思いっきりハックすることにしました！\n技術構成 上の図のように連携しています。\n ハードウエア(Sesame) obniz (おすすめ記事) Node.js（別のサービスと連携するのでAPIを作成）  obnizを使うと何がいいのかというとわざわざハードウエアのコードを別に書かなくてもよくて、今回であればAPIとして使うためのNode.js一つだけでハードウエアの制御ができるところですね！\nせっかくなのでちょっとづつ深堀りしていきましょう。\nハードウエア obnizにモータドライバーついているので回路はすごくシンプルでモータとソレノイドを制御する部分+鍵のポジションを取得するためのアナログ入力をそれぞれ繋いでいます。\n（はんだ付けが汚いのはご愛嬌）\nobniz モータとソレノイドの制御、アナログ入力を変換してくれます。 これがあるから、Node.jsで書くことができます。\nNode.js とりあえずで作ったコードなのでダメな部分ありますが、ご容赦を！\nhttps://github.com/wamisnet/key_controller/\n鍵を開ける処理（APIでリクエストがあるとき）\n 現在位置を取得して、平均値をとる 現在位置から目的の角度に近い方にモータを回す ソレノイドを出す 目的の角度になるまで現在位置を取得し続ける 目標角度になったら、モータを止める ソレノイドを引く  といった処理を行ってます。\nまとめ こんな感じでハックしてみました。\n動画で分かるようにボタンを押してすぐ動作するようになって目標は達成しました！！\nobnizだったので回路もコードもシンプルに作ることができて便利だなと思いました。\nただ玄関で使用するときには、無線LANが不安定過ぎてobnizに向いていなかったので実際に使うことはできなかったです( ；∀；)\nとっても悲しい\n3日ぐらいずっとこれやってたので買った方が安かった気がする…\nとはいえ自分で作れるのは楽しいですね！\n今回バラしてしまいましたがSesame優秀なので、使うときはぜひ！\nAkerunやQrio、Sesameと使ってきましたが、さらにいいデバイスがあれば教えてもらえるとうれしいです！\nここまで読んでくれた方へ ここまで読んでくださりありがとうございます。\nいいねやコメント、SNSでの共有等をしてくださると、今後の励みになります。よろしくお願いします。\n良かったらTwitterもフォローしてね\nぎーじゅくの別記事\n Node-REDでシェアハウスのお風呂を爆速でハッキングする方法 : https://qiita.com/retoruto_carry/items/00ec51a94d819925fad1 Reactとタブレットでバーコード使ったシェアハウス物々交換システム作った話【個人開発】: https://qiita.com/wamisnet/items/1c6f809be7c4847a900d  ",
    "ref": "/blog/2019-08-27_smartlock/"
  },{
    "title": "obniz OSをESP32(NefryBT)に入れて動かそう！",
    "date": "2019-08-20",
    "description": "obniz OSをESP32(NefryBT)に入れて動かそう！",
    "body": "こんにちは！わみです！ 今日は先日リリースされたobnizOSを使い始めてみたので、どんな感じなのかも合わせて書いていこうと思います。\nそもそも「obniz」ってなに？って方は「arduinoとは全く違う、IoTツールobnizのしくみ」をご覧ください。\nなにができるのか NefryでobnizOS動いた！！ pic.twitter.com/YAbw8ggR5B\n\u0026mdash; わみ@NefryとかFlutter本とか (@wamisnet) August 17, 2019  HTML+JSでハードウエア(ESP32(NefryBT))を動かしてみた動画です！\nJavaScriptやpythonでハードウエアを動かすことができる「obniz」ただ、6000円近くするので少々お値段がします…\nその技術をお店で1500円ぐらいで売っているESP32のボードにインストールができるのが先日発表された「obnizOS」なのです！\n私が作っている「Nefry BT」というデバイスにインストールしてみたのでその方法とどんな感じなのかをまとめてみようと思います。 ESP32を搭載したボードであれば、同じような手順で行うことができるのでぜひお試しください。\n（ESP32-picoについては未サポート（具体例：M5stickC））\nインストール ライセンスを購入する https://obniz.io/ja/console 上記ページから「デバイス」を選択し、「obniz OSのライセンスを新規購入」をクリックします。\nライセンスの選択画面で「Hobby」ライセンス、「新規にobnizIDを発行」、個数を選び、「金額を確認」をクリックします。 カードの情報がない場合、このタイミングで入力します。\n確認画面が表示されて、問題なければ「ライセンスを購入」を押します。\n購入が完了すると、「DeviceKey」をダウンロードできます。 これはインストール時に使用するので必ずダウンロードしておいてください。 （画像取り忘れたので公式ドキュメントの画像…）\n前提条件 obniz cliを使用しますのでpython3.4以上のものをインストールしておいてください。\npy -3 -Vでバージョン情報を確認することができます。 インストールされていれば、上記のコマンドをターミナルで実行すると次のようにバージョンが表示されます。\n表示されない場合は、インストールされているか確認したり、pathが通っているか確認してください。\nobniz_cliをインストール obniz_cliとは、簡単にobnizOSをインストールするために作られたアプリになります。それを使って、セットアップを行っていきたいと思います。\nターミナルでpip3 install obniz_cliと入力します。\nインストールが開始されるはずです！「Successfully installed obniz_cli」とでれば大丈夫です。\nNefry BTにobnizOSをインストール Nefry BTをPCと接続し、obnizOSをインストールしていこうと思います。\nターミナルでobniz_cli flashosと入力します。\nESP32を接続しているポートを選択画面がでるので、ポートの横に書かれている数字（今回なら0）を入力します。ここで選んだポート名（今回ならCOM5）を覚えておいてください。\n入力するとインストールが開始されます。\nしばらくするとインストールが完了します。\n次に無線LANの設定とライセンスの適用を行っていきます。\nターミナルでpython -m serial.tools.miniterm ポート名 115200と入力します。\nポート名は先ほど選んだものに変更しておいてください。\n指示に従って、次の項目を入力します。\n DeviceKey:購入時に取得したファイルに書かれた文字列 SSID:接続したい無線LANのもの PASS:接続したい無線LANのもの 固定IP or DHCP:基本的にはDHCPの「0」を選択する  固定IPの場合 下記の項目を設定する  IP Address Subnetmask Default gateway      設定された項目が正しければ、最後に「Online」と表示されます。\n正しくない場合、再度正しいデータを入力されるように求められるので再度行ってください。\nJavaScriptでコードを書いてみる JavaScriptでハードウエアが動かせるので少しコードを書いてみました。\nなにがよいか私なりのメリットを挙げてみます。\n HTMLと合わせて簡単に操作画面をつくれるところ 開発環境を作成しなくてよいところ（公式サイトにエディタがある） いくつかの部品のライブラリがあるのも始めやすいところ https://obniz.io/ja/sdk/parts/LED/README.md   みたいなところですかね！ここもメリットだよってのがあれば教えてもらえると！\n動かしてみる 「Nefry BT」で動かせるようにボタンとフルカラーLEDをコントロールするプログラムをJavaScriptで書いてみたので試してみましょう！\nhttp://obniz.io/ja/console/program\n上記のURLをクリックすると、購入したobniz idが選択できるはずです。\n選択して、「開く」を押してみましょう！\nNefryBTではない別のESP32ボードの場合はそのままサンプルプログラムを動かしてみましょう！\nサンプルプログラムがあるので一旦削除して、次のコードを貼りましょう！ コード内にある「your obniz id」と書かれたところを先ほど選んだobniz idに置き換えることを忘れないでください！\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://obniz.io/js/jquery-3.2.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/obniz@2.2.0/obniz.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;obniz-debug\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;h3\u0026gt;obnizOS on Nefry\u0026lt;/h3\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary m5\u0026#34; id=\u0026#34;on\u0026#34;\u0026gt;ON\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary m5\u0026#34; id=\u0026#34;off\u0026#34;\u0026gt;OFF\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var obniz = new Obniz(\u0026#34;your obniz id\u0026#34;); obniz.onconnect = async function () { var color = obniz.wired(\u0026#34;WS2812\u0026#34;, {din: 16}); color.rgb(0xFF, 255, 0); var led = obniz.wired(\u0026#34;LED\u0026#34;, {anode:26}); // io0 is anode. cathode is connected obniz GND other way.  obniz.getIO(4).pull(\u0026#34;3v\u0026#34;); obniz.getIO(4).input(function(value){ console.log(\u0026#34;changed to \u0026#34; + value); color.rgb(Math.floor( Math.random() * (256) ), Math.floor( Math.random() * (256) ), Math.floor( Math.random() * (256) )); }); $(\u0026#34;#on\u0026#34;).click(function(){ led.on(); }) $(\u0026#34;#off\u0026#34;).click(function(){ led.off(); }) } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 貼り付けたら、右上の「実行」ボタンを押してください。\nNefry BTのSWを押すと、フルカラーLEDがランダムに光ります。 HTMLのボタンを押すと、26ピンに接続されたLEDが点灯したり、消灯したりします。\nピンの指定 ESP32のピン番号を直接指定します。\nNefryの場合、直接基板上に書かれていないので、次の画像を参考にしてください。\n Nefry BT(無印)   Nefry BT R2/R3  まとめ obniz OSでこれからもっと便利にIoTを始められるようになるのではないでしょうか？\nコードの使い勝手としては、obnizボードと大差ない気がします。ただ、ReadOnlyのIOやアナログ入力など制約があるところやモータドライバーがついていないのでモータを直接動かせないところもあるのでそのあたりはobnizボードのところが優れてるかなと思います。\nNefry BTではArduinoでコードを書くのが普通ですが、JavaScriptであったとしても私としてはハードウエアが好きになって、いろんなものが生まれてくるとすごくいいなと思っています。\nここまで読んでくれた方へ ここまで読んでくださりありがとうございます。\nいいねやコメント、SNSでの共有等をしてくださると、今後の励みになります。よろしくお願いします。\n良かったらTwitterもフォローしてね\n",
    "ref": "/blog/2019-08-20-obniz_install_nefry/"
  },{
    "title": "Reactとタブレットでバーコード使ったシェアハウス物々交換システム作った話【個人開発】",
    "date": "2019-07-26",
    "description": "Reactとタブレットでバーコード使ったシェアハウス物々交換システム作った話【個人開発】",
    "body": "こんにちわ、ギークハウス新宿（ぎーじゅく）の住民のわみです。 先日開発合宿で作った物々交換システムができたので仕組みや機能などをまとめてみます。\nなにを作ったか こんな感じで動くよhttps://t.co/BZj1i65I0y pic.twitter.com/qtmRp2mfiH\n\u0026mdash; わみ@NefryとかFlutter本とか (@wamisnet) July 26, 2019  こんな感じのバーコードを使ったPOSシステム的なもの\nどうして作ったか シェアハウスであるある（？）な悩みの一つ、例えばカップヌードルとかドクペをまとめ買いをしてくれて、それを必要なタイミングでみんなで分けるということ。（他だと多めにカレーとかおかずを作ったりしたときにシェアしたいときもめんどい\nまとめ買いすることで安く買えるのはすごくいいのですが、それをいい感じに分けるのは至難の業。購入時にまとめてやるとか方法はいろいろあると思いますが、できたら欲しいときに分けてもらえるとよいなーと\nそんなことをしていたぎーじゅくの過去の写真がこちら\nそれぞれ買ってきた人のボールにお金を入れるという方式（一番手前が私、奥のオレンジや右の封筒が入っているのは別のひとのやつ）\n数が少なければこれでもいいんですが、数が増やすと訳が分からなくなったり、新しい住民が増えたときには一からこの商品は誰々のだよといった説明が必要になってきました。\nこれを解決するために一つシステムを作りました！\n物々交換システムの歴史 このシステムには少々歴史があります。\n物々交換システムv1　（2019年2月頃）の概要 Flutterで今回の下地となるAndroidアプリを作成しました。\n完成写真\n技術構成 次のような構成で作成しました。\n バーコードリーダー タブレット（Flutterアプリ入り） Slack Node-RED(RedMobile) Elasticsearch Kibana  図にするとこんな感じです。\n問題点 ここまで3日ぐらいでつくったものでFlutterのバーコード入力処理にかなり泥臭い対応が一部あったり、Node-REDに依存する部分があったりとなかなか保守しにくいシステムになっていたり、データの作成に手動でいろいろ行わないといけない感じでした。\n手動で行わないといけない作業\n 商品登録 商品編集 商品削除 在庫管理 取引削除 週単位で決済処理 ユーザ追加  この中でも商品登録と決済は手動で行う作業でも大変な作業でした。（2月の頭から5か月以上稼働しているのだから自動化すればいいのに…ｗ\n商品登録 Elasticsearchにデータを入れるためにNode-REDからわざわざ手打ちでJSONを作るｗ\n週単位で決済処理 毎週どれぐらい使ったかKibanaで集計されたデータを使ってユーザに人力で通知していきます。\n（数字は生々しいのでね…\nこんな感じにがんばってる\n今回作成したシステム いろいろと問題のあったFlutterとNode-REDからReactで新規に作り直しました！\n完成写真\nGIF小さいけどこんな感じ\n技術構成 次のような構成で作成しました。\n バーコードリーダー タブレット（React PWA入り） Slack Firebase Elasticsearch(分析用　おまけ) Kibana(分析用　おまけ)  図にするとこんな感じです。\n他の人から使ってみたいという要望を聞いていたのでElasticsearchからFirebaseでまるっと作り直しました！\nFirebaseの使っている機能は次の通りです。\n Cloud Firestore  ユーザ情報 商品情報 取引データ   Auth  ログイン（Cloud Firestoreで個別にデータ管理するため   Hosting  Reactのホスティング    改善点 今までの手動で行わないといけない作業一覧\n 商品登録　← サポート 商品編集　← サポート 商品削除 在庫管理　← サポート 取引削除 週単位で決済処理　 ユーザ追加  商品登録画面 商品のバーコードを読み取ると、RakutenのAPIで商品名や登録価格の基準値を取得するようにして簡単に商品を追加できるようにしました！\nRakutenのAPIめっちゃ便利でよかった！つかってみて https://webservice.rakuten.co.jp/explorer/api/IchibaItem/Search/\n商品登録の方法もすこしこだわっていて、バーコードの読み取りだけでこの画面の設定値を変更できるようにしているため、バーコードリーダーがあれば登録が完了するところもこだわりポイント！\n在庫一覧画面 在庫管理の機能が追加されて、今の残り個数が検索できるようになりました！ 商品のバーコードを読み取るとリストが絞り込まれるようにしたところもこだわりポイント！\nまだサポートしてない機能もありますが、今後サポートできたらいいなと思っています。\nReact化したときにFlutterに比べて圧倒的に拡張しやすくしたので今後は随時機能を追加していきます！\nまとめ 便利になったぎーじゅくの物々交換システム。\nみんなで持ち寄るこの感じが私はすごく好きなので「物々交換システム」という風にしました。 物々交換システムといってますが、物々交換してないやんけっていうツッコミはなしで！\n完全に同じ価値のものと交換するのは大変なので一旦お金を介して交換がはかどるようになったらいいなという理想と現実の狭間な感じ\n他のシェアハウスでもいいだろうし、オフィスでもつかえるのではないでしょうか？\nタブレットとバーコードリーダー（なくてもいいけど、読み込みがカメラより早かった）があればできるところもよいかなと思います。\nぎーじゅくに興味をもったり、このシステムがもっと気になったらコメントしていただけると嬉しいです！\nここまで読んでくれた方へ ここまで読んでくださりありがとうございます。\nいいねやコメント、SNSでの共有等をしてくださると、今後の励みになります。よろしくお願いします。\n良かったらTwitterもフォローしてね\nぎーじゅくの別記事\n Node-REDでシェアハウスのお風呂を爆速でハッキングする方法 : https://qiita.com/retoruto_carry/items/00ec51a94d819925fad1  ",
    "ref": "/blog/2019-07-26-regi/"
  },{
    "title": "ESP32のチップ情報を取得する（ESP-IDF）",
    "date": "2019-07-17",
    "description": "ESP32のチップ情報を取得する（ESP-IDF）",
    "body": "ESP32のチップを判定する必要があったのでその方法をメモしておきます。\nESP-IDFでの例になります。\nChipの取得 #include \u0026quot;soc/soc.h\u0026quot;\n uint32_t _chipmacid =REG_READ(DR_REG_EFUSE_BASE+12); char str[30]; sprintf(str, \u0026quot;_chipmacid:%u\\n\u0026quot;, _chipmacid); console_print(str); uint8_t pkg = (_chipmacid \u0026gt;\u0026gt; 9) \u0026amp; 0x07; sprintf(str, \u0026quot;pkg:%u\\n\u0026quot;, pkg);//これがChipID console_print(str); // 0: \u0026quot;ESP32D0WDQ6\u0026quot;, // 1: \u0026quot;ESP32D0WDQ5\u0026quot;, // 2: \u0026quot;ESP32D2WDQ5\u0026quot;, // 5: \u0026quot;ESP32-PICO-D4\u0026quot;, これでチップの判定をすることができます！\n",
    "ref": "/blog/2019-07-17-esp32-chip/"
  },{
    "title": "M5StickCに書き込みができないときの確認事項",
    "date": "2019-07-10",
    "description": "M5StickCに書き込みができないときの確認事項",
    "body": "http://forum.m5stack.com/topic/814/error-on-downloading-to-m5stickc\nIDFで書き込みできない esptool.py v2.5.1 Serial port COM12 Connecting.... Chip is ESP32-PICO-D4 (revision 1) Features: WiFi, BT, Dual Core, 240MHz, Embedded Flash, VRef calibration in efuse MAC: d8:a0:1d Uploading stub... Running stub... Stub running... Changing baud rate to 921600 Changed. Configuring flash size... A fatal error occurred: Timed out waiting for packet header 原因 M5StickCがサポートするボーレートがあっていないのが原因です。\n1200〜115200、250K、500K、750K、1500K\n上記だと921600になっています。\n対応 書き込み時の通信速度を合ったもの変更することで動作するようになります。 ",
    "ref": "/blog/2019-07-10-m5stick/"
  },{
    "title": "ロボットからobnizをつくりにいきます！「退職エントリ」",
    "date": "2019-07-07",
    "description": "ロボットからobnizに転職するきっかけと今までなにをしてたかまとめました",
    "body": "全然更新していないですが、お久しぶりです、わみです。\n7月末で新卒から今まで2年とちょっと勤めてきたユニロボット株式会社を退職し、8月から株式会社CambrianRoboticsに転職します！\nせっかくなので私の備忘録がてら退職エントリを書いてみます。よかったら読んでいってください。\nユニロボット株式会社との出会い @okhiroyukiさんとの出会いがすべてのきっかけでした。\nもともとTwitterでArduinoのブロックプログラミングツール（ http://lets.makewitharduino.com/ ）をつくっていたのがきっかけでTwitterをフォローしていました。\nIoTLT 大阪で共通の知り合いが一緒に飲みに誘ってくれたのをきっかけに実際に交流が始まり、@okhiroyukiさんが働いるユニロボットが気になり、インターンを2016年6月頃から始めることになりました。\n会話するロボットが面白いと思ったのはもちろんありますが、そこで@okhiroyukiさんや他の社員の方と仕事するのが楽しくなり、学校を卒業した後に正社員として働くことになりました。\nインターン時 インターンを始めた頃はロボットがまだまだ試作段階で数に余裕がなかったのとリモートで週1のインターンだったので実機がなくても開発できるロボットのSDKを開発していました。\njsやhtmlを書いてレビューしてもらう感じでやっていました。\n途中でファームウエアを作成していた人が退職するので、その引継ぎを受けその作成を行うようになりました。\n1年目 新卒1年目は、Uniboの量産が行われるタイミングでいろんなタスクが鬼のように降ってくるようでした。今思い返してもあれほど成長したタイミングはそうそうないように思います。（特に2月から9月）\n（業務外ですが、このタイミング（2月から8月）でNefry BTのクラウドファンディングを行っているんですよね。詰め込みすぎてると思います。なんで何とかなったのか？謎）\nファームウエア（マイコン、DSP）やロボットのアプリ、SDKの繋ぎなどなんでも行っていたような気がします。\n思い返すと1年目の5月にUniboを使ったハッカソンがあって私1人で対応してるところなんか最高に強い（インターンから触ってるからまあ理解していたのはあるもののｗ）\n2年目-退職まで 2年目はハードウエアのタスクが落ち着いたので、ロボットのアプリやUniboを使った受託案件の開発を行っていました。\nいろんなデバイスやサービスを使うことができたのはとても良かったです。\nこのタイミングでフルリモートになりました。ハードウエアや何か用事がある場合にオフィスに行くような感じでした。\nリモートは天気に左右されず、家の快適な環境で作業ができるのでホントに幸せですね。 汗っかきなのでほんとにありがたいです。\n転職のきっかけ 転職しようとしたきっかけは先方からご飯に誘われて、いろいろと話して決めました。\nMakerFaire Kyotoで木戸さんと話してそこに共感できたのも大きなきっかけでした。\n私が作ったNefryが目指した世界とobnizが目指す世界が似ていたので、私の力が役に立つのであれば転職して私の全力でそれを叶えていきたいと思いました。\n（私が作りたいものはNefryの言葉にもなっているNetをFreeにしたい。それでいろんな人が面白いものを作れる世界を作りたい。そんな感じ。全部を作れる人は多くないので私がハードウエアを簡単に扱えるツールを作ることでそれで作りたいところに注力できてより尖った面白いものが生まれてほしい。そんな世界面白そうだから！）\n（Nefryを作っていた私がobnizを作るのに関わるなんて面白そうな感じもよい）\nこれからなにをしたいか Nefryでできなかったこともできたらいいなと思っています。\n個人的には、コンテスト系やハッカソンなどイベント、ハンズオンなどできたらいいなと思っています。（私が作るより、みんなが作れるようになってほしいと思う）\nもちろんハードウエアやファームウエア、サーバー側も含めいろいろ新しいものを作ってみんなが作れるモノの幅を広げるのもやっていくつもりです！\n新しい環境になるので、いろいろ上手くいかないこともあるかと思いますが全力でやっていけたらなと思ってますので宜しくお願い致します！！\n",
    "ref": "/blog/jobchange/"
  },{
    "title": "変わり種のESP32ボードまとめてみた",
    "date": "2019-07-03",
    "description": "変わり種のESP32ボードまとめてみた",
    "body": "変わり種のESP32ボードまとめてみた 技適がないものもあるので要注意\nドル円 108円計算\nCW02  購入リンク： https://xinabox.cc/products/cw02 金額（ドル）：29.95 金額（円）: 3235  ソケットでセンサーやディスプレイを数珠つなぎにできる\nWEMOS LOLIN D32  購入リンク： https://www.aliexpress.com/store/product/WEMOS-LOLIN32-V1-0-0-wifi-bluetooth-board-based-ESP-32-4MB-FLASH/1331105_32808551116.html 金額（ドル）：6.50 金額（円）: 702  バッテリがつなげられる開発ボード\nLOLIN D32 Pro  購入リンク： https://www.aliexpress.com/store/product/LOLIN-D32-Pro-V2-0-0-wifi-bluetooth-board-based-ESP-32-esp32-Rev1-ESP32-WROVER/1331105_32883116057.html 金額（ドル）：8.8 金額（円）: 950  バッテリがつなげられる開発ボード\nDongsen Technology D-duino-32 XR  購入リンク： https://www.aliexpress.com/store/product/DSTIKE-D-duino-32-XR-ESP32-OLED/2996024_32970292724.html?spm=a2g1y.12024536.productList_110843485.pic_4 金額（ドル）：7.9 金額（円）: 853  Obnizに似た開発ボード。スイッチと、ディスプレイがついている。\nESP32 Watch DevKit  購入リンク： https://www.aliexpress.com/store/product/DSTIKE-ESP32-Watch-DevKit/2996024_32985459002.html?spm=a2g1y.12024536.productList_110843487.pic_0 金額（ドル）：39 金額（円）: 4212  腕時計にできるキット。\nOlimex ESP32-EVB  購入リンク： https://www.olimex.com/Products/IoT/ESP32/ESP32-EVB/open-source-hardware 金額（ユーロ）：26 金額（円）: 3160  LANやいろいろなポートが付いたボード\nHARDKERNEL odroid-go  購入リンク： https://www.hardkernel.com/shop/odroid-go/ 金額（ドル）：32 金額（円）: 3456  ゲームボーイみたいなものを作れる\nGuangDong BiPai technology bpi:bit  購入リンク： https://pt.aliexpress.com/store/product/O-BPI-bit-Webduino-e-placa-arduino-com-educa-o-EPS32-para-VAPOR/302756_32861694375.html?spm=a2g03.12010611.0.0.203230d9sYXj5K 金額（ドル）：19.50 金額（円）: 2106  micro:bit に似たマイコンボード。\n",
    "ref": "/blog/2019-07-03-esp32board/"
  },{
    "title": "【IoT可視化ツールレビュー】 thinger.io",
    "date": "2019-06-27",
    "description": "IoT可視化ツールのレビューを行います",
    "body": "thinger.io 次の記事が使い方がまとまっていてわかりやすかったです。\nhttp://www.esploradores.com/empezando/hello-world-thinger-io-blink/\n何を目的としたサービスか IoTでよくある機能を簡単に試すことができるサービス\nデータの可視化やデバイスをこのサービス経由のAPIで制御できる\n何と何ができるのか Webやアプリ上でのセンサーデータの可視化（ダッシュボード） LEDのONOFFやサーボの制御などをWebやアプリ、APIで操作できる データ保存機能（バケット） エンドポイント機能（デバイスからトリガーがあったときにメールや特定のURLを叩ける） それがいくらなのか     無料 500円/月 2500円/月     接続台数 2台 20台 100台   ダッシュボード 4 20 100   バケット（何秒に一度データを保存できるか） 60s 30s 15s   エンドポイント 4 20 100    使った感じどうだったか 接続するときにひと手間ありそうですが可視化の部分を使用できるとよさそうです。\n生のESP32で使用する際にはよいサービスだと思います。\nhttps://github.com/thinger-io/Arduino-Library/tree/master\n簡単にダッシュボードがつくれるところもよく、自分でインスタンス立てて制御することもできるようです。 ダッシュボードのレスポンスもよかったです。\nhttps://thinger.io/downloads/ Blynkに似ていますが、アプリのみでなくWebでコントロールできるところが優れています。\n",
    "ref": "/blog/2019-06-27-thingspeak/"
  },{
    "title": "【IoT可視化ツールレビュー】 ThingSpeak",
    "date": "2019-06-27",
    "description": "IoT可視化ツールのレビューを行います",
    "body": "ThingSpeak 何を目的としたサービスか データの保存やグラフ化できるサービス。\nMATLABとの連携がメインの特徴（むしろMATLAB使えないとほぼ意味がない）\n何と何ができるのか センサーデータの可視化（ダッシュボード） MATLAB連携 ThinhSpeakアプリ https://jp.mathworks.com/help/thingspeak/thingspeak-apps.html?s_tid=CRUX_lftnav\nそれがいくらなのか     無料 約800円/月 約7300円/月     接続台数 3台 50台 50台   ダッシュボード 4 10 250   送信間隔（何秒に一度データを保存できるか） 15s 1s 1s   商用利用 不可 不可 可    使った感じどうだったか 正直MATLABを使用したい意図がない限り選択するメリットは少ないと思っています。\nフリープランだと15秒に一度しかはじかれるのでなかなか使いずらいです。\n同様なことであれば、Ambientで十分だと思います。\n",
    "ref": "/blog/2019-06-27-thinger/"
  },{
    "title": "IoT事例リンク集",
    "date": "2019-06-14",
    "description": "IoTによるモニタリング事例のリンク集",
    "body": "IoTについてまとめる機会があったので、リンク集を公開します\nIoTによるモニタリング 家庭編 家で考えるモニタリング\nスマートロック https://jp.candyhouse.co/\nCANDY HOUSE SESAME mini\nいろいろと数あるスマートロックだが、（家庭向けのデバイスでは）他社製品と比べAPIで開錠で開錠できる特徴が一押し。\nスマートロックの誰の開閉かログをとったり、ゲストに開閉権限を渡すなど基礎的な機能も十分。\n室温管理 https://nest.com/\nnest\n日本では多くありませんが、海外に多くある家まるごと温度をコントロールするもの。\n人の有無を学習し、意識せずに効率よく扱えるようになるのがIoTとして優秀だと思います。\n窓管理 https://www.ykkap.co.jp/products/window/mimott/\nYKK AP株式会社 ミモット\n窓の閉め忘れを無くすことができるデバイス。技術屋としては、電池レスなのがポイントが高い。\nうっかりミスを防ぐことは難しいのでこういったデバイスが普及するとよい。\n睡眠 https://www.kddi.com/with-home/device/uss01a/\nKDDI 睡眠モニター 01\n睡眠状態をロギングできるデバイス。最近話題になっている睡眠改善に使用する。\nIoTで簡単にセンシングできるようになったからこそのデバイス\n宅配ポスト https://www.lixil.co.jp/lineup/gate_fence/smartpost/\n株式会社 LIXIL スマート宅配ポスト\n実証実験で一時期話題になった宅配ボックス。\n値段との兼ね合いでなかなかIoTに対応したデバイスが多くないがゆえに期待している。\n自動発注 https://bungu.plus.co.jp/special/st/2019/octotas/\nプラス株式会社 Octotas\nAmazonのダッシュボタンは有名ですが、重さで自動発注できるのはあまり認知されていないと思う。\n完全にユーザが意識せずにできるもので最もIoTらしいと思っています。\nペット https://petelect.jp/lp/karikarimachinesp/\n株式会社アクセスライン カリカリマシーンSP\n家族の一員ともいえるペットの自動餌やり機、餌を与えるのはもちろんご飯を食べていないことを確認でき、なにか問題があったことに反応できる\n植物 https://foop.cestec.jp/\nアドトロンテクノロジー株式会社 foop\n水耕栽培キット、適切なタイミングをデバイスからスマートフォンに教えてくれるのでだれでも育てることができるところがよい。\n忘れ物 https://mamorio.jp/\nMAMORIO株式会社 MAMORIO\n「なくすを、なくす」というテーマで開発された落とし物を探すことができるデバイス。\n有名ですが、BLEをうまく使っていて素晴らしいと思います。\n赤ちゃん https://unkobtn.com/\n株式会社144Lab うんこボタン\n前項までのデバイスと比べると異色ですが、ボタンを押したことをメモできるデバイス。\nデバイスとしてはシンプルだが、子育てで忙しい人にピッタリ合っていてIoTである意味がある良い商品だと思います。\n",
    "ref": "/blog/2019-06-14-iot_monitoring_link/"
  },{
    "title": "NodeRedでHTTPリダイレクト対応したフローを作る",
    "date": "2019-01-27",
    "description": "NodeRedでHTTPリダイレクト対応したフローを作る",
    "body": "NodeRedでGoogle App Scriptと通信するフローを作った時にHTTPリダイレクトが必要になりました。\nパッとぐぐっても情報を見つけられなかったので、まとめてみました。\nフロー [{\u0026#34;id\u0026#34;:\u0026#34;d7b66544.cad228\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http request\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;GET\u0026#34;,\u0026#34;ret\u0026#34;:\u0026#34;txt\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;tls\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:270,\u0026#34;y\u0026#34;:1160,\u0026#34;wires\u0026#34;:[[\u0026#34;ba934f8b.bf0d1\u0026#34;,\u0026#34;34a354d5.522b7c\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;ba934f8b.bf0d1\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;debug\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;active\u0026#34;:true,\u0026#34;console\u0026#34;:\u0026#34;false\u0026#34;,\u0026#34;complete\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;x\u0026#34;:430,\u0026#34;y\u0026#34;:1200,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;ee827d07.60406\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;debug\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;active\u0026#34;:true,\u0026#34;console\u0026#34;:\u0026#34;false\u0026#34;,\u0026#34;complete\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;x\u0026#34;:1090,\u0026#34;y\u0026#34;:1160,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;9aae099d.e37438\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;リダイレクト\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.url = msg.headers.location;\\ndelete msg.headers;\\ndelete msg.payload;\\ndelete msg.statusCode;\\ndelete msg.method;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:600,\u0026#34;y\u0026#34;:1160,\u0026#34;wires\u0026#34;:[[\u0026#34;c44e1561.006978\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;c44e1561.006978\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http request\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;GET\u0026#34;,\u0026#34;ret\u0026#34;:\u0026#34;obj\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;tls\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:790,\u0026#34;y\u0026#34;:1160,\u0026#34;wires\u0026#34;:[[\u0026#34;f5b05c0a.c51b2\u0026#34;,\u0026#34;3ef37c00.8133a4\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;34a354d5.522b7c\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;switch\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;property\u0026#34;:\u0026#34;statusCode\u0026#34;,\u0026#34;propertyType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;rules\u0026#34;:[{\u0026#34;t\u0026#34;:\u0026#34;eq\u0026#34;,\u0026#34;v\u0026#34;:\u0026#34;302\u0026#34;,\u0026#34;vt\u0026#34;:\u0026#34;num\u0026#34;},{\u0026#34;t\u0026#34;:\u0026#34;eq\u0026#34;,\u0026#34;v\u0026#34;:\u0026#34;301\u0026#34;,\u0026#34;vt\u0026#34;:\u0026#34;num\u0026#34;},{\u0026#34;t\u0026#34;:\u0026#34;else\u0026#34;}],\u0026#34;checkall\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;outputs\u0026#34;:3,\u0026#34;x\u0026#34;:430,\u0026#34;y\u0026#34;:1160,\u0026#34;wires\u0026#34;:[[\u0026#34;9aae099d.e37438\u0026#34;],[\u0026#34;9aae099d.e37438\u0026#34;],[]]},{\u0026#34;id\u0026#34;:\u0026#34;f5b05c0a.c51b2\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;switch\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;property\u0026#34;:\u0026#34;statusCode\u0026#34;,\u0026#34;propertyType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;rules\u0026#34;:[{\u0026#34;t\u0026#34;:\u0026#34;lt\u0026#34;,\u0026#34;v\u0026#34;:\u0026#34;300\u0026#34;,\u0026#34;vt\u0026#34;:\u0026#34;num\u0026#34;},{\u0026#34;t\u0026#34;:\u0026#34;else\u0026#34;}],\u0026#34;checkall\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;outputs\u0026#34;:2,\u0026#34;x\u0026#34;:950,\u0026#34;y\u0026#34;:1160,\u0026#34;wires\u0026#34;:[[\u0026#34;ee827d07.60406\u0026#34;],[]]},{\u0026#34;id\u0026#34;:\u0026#34;3ef37c00.8133a4\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;debug\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;active\u0026#34;:true,\u0026#34;console\u0026#34;:\u0026#34;false\u0026#34;,\u0026#34;complete\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;x\u0026#34;:950,\u0026#34;y\u0026#34;:1200,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;16aa0ce6.c87ac3\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;inject\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;bf7fc455.b09fc8\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;topic\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;payload\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;payloadType\u0026#34;:\u0026#34;date\u0026#34;,\u0026#34;repeat\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;crontab\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;once\u0026#34;:false,\u0026#34;x\u0026#34;:100,\u0026#34;y\u0026#34;:1160,\u0026#34;wires\u0026#34;:[[\u0026#34;d7b66544.cad228\u0026#34;]]}] 解説 一つ目のHTTPRequest Nodeで通信したいURLを指定します。 次のSwitchでリダイレクトの301か302の場合、次の関数ノードに処理をつづけます。 関数ノードでは、msg.url = msg.headers.location;でヘッダーに含まれた移動先のURLを代入して次のHTTPRequest Nodeで移動先の情報を取得します。\n簡単ではありますが、このようになっています。 これで以上になります。簡単にではありますが、誰かの助けになればと思います！\n",
    "ref": "/blog/2019-01-27-nodered_redirect/"
  },{
    "title": "記事を書くのに役立ったリンク集",
    "date": "2019-01-11",
    "description": "記事を書くのに役立ったリンク集",
    "body": "動画をGIF画像に変更する http://giraf.harusamex.com/\nGIF画像を圧縮する http://ezgif.com/optimize\npng画像を圧縮する https://tinypng.com/\nスクリーンショット＆スクリーン動画 https://www.screenpresso.com/download/\n画像共有に便利 元記事 : https://relativelayout.hatenablog.com/entry/2018/06/20/001722\nGithub : https://github.com/pokiiio/GooglePhotoMarkdowner\n",
    "ref": "/blog/2019-01-11-writer_editer_link/"
  },{
    "title": "2018年版　ポートフォリオ",
    "date": "2019-01-09",
    "description": "2018年版　ポートフォリオ",
    "body": "Nefry シリーズ dotstudioさんと共同で開発しているIoT開発ボードです。 「ネットに簡単につながる」ことを実現するために2015年から基板からファームウェア、デバイス設定用Webサイトなど一括して開発しました。\nAWSやAzureといった大きなクラウドサービスはもちろん、ほかにもIFTTTやFirebase、Milkcocoaなど様々なサービスと連携し、購入したユーザが自由に開発できるようにライブラリやドキュメントなどを作成しています。\nそれ以外にもこちらでデータをより簡単に扱えるようにNefryクラウドといったクラウドサービスを開発、提供しています。\nほかの連携例はこちらをご覧ください\nCocoaBit littleBitsというマグネット式の各モジュールをつなぎ合わせることで、電子回路を楽しく学べるもののIoT拡張モジュールを開発しました。 ワンフットシーバスさんと共同で開発しました。\nWebページで入力状態を可視化したり、スライダーで出力をコントロールすることができます。また自由にプログラムを書いて動作できます。\n参考記事：https://dotstud.io/blog/cocoabit-littlebits-milkcocoa-nefry/\nカウンティット 工場での金型の使用回数を計測するために磁気センサーを用い、センシングしたデータをサーバに送信します。 下記の画像は初版の基板で次のバージョンでは今回の初版の改善点を反映し、大幅に改善する予定です。\n電子ペーパー 電源を切っても表示が消えない、電子ペーパーを使い情報の新たな表現を模索しています。 試作中のため、こんなものも作れるというイメージを持っていただければと思います。\nその他 ELワイヤー制御基板、モータ制御基板、Arduino互換機などIoTに直接関係しないものも何個か作成しています。 簡単に写真の紹介をさせていただきます。\n",
    "ref": "/blog/2019-01-09-portfolio/"
  },{
    "title": "Flutter Meetup Tokyo #5いってきた",
    "date": "2018-10-17",
    "description": "Flutter Meetup Tokyo #5 のレポです！",
    "body": "前回の技術書典5でFlutter本を書いたのもあり、今回「Flutter Meetup Tokyo #5」に参加しました。 本を書いている間ずっと気になってたので今回来れてよかったです。\n 一応、本の販売リンクを張っておきます！！！よろしければ！！！\nちょっと仕事が終わらなくて、初めから参加できなかったのですが、YouTubeのほうで配信していたので（マジ神）ちらちら見ながら会場に向かえましたｗ\n配信再開しました。 #flutter_meetup_tokyohttps://t.co/NrMci2I5FE\n\u0026mdash; Flutter Tokyo (@FlutterTokyo) 2018年10月17日  Flutterまだまだ情報少ないのでこういう勉強会で情報を得ていきたいですね。\n発表資料 個人でFlutterアプリをリリースした所感 @ shogo.yamada 今日の発表資料になります！\nもし見にくかったらこちらをご覧ください。https://t.co/Oyku6rCby6\n#flutter_meetup_tokyo\n\u0026mdash; shogo.yamada@Flutterが好き (@yshogo87) 2018年10月17日  Redux in Flutter: An Introduction @ Jeroen Meijer 資料見つけられず…\nFlutter Engineことはじめ @ nankiti 資料みつけられず…\n画像取得とpermission @ txmn パーミッション周りまだ作り込んだことないので聞けてよかった\nこれから発表するスライドになります。\n緊張していますが、よろしくお願いいたしますm(__)mhttps://t.co/Ir61jKIdvd#flutter_meetup_tokyo\n\u0026mdash; taxman (@_txmn) 2018年10月17日  Flutterのlifecycle @ slime_a ライフサイクルの話あまりきかないので、すごく為になった！\n資料これから…？\nFlutterを広めるために技術同人誌を作った話 @ ota42y 私の横のサークルでFlutter本販売していたサークルさんの発表！ いろんな情報を配信していってほしい。\n今日の資料です！！！ “ Flutterを広めるために技術同人誌を作った話 - Speaker Deck https://t.co/5Cg0kuDfJn #flutter_meetup_tokyo\n\u0026mdash; おおた@10/5にサーバレス本　技術書典5か13 (@ota42y) 2018年10月17日  Flutter + Bitrise + DeployGateでAndroid/iOS用テストアプリを配信してみた話 @ D_R_1009 話聞く限りめっちゃよさそう！普通につかってみたい\n資料はまだっぽい\nFlutter で WebView をいい感じにする @ sesta WebView使うときあるあるを説明してくれてる！！初心者枠！？\nコード：https://github.com/sesta/be_cool_webview\n今日の発表の資料ですー #flutter_meetup_tokyohttps://t.co/O25wHVocIM\n\u0026mdash; sesta (@se_sta) 2018年10月17日  FlutterでiOSアプリを作ってIn-House配布した @ espresso3389 BLE話だ！強い初心者のひと\nBLE、Flutterでやってみたいなぁ\nBLEのライブラリ : https://github.com/pauldemarco/flutter_blue\nFlutter Meetup Tokyo #5 #flutter_meetup_tokyo で、「FlutterでiOSアプリを作ってIn-House配布した」という内容で発表しますー。https://t.co/MzRD7xiqQX\n\u0026mdash; Takashi Kawasaki (@espresso3389) 2018年10月17日  順次アップデートしていきます！\n",
    "ref": "/blog/flutter_meetup_tokyo_5/"
  },{
    "title": "技術書典5で発注ミスをしましたｗ＆Flutter本振り返り",
    "date": "2018-10-15",
    "description": "技術書典5の振り返りをします",
    "body": "技術書典5おつかれさまです！\n技術書典の振り返りをしてみようと思います。\n技術書典5で前回のNefry本の経験を活かしながら、前回と違うメンツで「Flutter×Firebaseで始めるモバイルアプリ開発」の本を書きました。 同じギークハウスに住んでいる私を含めた3人でサークル出展をし、Flutter本の執筆は私としもぱたさんで行いました。\n\n販売リンクを張っておくのでぜひ！！！\n執筆　 執筆は、日中仕事している都合上夜の時間で進めるしかないので、ギリギリのタイミングまで深夜の時間を使って作業していました。\nしもぱたさんが執筆した内容を私がレビューする形で進めていたのですが、画像や説明内容が私がイメージする対象者向けのレベルまで落ちずそのあたりの意識調整が上手くいかなかったなぁと反省がありました。\n前回のNefry本では（本業？）ちゃんとくさんにレビューをしていただいてすごくわかりやすいレベルになっていたので、そのレベルまではいかないにしても良いものにしたいなと思って夜遅くまで頑張ったので個人的には自信作です！\n（まだまだ成長したりないのでがんばりたい）\n当日までの話 印刷を指示した10月1日（月）の段階では、被チェック数（お気に入りリストみたいなもの）が50でした。\nこのタイミングで何部刷るのかはかなり悩むんですが、100部売れて、50部はネット販売や委託販売をする風にしようと思い、150部印刷しました。\n技術書典まで時間が1週間もなかったので、前回頼んだところが営業日的にギリギリで別のところにも見積もりを投げました。\nとりあえず入稿できて、印刷を開始していただきました。一安心！\n仕事も忙しくなっていたのでそっちに集中してあとは技術書典当日を待つだけ！！\n当日の話 Flutterというワードが嵌ったのかなんなのかわかりませんが、そこそこ被チェック数が集まり、当日の朝に確認したときには200を超えていました。\n「これはよいのでは！！」とワクワクしていたこのひと時…事件は既に手遅れな状態になっていたのです。\n事件発覚 私のミスなので具体的なことは省略しますが、当日会場に行くとなんということでしょう、それぞれの会社から150部が届いているではないでしょうか！\nめっちゃ冷汗ですね、いやホント\n発注ミスこわい\n私のミスなのでどうしようもないけどホントにやっちまったなと…\nただ、予想以上に被チェック数があったのでワンチャンあるんじゃね！？ （楽観\nさいごに 楽観ダメでしたw\n最初の見立て通り100部は販売でき、イベント後の販売で50部もいい感じに出てるですが、発注ミス分の150部はちょっとどうすっかなと…\n焚き火するか…\n救いなのは赤字ではないところ…（部屋に積まれた箱を見ながら\n発注ミス気をつけようね！\n技術書典は楽しいのでまた出展したい！みんなも出展しよう！\n販売リンクを張っておくのでぜひ！！！\n",
    "ref": "/blog/techbooks5/"
  },{
    "title": "Nefry生誕祭3周年デコレーションケーキを発注してみた",
    "date": "2018-10-12",
    "description": "Nefry生誕3周年記念にデコレーションケーキを発注してみたのでまとめてみました！",
    "body": "すごく今更なんですが、備忘録がてらちょっとまとめておきます。\n 9月18日はNefryがこの世に生まれた日。\n2015年にできてから今年で3年目！\nちょうどIoTLTが開催されるのでそこでケーキを振舞ってきました！！\nケーキを発注する 身近なひとにデコレーションケーキ発注経験者がいないかパッと聞いてみたんですが、いなかったのでWebでぐぐってでてきた、「Patisserie K2」さんに見積もりを依頼してみました！\n流れは、基本的に上のサイトの注文の流れを見ていただくと分かると思います。\nこのときにどんなデザインにするのかを伝えるためにNefryの画像を数枚メールで送信しました。\nしばらくすると見積もりのメールが届くので、それで問題ないかチェックします。 今回のサイズ（30cm × 30cm）だと2万円ぐらいでした。\n80人ぐらいで食べれるサイズ（35cm × 50cm）だと4万ぐらいになるとのことなので、今回は、2万の方にしました。\nあとは冷凍便で届くのを待つだけ！\nまとめ イベント当日の朝にケーキが届きました！\n冷蔵庫に入れて解凍するようで、冷蔵庫を頑張って空けましたｗ\nイベントでケーキを振舞うと、中には酸味がほどよい果物が入っていて誕生日以外にケーキを食べることのない私にとって、めちゃくちゃおいしくて次に頼む機会があればまた頼みたいと思うぐらいでした。\n最後に実際に振舞ったときのツイートを何個か貼っておこうかと思います。\n再現性高すぎ❗️#iotlt #nefry pic.twitter.com/uJWhQbtM75\n\u0026mdash; hayakumi (@hayakumi8893) 2018年9月18日  入刀 #iotlt pic.twitter.com/856BTJTiSD\n\u0026mdash; 早川@初心者かも (@Askaiot0162) 2018年9月18日  Nefryのバースデーケーキ…！！！ #iotlt pic.twitter.com/bfcQd6EfsG\n\u0026mdash; 田中みそ@技術書典5-う28/スマートスピーカーを遊びたおす本 (@miso_develop) 2018年9月18日  ",
    "ref": "/blog/nefry_cake/"
  },{
    "title": "Nefry Tips 無線LAN接続について",
    "date": "2018-08-28",
    "description": "NefryのTips紹介します！今回は無線LANのプチTips",
    "body": "Nefryを使ったいろんな作品が見られて幸せなわみさんです。\n今回は無線LANのプチTipsを共有したいと思っています。\nNefryには、Webページ上で設定した無線LANから自動的にもっとも電波強度が強いものに接続するような機能があります。\nただ、基本的には起動時に接続しにいくのみで、起動したあとに切断された場合再接続処理が上手くいかず接続できないことがあります。\nデモのような短時間の動作であれば上記のような現象は気にならないと思いますが、長時間のモニタリングなどでなってしまうとなかなか辛いことがあると思いますので今回のTipsを試してもらえればと思います！\n#include\u0026lt;Nefry.h\u0026gt;void setup() { // 何か処理 } void loop() { // なんか処理a  if(WiFi.status() != WL_CONNECTED){ //無線LANが接続されていないとき  Nefry.reset(); } } 上記のコードが今回のTipsです。\n無線LANに接続していないときにNefryをリセットするコードになります。\nNefryがネットワークにつながらなくなっても再起動して無線LAN接続が正常に行えるはずです！！\nぜひ試してみてください！\n",
    "ref": "/blog/nefry_tips_2018_08_28/"
  },{
    "title": "Nefry BTと連携できるFirebaseライブラリの解説記事を寄稿しました",
    "date": "2018-08-14",
    "description": "NefryとFirebaseをつなげて新しいものをつくるきっかけになる記事になっているはず",
    "body": "DotstudioさんにFirebaseとNefryを連携方法を説明する記事を寄稿しました。\nぜひご覧ください！\nhttps://dotstud.io/docs/nefrybt-firebase-library/\n",
    "ref": "/blog/nefry_firebase_repo/"
  },{
    "title": "公民館勉強会のすすめ",
    "date": "2018-08-12",
    "description": "公民館での勉強会をメモがてらおすすめしてみます！",
    "body": "こんにちわ、今回は「公民館勉強会のすすめ」としてちょっとメモがてら共有しようと思います。\nなぜ公民館？ いま私が住んでいるギークハウス新宿では、時々住民同士でプチ勉強会を開催しています。\n大体やるときはリビングなのですが、ちょっとみんなで集まって作業するには少々つらいことがありました。 だからといって、コワーキングスペースを使うとなるとそれなりに費用も掛かるのでちょっと二の足を踏んでいました。\n私が参加した勉強会で公民館を使ったイベントがあり、そういえばうちの近くの公民館はどこだろう？と渋谷区（ギークハウス新宿という割には住所は渋谷区代々木ｗ）の公民館を調べてみたところ、徒歩2-3分にあることに気が付きました。 （駅に行くときに毎回その建物の前を通ってるのに気にしてなかった）\n渋谷区施設\nもう少しググってみると50人程度入る教室を数千円で貸してもらえると書いてあるのです！\nこれはせっかくだし、つかうしか！そんなきっかけで公民館に目をつけたのでした。\n公民館の罠 使うのに必要な書類を印刷して早速、公民館に話を聞きにいきました。\nかなりきれいな建物でワクワクしながら受付にいって、さきほど印刷した紙を出しながらいろんな話を聞きました。\n話を聞くとタイトルの罠というか、制約事項をいろいろ説明していただいた中に結構大変な項目を聞いてしまったのです。\nそれは、「不特定多数の募集」をしてはいけないという項目と「参加者の名簿（住所、氏名、電話番号）」を会場を取る際に提出するというものでした。\n会場が広くなるのでせっかくなら勉強会をパブリックにやりたいと思っていたので、結構この段階であてが外れてちょっとどうしようと思ったのですが、とりあえずギークハウス新宿のメンバーだけでも使えたらええんじゃないか？と思い、申請書類を提出しました。\n話を聞いていくと、公民館では参加者の名簿は不要なところもあるのでそのあたりはちょっとハードルが下がるのですが、それでも「不特定多数の募集」ができないのはちょっとIT系のイベントをやるのはつらいなと… （グレーゾーン？で会場非公開で募集者だけに会場を教えるみたいなやりかたでやってるグループもあった（いいんかな？））\n渋谷区ではこんな感じで話を聞きましたが、他の地区だと違うかもしれないので実際に話を聞いてみることをお勧めします。\n開催日を決める ちょっとあてが外れて残念だったこともありましたが、書類を申請すると大体1週間ぐらいで申請が通って登録証を頂けました。\nこの登録証があれば、会場を自由に取ることができます。\n空いてるかは、下記の画像のカレンダで確認することができます。 （ものすごいアナログ） さっそく日時を決めて枠を取ります。 直接、会場に行って使用料を支払います。\nこの時にプロジェクターなどが必要であれば、その代金も支払います。 登録区分がありがたいことに半額で会場を使用できる権利を獲得できたのでかなり安く（13:00-17:30まで借りて会場費1000円（価格崩壊やばい）ちなみに借りた部屋は最大55人入る教室）使えました。\n渋谷区民万歳！w\nイベント開催 1時ぐらいに会場に行き、登録証を確認してもらいます。 会場に案内してもらうとプロジェクターが準備されていてすぐにでもできる感じでありがたい限り…\n好きに机や椅子をならべ、勉強会開始！\n55人入る会場なだけあってめっちゃ広い\nこの会場が1000円か…\nめっちゃよきかな\n会場の枠さえ空いていれば一日（9:00-21:00）いけるのでプチハッカソン的なことも全然できそうで夢が広がるｗ（会場費:3250円（やばさ））\nまとめ IT系のイベントであれば、企業のオフィスを使うことが多いと思うのですが、時には公民館で勉強会もありなんじゃないかなと思いました。（いろいろ難しい点があるけどね）\nどちらかというと友達同士や同じ企業の仲間どうしで会場どうしよう？みたいなことを考えるときに公民館を使うのはかなりありなんじゃないでしょうか？\n",
    "ref": "/blog/study_mokumoku_8_11/"
  },{
    "title": "9/2 NefryUGもくもく会イベント開催します！！",
    "date": "2018-08-11",
    "description": "9月2日にNefryユーザグループ もくもく会イベントを開催します！！",
    "body": "Nefry ユーザグループイベント 2回目開催決定 9/2（日）に開催しますので、ぜひ遊びにきてください。\nナゾ枠で私が質問を受け付ける枠があるのでぜひ（だれもいないと寂しい）\nイベントページはこちら！\n",
    "ref": "/blog/nefry_ug_2/"
  },{
    "title": "About wami",
    "date": "2018-08-08",
    "description": "",
    "body": "愛知出身のわみです。現在、ギークハウス新宿に在住しています。\n学生のころにネットワークの勉強をしながら、イヤホンジャックで通信する「Sofmo」を開発しました。\n2015年の夏、フリスクサイズのIoTデバイス「 Nefryシリーズ 」を開発！\nその後、いろんなご縁があり、今はobnizの開発に携わっています。\nobnizの開発とは別に個人事業主として、いろんなものの作成を手伝っています。\n Twitter SpeakerDeck SlideShare Nefry Sofmo GitHub  スキル 2018年8月現在のものになります。\nハードウエア系  Kicad（回路CAD） Arduino uno Arduino mega Arduino ADK Raspberry pi ESP32 ESP8266 DSP PIC   ソフトウエア系  上記ハードウエアのファーム作成 Android JavaScript,HTML,CSS C++ Cisco（CCNAを取得）  イベント運営 IoTLT名古屋の主催やIoT関連イベントを主に活動。 connpass参照\n作品  Nefryシリーズ CocoaBit Sofmo ELワイヤ制御基板 USB Type C変換基板 モータドライバー 小型Arduino作成 Arduino ADK互換機作成  ",
    "ref": "/about/"
  },{
    "title": "About りこは",
    "date": "2018-08-08",
    "description": "",
    "body": "「りこは」という屋号で、ハードウエアやソフトウェアの受託開発を受けています。\n案件等の依頼があれば、Twitterやメールにてお願いいたします。\n Twitter  個人のスキルはAboutにてまとめてありますのでそちらをご覧ください。\n業務概要  住所：東京都渋谷区代々木 屋号：りこは  業務内容  ハードウエア開発 ファームウエア開発 ソフトウェア開発（Web、アプリ開発等） 上記に関連する業務  製作実績　 受託開発、自費開発等で製作したハードウエアやソフトウェアについてまとめました。\n受託開発 モンスターウルフ拡張基板 株式会社exMediaさんと仁愛大学の共同研究で使用するモンスターウルフ拡張基板の設計、製造、ファームウエア作成を行いました。\n技術構成：xbeeを用いた、センサーエリア拡張モジュール\nモンスターウルフ拡張基板\nCountit Pinnovation株式会社さんの金型IoTシステムの設計、製造、ファームウエア作成、データ表示ツール作成を行いました。\n技術構成：TWE-LITEモジュール、Raspberry Pi、ElasticSearchなどを使用\nPinnovation株式会社\nELワイヤ制御基板 ELワイヤを制御するための基板の設計、製造を行いました。\n 自費開発 Nefryシリーズ 設計、試作、量産、検査、販売まで一貫して対応。\nネットをフリーにするデバイスとして、ハードウエア、ファームウエア、Webアプリ等含め、作成。\nNefryBT(ESP32) dotstudio株式会社との共同開発。\nクラウドファンディング実施。 さまざまなサポートを頂き、秋葉原などの店頭販売を行っている。\n現在も販売中。\nhttps://dotstud.io/docs/nefrybt/\nCocoaBit 1ft-seabassさんとの共同開発。\n合同会社デジタルハイクから部品などスポンサしていただきました。\nhttps://nefry.studio/CocoaBit/CocoaBit%E3%81%A3%E3%81%A6%EF%BC%9F/\nNefry(ESP8266) 中期以降のデバイスは中国にて量産対応。\nファームウエアや製造等、完全個人対応。\nhttps://nefry.studio/\nSofmo イヤホンジャックを用いた、通信可能なArduino互換機。\nhttp://sofmo.pw/\n執筆  Flutter×Firebaseで始めるモバイルアプリ開発 きょうからのNefry ステップアップNefry 月刊I/O 2017 8月号  今日発売の月刊IOにNefryBTの記事を書かせていただきました！\nNefryBTってなんなのか紹介する記事となってます、ぜひ本屋に行って手に取ってみてください！ pic.twitter.com/IRhoKipQfM\n\u0026mdash; わみ@NefryとかFlutter本とか (@wamisnet) July 18, 2017  販売サイト https://wamisnet.booth.pm/\n年表 2019  モンスターウルフ拡張基板 受託開発 Countit　受託開発 同人ハードウエアMeetup#3 主催 同人ハードウエアMeetup#2 主催  2018  同人ハードウエアMeetup#1 主催 Flutter×Firebaseで始めるモバイルアプリ開発　商業誌発売 「Nefry」 商標取得 2018年より開業届を提出し、フリーランスとして活動  それ以前  2017年　Nefry BT　クラウドファンディング IoTLT名古屋　主催  ",
    "ref": "/business/"
  },{
    "title": "hugo始めました",
    "date": "2018-08-08",
    "description": "hugoでブログ始めました",
    "body": "いままでのサイトはかなり手抜き感もあったのでちゃんとしたものを作ることにしました。\nせっかく個人事業主としての活動もあるのでそのあたりも今後につながればいいなと思います。\nNefryの作例やTips、そのほかのハードウエアについても気軽にまとめていくつもりなのでよろしくお願いします。\n",
    "ref": "/blog/newsite/"
  },{
    "title": "NefryUG参加レポ",
    "date": "2018-08-08",
    "description": "Nefryユーザグループイベントに参加してきました！",
    "body": "8/7にdotstudioで開催された、Nefryユーザグループイベントに参加してきました。\n（一応主催　ちゃんとくさんにほとんどやっていただいた。ありがとうございます。）\nconnpassページ\nちゃんとくさんも言っていたけど、UGイベント初なんですよね。\nこれから大きく育っていってほしいです。\n初イベントは13人の方に来ていただいて、6人の人に発表して頂きました！ ホントにありがたい限りです！\nイベントの様子の画像を何枚か貼っておきます！\nちなみに次のイベントは来月頃の予定らしい…\n",
    "ref": "/blog/nefry_ug_1/"
  },{
    "title": "Nefry",
    "date": "2018-08-07",
    "description": "フリスクサイズのIoTデバイス",
    "body": "Nefryシリーズ フリスクサイズのIoTデバイス。\nサイトリンク\n Nefry dotstuido販売ページ Nefryドキュメント Nefry本販売サイト Nefryコミュニティ  ",
    "ref": "/itemized/nefry/"
  },{
    "title": "Sofmo",
    "date": "2018-08-07",
    "description": "イヤホンジャックで通信するArduino互換機",
    "body": "Sofmo 公式サイト\n",
    "ref": "/itemized/sofmo/"
  },{
    "title": "4モータ制御ドライバー",
    "date": "2018-08-06",
    "description": "DRV8830使用したモータドライバー",
    "body": "DRV8830使用4モーター管理可能モータドライバ なにができるの？ ラジコンなどモーターを4つ制御したいときに便利な基盤です。\nI2Cでモーターの速度をそれぞれコントロールする事ができます！\n仕様          電源電圧範囲 7V以下   最大連続駆動電流 1A   モータへの動作電源電圧範囲 2.75V～6.8V   通信方法 I2C   使用IC DRV8830    ICについての詳細情報\nサンプルプログラム DRV8830ドライバーはこちらからダウンロードしてください\n#include \u0026lt;Arduino.h\u0026gt; #include \u0026lt;Wire.h\u0026gt; #include \u0026lt;DRV8830MotorDriver.h\u0026gt; DRV8830MotorDriver motor1(DRV8830_A1_A0_0_0); DRV8830MotorDriver motor2(DRV8830_A1_A0_0_1); DRV8830MotorDriver motor3(DRV8830_A1_A0_1_1); DRV8830MotorDriver motor4(DRV8830_A1_A0_1_0); #define FAULTn 7 void setup() { Serial.begin(115200); Wire.begin(); Serial.println(\u0026quot;Hello,DRV8830 I2C MotorDriver\u0026quot;); motor1.setSpeed(0); motor2.setSpeed(0); motor3.setSpeed(0); motor4.setSpeed(0); } int spd = 0; void loop() { char c; if (Serial.available()) { c = Serial.read(); if (c == '+') { spd++; motor1.setSpeed(spd); motor2.setSpeed(spd); motor3.setSpeed(spd); motor4.setSpeed(spd); spd = motor1.getSpeed(); Serial.println(spd); } else if (c == '-') { spd--; motor1.setSpeed(spd); motor2.setSpeed(spd); motor3.setSpeed(spd); motor4.setSpeed(spd); spd = motor1.getSpeed(); Serial.println(spd); } else if (c == 'b') { spd = 0; motor1.setSpeed(spd); motor2.setSpeed(spd); motor3.setSpeed(spd); motor4.setSpeed(spd); motor1.brake(); motor2.brake(); motor3.brake(); motor4.brake(); spd = motor1.getSpeed(); Serial.println(spd); } } } 設計情報 回路図\n配線図\n",
    "ref": "/itemized/motor/"
  },{
    "title": "USB Type C変換基板",
    "date": "2018-08-05",
    "description": "ブレットボードに差しやすい2.54mmに変換します。",
    "body": "USB Type C変換基板 なにができるの？ USB Type CのソケットからUSB2.0で使われるピンをブレットボードなどで使いやすい2.54mmピッチに変換する基板です。\nピンソケットをつけない場合\nピンソケットをつけた場合\n仕様          接続端子 USB Type C   サイズ(㎜) 15×15    設計情報 回路図\n配線図\nUSB type Cケーブル Type A to Type CタイプのUSB2.0ケーブル、長さ100cmのケーブルです。\n",
    "ref": "/itemized/usbtypec/"
  },{
    "title": "Zaif Paymentを使ってビットコイン＆モナコイン仮想通貨決済システムをつくってみる",
    "date": "2017-12-26",
    "description": "Zaif Paymentを使ってビットコイン＆モナコイン仮想通貨決済システムをつくってみる",
    "body": "最近、仮想通貨の話題を聞かない日はないようになってだいぶ浸透してきたんだなと思います。\n悪い面が騒がれているような気がしますが、エンジニアとしては触ってみると面白い分野なのではないかなと思っています。 そんな仮想通貨を実際に決済システムとしてビックカメラや秋葉原の一部店舗などで取り扱われてきています、これはちょっと気になる。\nそんなことを思っていたら、ちょうどいい感じにZaif Paymentを見つけましたので使ってみました！！(個人利用できていい感じのサービスがあればそれでもいいかもですけどね)\n**完成版はこちら！**気に入ったら何円か投げ銭してくれてもいいんですよ？\n 2017/12/30 決済情報の表示に対応！！\n Zaif Paymentとは 取引所のZaifが行っている仮想通貨決済サービスです。\n公式サイトはこちら\n特徴\n 手数料無料 モナコインに対応している 日本円で受け取ることができる 仮想通貨のまま受け取ることができる  このサービスはAPIで使って扱うことができます。\n今回は簡単に実装するためにAPI＋Node-Redで決済システムを作ってみようと思います。\n決済システムをつくってみる それではNode-Redでさくっと作ってみようと思います。\n環境  IBM Cloud ライトアカウントなどのNode-Red環境(私はAWSにMode-Redの環境を作ってて試しています) Zaifアカウント　(本人確認済み)   IBM Cloud (aka Bluemix) ライト・アカウント作成手順\n サンプルコード [{\u0026#34;id\u0026#34;:\u0026#34;f6f414ca.057578\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http request\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;POST\u0026#34;,\u0026#34;ret\u0026#34;:\u0026#34;obj\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;https://api.zaif.jp/ecapi\u0026#34;,\u0026#34;tls\u0026#34;:\u0026#34;e55e7d60.78615\u0026#34;,\u0026#34;x\u0026#34;:568,\u0026#34;y\u0026#34;:168,\u0026#34;wires\u0026#34;:[[\u0026#34;68603af5.adebf4\u0026#34;,\u0026#34;1670bdc2.8675b2\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;d408e881.31ac48\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;inject\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Test\u0026#34;,\u0026#34;topic\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;payload\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;payloadType\u0026#34;:\u0026#34;date\u0026#34;,\u0026#34;repeat\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;crontab\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;once\u0026#34;:false,\u0026#34;x\u0026#34;:108,\u0026#34;y\u0026#34;:88,\u0026#34;wires\u0026#34;:[[\u0026#34;1c02b6e3.fc9989\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;942f2d66.612c7\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;APIKey設定\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.key = \\\u0026#34;\\\u0026#34;;\\nmsg.secret = \\\u0026#34;\\\u0026#34;;\\nmsg.currency = msg.payload.basecoin;\\nmsg.jpy = msg.coin = msg.payload.coin;\\nif(msg.currency == \\\u0026#34;mona\\\u0026#34;){\\n msg.build_pay = true;\\n} \\nif(msg.currency == \\\u0026#34;btc\\\u0026#34;){\\n //msg.build = true;\\n}\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:408,\u0026#34;y\u0026#34;:88,\u0026#34;wires\u0026#34;:[[\u0026#34;7be80c8f.e09434\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;c0675801.ef7898\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;RequestMessage\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.header = \\\u0026#34;content-type:application/x-www-form-urlencoded\\\u0026#34;;\\nmsg.payload = \\\u0026#34;method=createInvoice\u0026amp;key=\\\u0026#34; + msg.key + \\\u0026#34;\u0026amp;md5secret=\\\u0026#34; + msg.secret + \\\u0026#34;\u0026amp;nonce=\\\u0026#34; + Date.now()*0.00000001 + \\\u0026#34;\u0026amp;currency=\\\u0026#34; + msg.currency + \\\u0026#34;\u0026amp;amount=\\\u0026#34; + msg.coin;\\nif(msg.build != null)msg.payload += msg.build;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:1208,\u0026#34;y\u0026#34;:88,\u0026#34;wires\u0026#34;:[[\u0026#34;f6f414ca.057578\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;612df29b.99377c\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http in\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;/mona\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;post\u0026#34;,\u0026#34;swaggerDoc\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:148,\u0026#34;y\u0026#34;:148,\u0026#34;wires\u0026#34;:[[\u0026#34;7ac4a796.09e858\u0026#34;,\u0026#34;942f2d66.612c7\u0026#34;,\u0026#34;65921b1d.60fac4\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;6797947a.87c71c\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http response\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:1068,\u0026#34;y\u0026#34;:168,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;52204357.90c9ac\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;template\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;HTML\u0026#34;,\u0026#34;field\u0026#34;:\u0026#34;payload\u0026#34;,\u0026#34;fieldType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;html\u0026#34;,\u0026#34;syntax\u0026#34;:\u0026#34;mustache\u0026#34;,\u0026#34;template\u0026#34;:\u0026#34;\u0026lt;!DOCTYPE html\u0026gt;\\n\u0026lt;html lang=\\\u0026#34;jp\\\u0026#34;\u0026gt;\\n\u0026lt;head\u0026gt;\\n \u0026lt;meta charset=\\\u0026#34;UTF-8\\\u0026#34;\u0026gt;\\n \u0026lt;title\u0026gt;Monacoin \u0026amp; Bitcoin Payment Service\u0026lt;/title\u0026gt;\\n \u0026lt;link href=\u0026#39;https://fonts.googleapis.com/css?family=Titillium+Web:400,300,600\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt;\\n \u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; href=\\\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css\\\u0026#34;\u0026gt;\\n\\n \u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; href=\\\u0026#34;/coinstyle.css\\\u0026#34;\u0026gt;\\n\\n\u0026lt;/head\u0026gt;\\n\u0026lt;body\u0026gt;\\n \u0026lt;div class=\\\u0026#34;form\\\u0026#34;\u0026gt;\\n\\n \u0026lt;h1\u0026gt;Monacoin \u0026amp; Bitcoin Payment Service\u0026lt;/h1\u0026gt;\\n\\n \u0026lt;img src=\\\u0026#34;http://chart.apis.google.com/chart?chs=450x450\u0026amp;cht=qr\u0026amp;chl={{payload.return.BIP21}}\\\u0026#34; alt=\\\u0026#34;Payment QRコード\\\u0026#34; id=\\\u0026#34;qrcode\\\u0026#34;\u0026gt;\\n\\n \u0026lt;h1\u0026gt;{{paycoin}}\u0026lt;/h1\u0026gt;\\n \u0026lt;h1 id=\\\u0026#34;timeout\\\u0026#34;\u0026gt;TimeOut : {{time}}\u0026lt;/h1\u0026gt;\\n \u0026lt;h1 id=\\\u0026#34;state\\\u0026#34;\u0026gt;State : new\u0026lt;/h1\u0026gt;\\n \u0026lt;h1\u0026gt;\u0026lt;a href=\\\u0026#34;/coin\\\u0026#34;\u0026gt;Back\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\\n \\n \u0026lt;/div\u0026gt;\\n \u0026lt;script src=\\\u0026#34;https://code.jquery.com/jquery-3.2.1.min.js\\\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\\n\\n \u0026lt;script type=\\\u0026#34;text/javascript\\\u0026#34; src=\\\u0026#34;/jquery.periodicalupdater.js\\\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\\n \u0026lt;script type=\\\u0026#34;text/javascript\\\u0026#34;\u0026gt;\\n $(function(){\\n $.PeriodicalUpdater(\u0026#39;./servicestate\u0026#39;,{\\n method: \u0026#39;post\u0026#39;,\\n data: {id: \\\u0026#34;{{id}}\\\u0026#34;},\\n minTimeout: 3000,\\n multiplier:1,\\n maxCalls: 0,\\n type: \u0026#39;html\u0026#39;\\n },\\n\\n function(data,success, xhr, handle){\\n $(\\\u0026#34;#state\\\u0026#34;).text(\\\u0026#34;State : \\\u0026#34;+data);\\n if(data==\\\u0026#34;paid\\\u0026#34; || data==\\\u0026#34;confirmed\\\u0026#34; || data==\\\u0026#34;complete\\\u0026#34; || data==\\\u0026#34;expired\\\u0026#34; || data==\\\u0026#34;invalid\\\u0026#34; || data==\\\u0026#34;canceled\\\u0026#34;){\\n $(\\\u0026#34;#qrcode\\\u0026#34;).hide();\\n $(\\\u0026#34;#timeout\\\u0026#34;).hide();\\n if(data!=\\\u0026#34;paid\\\u0026#34;){\\n handle.stop();\\n }\\n }\\n });\\n });\\n \u0026lt;/script\u0026gt;\\n\u0026lt;/body\u0026gt;\\n\u0026lt;/html\u0026gt;\\n\u0026#34;,\u0026#34;x\u0026#34;:928,\u0026#34;y\u0026#34;:168,\u0026#34;wires\u0026#34;:[[\u0026#34;6797947a.87c71c\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;7ac4a796.09e858\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;debug\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;active\u0026#34;:true,\u0026#34;console\u0026#34;:\u0026#34;false\u0026#34;,\u0026#34;complete\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;x\u0026#34;:348,\u0026#34;y\u0026#34;:148,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;7e2af953.636f58\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http in\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;coinトップページ\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;/coin\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;get\u0026#34;,\u0026#34;swaggerDoc\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:118,\u0026#34;y\u0026#34;:308,\u0026#34;wires\u0026#34;:[[\u0026#34;6b1e1cde.f6a924\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;7ae2c906.83f288\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http response\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:528,\u0026#34;y\u0026#34;:308,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;6b1e1cde.f6a924\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;template\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;HTML\u0026#34;,\u0026#34;field\u0026#34;:\u0026#34;payload\u0026#34;,\u0026#34;fieldType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;handlebars\u0026#34;,\u0026#34;syntax\u0026#34;:\u0026#34;plain\u0026#34;,\u0026#34;template\u0026#34;:\u0026#34;\u0026lt;!DOCTYPE html\u0026gt;\\n\u0026lt;html lang=\\\u0026#34;jp\\\u0026#34;\u0026gt;\\n\u0026lt;head\u0026gt;\\n \u0026lt;meta charset=\\\u0026#34;UTF-8\\\u0026#34;\u0026gt;\\n \u0026lt;title\u0026gt;Monacoin \u0026amp; Bitcoin Payment Service\u0026lt;/title\u0026gt;\\n \u0026lt;link href=\u0026#39;https://fonts.googleapis.com/css?family=Titillium+Web:400,300,600\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt;\\n \u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; href=\\\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css\\\u0026#34;\u0026gt;\\n\\n \u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; href=\\\u0026#34;/coinstyle.css\\\u0026#34;\u0026gt;\\n\\n\u0026lt;/head\u0026gt;\\n\u0026lt;body\u0026gt;\\n \u0026lt;div class=\\\u0026#34;form\\\u0026#34;\u0026gt;\\n\\n \u0026lt;h1\u0026gt;Monacoin \u0026amp; Bitcoin Payment Service\u0026lt;/h1\u0026gt;\\n\\n \u0026lt;form action=\\\u0026#34;/mona\\\u0026#34; method=\\\u0026#34;post\\\u0026#34; name=\u0026#39;mainForm\u0026#39;\u0026gt;\\n \u0026lt;ul class=\\\u0026#34;tab-group\\\u0026#34;\u0026gt;\\n \u0026lt;li class=\\\u0026#34;tab active\\\u0026#34;\u0026gt;\u0026lt;a href=\\\u0026#34;mona\\\u0026#34;\u0026gt;MonaCoin\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\\n \u0026lt;li class=\\\u0026#34;tab\\\u0026#34;\u0026gt;\u0026lt;a href=\\\u0026#34;btc\\\u0026#34;\u0026gt;BitCoin\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\\n \u0026lt;/ul\u0026gt;\\n \u0026lt;input type=\\\u0026#34;radio\\\u0026#34; name=\\\u0026#34;basecoin\\\u0026#34; value=\\\u0026#34;mona\\\u0026#34; checked=\\\u0026#34;checked\\\u0026#34;\u0026gt;\\n \u0026lt;input type=\\\u0026#34;radio\\\u0026#34; name=\\\u0026#34;basecoin\\\u0026#34; value=\\\u0026#34;btc\\\u0026#34;\u0026gt;\\n \u0026lt;div class=\\\u0026#34;field-wrap\\\u0026#34;\u0026gt;\\n \u0026lt;label\u0026gt;\\n JPY\\n \u0026lt;/label\u0026gt;\\n \u0026lt;input type=\\\u0026#34;number\\\u0026#34; name=\\\u0026#34;coin\\\u0026#34; required autocomplete=\\\u0026#34;off\\\u0026#34; /\u0026gt;\\n \u0026lt;/div\u0026gt;\\n \u0026lt;input type=\\\u0026#34;submit\\\u0026#34; class=\\\u0026#34;button button-block\\\u0026#34; value=\\\u0026#34;Pay\\\u0026#34;\u0026gt;\\n\\n \u0026lt;/form\u0026gt;\\n\\n \u0026lt;/div\u0026gt;\\n\\n \u0026lt;script src=\u0026#39;http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js\u0026#39;\u0026gt;\u0026lt;/script\u0026gt;\\n\\n \u0026lt;script type=\\\u0026#34;text/javascript\\\u0026#34;\u0026gt;\\n $(\u0026#39;.form\u0026#39;).find(\u0026#39;input, textarea\u0026#39;).on(\u0026#39;keyup blur focus\u0026#39;, function (e) {\\n var $this = $(this),\\n label = $this.prev(\u0026#39;label\u0026#39;);\\n\\n if (e.type === \u0026#39;keyup\u0026#39;) {\\n if ($this.val() === \u0026#39;\u0026#39;) {\\n label.removeClass(\u0026#39;active highlight\u0026#39;);\\n } else {\\n label.addClass(\u0026#39;active highlight\u0026#39;);\\n }\\n } else if (e.type === \u0026#39;blur\u0026#39;) {\\n if ($this.val() === \u0026#39;\u0026#39;) {\\n label.removeClass(\u0026#39;active highlight\u0026#39;);\\n } else {\\n label.removeClass(\u0026#39;highlight\u0026#39;);\\n }\\n } else if (e.type === \u0026#39;focus\u0026#39;) {\\n\\n if ($this.val() === \u0026#39;\u0026#39;) {\\n label.removeClass(\u0026#39;highlight\u0026#39;);\\n }\\n else if ($this.val() !== \u0026#39;\u0026#39;) {\\n label.addClass(\u0026#39;highlight\u0026#39;);\\n }\\n }\\n\\n });\\n\\n $(\u0026#39;.tab a\u0026#39;).on(\u0026#39;click\u0026#39;, function (e) {\\n\\n e.preventDefault();\\n\\n $(this).parent().addClass(\u0026#39;active\u0026#39;);\\n $(this).parent().siblings().removeClass(\u0026#39;active\u0026#39;);\\n\\n target = $(this).attr(\u0026#39;href\u0026#39;);\\n document.forms.mainForm.basecoin.value = target;\\n\\n $(\u0026#39;.tab-content \u0026gt; div\u0026#39;).not(target).hide();\\n\\n $(target).fadeIn(600);\\n\\n });\\n \u0026lt;/script\u0026gt;\\n\\n\u0026lt;/body\u0026gt;\\n\u0026lt;/html\u0026gt;\\n\u0026#34;,\u0026#34;x\u0026#34;:388,\u0026#34;y\u0026#34;:308,\u0026#34;wires\u0026#34;:[[\u0026#34;7ae2c906.83f288\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;b56f1f7e.cc701\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http in\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;/coinstyle.css\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;get\u0026#34;,\u0026#34;swaggerDoc\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:168,\u0026#34;y\u0026#34;:368,\u0026#34;wires\u0026#34;:[[\u0026#34;4f4b57f8.ac6858\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;4f4b57f8.ac6858\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;template\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;CSS\u0026#34;,\u0026#34;field\u0026#34;:\u0026#34;payload\u0026#34;,\u0026#34;fieldType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;css\u0026#34;,\u0026#34;syntax\u0026#34;:\u0026#34;plain\u0026#34;,\u0026#34;template\u0026#34;:\u0026#34;*, *:before, *:after {\\n -webkit-box-sizing: border-box;\\n box-sizing: border-box;\\n}\\n\\nhtml {\\n overflow-y: scroll;\\n}\\n\\nbody {\\n background: #c1bdba;\\n font-family: \u0026#39;Titillium Web\u0026#39;, sans-serif;\\n}\\n\\na {\\n text-decoration: none;\\n color: #1ab188;\\n -webkit-transition: .5s ease;\\n transition: .5s ease;\\n}\\na:hover {\\n color: #179b77;\\n}\\n\\n.form {\\n background: rgba(19, 35, 47, 0.9);\\n padding: 40px;\\n max-width: 600px;\\n margin: 40px auto;\\n border-radius: 4px;\\n -webkit-box-shadow: 0 4px 10px 4px rgba(19, 35, 47, 0.3);\\n box-shadow: 0 4px 10px 4px rgba(19, 35, 47, 0.3);\\n}\\n\\n.tab-group {\\n list-style: none;\\n padding: 0;\\n margin: 0 0 40px 0;\\n}\\n.tab-group:after {\\n content: \\\u0026#34;\\\u0026#34;;\\n display: table;\\n clear: both;\\n}\\n.tab-group li a {\\n display: block;\\n text-decoration: none;\\n padding: 15px;\\n background: rgba(160, 179, 176, 0.25);\\n color: #a0b3b0;\\n font-size: 20px;\\n float: left;\\n width: 50%;\\n text-align: center;\\n cursor: pointer;\\n -webkit-transition: .5s ease;\\n transition: .5s ease;\\n}\\n.tab-group li a:hover {\\n background: #179b77;\\n color: #ffffff;\\n}\\n.tab-group .active a {\\n background: #1ab188;\\n color: #ffffff;\\n}\\n\\n.tab-content \u0026gt; div:last-child {\\n display: none;\\n}\\n\\nh1 {\\n text-align: center;\\n color: #ffffff;\\n font-weight: 300;\\n margin: 0 0 40px;\\n}\\n\\nlabel {\\n position: absolute;\\n -webkit-transform: translateY(6px);\\n transform: translateY(6px);\\n left: 13px;\\n color: rgba(255, 255, 255, 0.5);\\n -webkit-transition: all 0.25s ease;\\n transition: all 0.25s ease;\\n -webkit-backface-visibility: hidden;\\n pointer-events: none;\\n font-size: 22px;\\n}\\nlabel .req {\\n margin: 2px;\\n color: #1ab188;\\n}\\n\\nlabel.active {\\n -webkit-transform: translateY(50px);\\n transform: translateY(50px);\\n left: 2px;\\n font-size: 14px;\\n}\\nlabel.active .req {\\n opacity: 0;\\n}\\n\\nlabel.highlight {\\n color: #ffffff;\\n}\\n\\ninput, textarea {\\n font-size: 22px;\\n display: block;\\n width: 100%;\\n height: 100%;\\n padding: 5px 10px;\\n background: none;\\n background-image: none;\\n border: 1px solid #a0b3b0;\\n color: #ffffff;\\n border-radius: 0;\\n -webkit-transition: border-color .25s ease, -webkit-box-shadow .25s ease;\\n transition: border-color .25s ease, -webkit-box-shadow .25s ease;\\n transition: border-color .25s ease, box-shadow .25s ease;\\n transition: border-color .25s ease, box-shadow .25s ease, -webkit-box-shadow .25s ease;\\n}\\ninput:focus, textarea:focus {\\n outline: 0;\\n border-color: #1ab188;\\n}\\n\\ntextarea {\\n border: 2px solid #a0b3b0;\\n resize: vertical;\\n}\\n\\n.field-wrap {\\n position: relative;\\n margin-bottom: 40px;\\n}\\n\\n\\n.button {\\n border: 0;\\n outline: none;\\n border-radius: 0;\\n padding: 15px 0;\\n font-size: 2rem;\\n font-weight: 600;\\n text-transform: uppercase;\\n letter-spacing: .1em;\\n background: #1ab188;\\n color: #ffffff;\\n -webkit-transition: all 0.5s ease;\\n transition: all 0.5s ease;\\n -webkit-appearance: none;\\n}\\n.button:hover, .button:focus {\\n background: #179b77;\\n}\\n\\n.button-block {\\n display: block;\\n width: 100%;\\n}\\n\\n#qrcode{\\n display: block;\\n margin-left: auto;\\n margin-right: auto;\\n margin-bottom:30px;\\n}\u0026#34;,\u0026#34;x\u0026#34;:388,\u0026#34;y\u0026#34;:368,\u0026#34;wires\u0026#34;:[[\u0026#34;34959b26.2c0034\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;34959b26.2c0034\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http response\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:529,\u0026#34;y\u0026#34;:369,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;68603af5.adebf4\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;表示データ\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.paycoin = \\\u0026#34;JPY :\\\u0026#34;+msg.jpy + \\\u0026#34; \\\u0026#34; + msg.currency + \\\u0026#34; : \\\u0026#34;;\\nif(msg.currency == \\\u0026#34;mona\\\u0026#34;){\\n msg.paycoin += msg.payload.return.mona;\\n}else{\\n msg.paycoin += msg.payload.return.btc;\\n}\\nvar date = new Date( msg.payload.return.expired*1000 + 32400000 );\\nmsg.time = date.getFullYear() +\\\u0026#34;年\\\u0026#34;+(date.getMonth()+1)+\\\u0026#34;月\\\u0026#34;;\\nmsg.time += date.getDate()+\\\u0026#34;日 \\\u0026#34;+date.getHours()+\\\u0026#34;:\\\u0026#34;+date.getMinutes()+\\\u0026#34;:\\\u0026#34;+date.getSeconds();\\nmsg.id = msg.payload.return.invoiceId;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:768,\u0026#34;y\u0026#34;:168,\u0026#34;wires\u0026#34;:[[\u0026#34;52204357.90c9ac\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;1670bdc2.8675b2\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;debug\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;active\u0026#34;:true,\u0026#34;console\u0026#34;:\u0026#34;false\u0026#34;,\u0026#34;complete\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;x\u0026#34;:748,\u0026#34;y\u0026#34;:208,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;1c02b6e3.fc9989\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;TestData\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.payload.basecoin = \\\u0026#34;mona\\\u0026#34;;\\nmsg.payload.coin = 200;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:238,\u0026#34;y\u0026#34;:88,\u0026#34;wires\u0026#34;:[[\u0026#34;942f2d66.612c7\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;7be80c8f.e09434\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;switch\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;property\u0026#34;:\u0026#34;build_pay\u0026#34;,\u0026#34;propertyType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;rules\u0026#34;:[{\u0026#34;t\u0026#34;:\u0026#34;true\u0026#34;},{\u0026#34;t\u0026#34;:\u0026#34;else\u0026#34;}],\u0026#34;checkall\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;outputs\u0026#34;:2,\u0026#34;x\u0026#34;:548,\u0026#34;y\u0026#34;:88,\u0026#34;wires\u0026#34;:[[\u0026#34;ee685e0d.38462\u0026#34;],[\u0026#34;c0675801.ef7898\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;8335e3b4.14fd\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http request\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;現在の値段を取得\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;GET\u0026#34;,\u0026#34;ret\u0026#34;:\u0026#34;obj\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;tls\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:848,\u0026#34;y\u0026#34;:68,\u0026#34;wires\u0026#34;:[[\u0026#34;e792eaff.59b358\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;ee685e0d.38462\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;URL生成\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.url = \\\u0026#34;https://api.zaif.jp/api/1/last_price/\\\u0026#34; + msg.currency + \\\u0026#34;_jpy\\\u0026#34;;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:678,\u0026#34;y\u0026#34;:68,\u0026#34;wires\u0026#34;:[[\u0026#34;8335e3b4.14fd\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;e792eaff.59b358\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;データ整形\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.coin = (msg.coin/(msg.payload.last_price-80)).toFixed(8);\\nmsg.build = \\\u0026#34;\u0026amp;billingCurrency=\\\u0026#34;+msg.currency;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:1028,\u0026#34;y\u0026#34;:68,\u0026#34;wires\u0026#34;:[[\u0026#34;c0675801.ef7898\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;db289250.93edf\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;template\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;HTML\u0026#34;,\u0026#34;field\u0026#34;:\u0026#34;payload\u0026#34;,\u0026#34;fieldType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;html\u0026#34;,\u0026#34;syntax\u0026#34;:\u0026#34;mustache\u0026#34;,\u0026#34;template\u0026#34;:\u0026#34;\u0026lt;!DOCTYPE html\u0026gt;\\n\u0026lt;html lang=\\\u0026#34;jp\\\u0026#34;\u0026gt;\\n\u0026lt;head\u0026gt;\\n \u0026lt;meta charset=\\\u0026#34;UTF-8\\\u0026#34;\u0026gt;\\n \u0026lt;title\u0026gt;Monacoin \u0026amp; Bitcoin Payment Service\u0026lt;/title\u0026gt;\\n \u0026lt;link href=\u0026#39;https://fonts.googleapis.com/css?family=Titillium+Web:400,300,600\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt;\\n \u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; href=\\\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css\\\u0026#34;\u0026gt;\\n\\n \u0026lt;link rel=\\\u0026#34;stylesheet\\\u0026#34; href=\\\u0026#34;/coinstyle.css\\\u0026#34;\u0026gt;\\n\\n\u0026lt;/head\u0026gt;\\n\u0026lt;body\u0026gt;\\n \u0026lt;div class=\\\u0026#34;form\\\u0026#34;\u0026gt;\\n\\n \u0026lt;h1\u0026gt;Monacoin \u0026amp; Bitcoin Payment Service\u0026lt;/h1\u0026gt;\\n \u0026lt;h1\u0026gt;Error\u0026lt;/h1\u0026gt;\\n \u0026lt;h1\u0026gt;\u0026lt;a href=\\\u0026#34;/coin\\\u0026#34;\u0026gt;Back\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt;\\n \\n \u0026lt;/div\u0026gt;\\n\\n\u0026lt;/body\u0026gt;\\n\u0026lt;/html\u0026gt;\\n\u0026#34;,\u0026#34;x\u0026#34;:928,\u0026#34;y\u0026#34;:228,\u0026#34;wires\u0026#34;:[[\u0026#34;6797947a.87c71c\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;65921b1d.60fac4\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;delay\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;pauseType\u0026#34;:\u0026#34;delay\u0026#34;,\u0026#34;timeout\u0026#34;:\u0026#34;3\u0026#34;,\u0026#34;timeoutUnits\u0026#34;:\u0026#34;seconds\u0026#34;,\u0026#34;rate\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;nbRateUnits\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;rateUnits\u0026#34;:\u0026#34;second\u0026#34;,\u0026#34;randomFirst\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;randomLast\u0026#34;:\u0026#34;5\u0026#34;,\u0026#34;randomUnits\u0026#34;:\u0026#34;seconds\u0026#34;,\u0026#34;drop\u0026#34;:false,\u0026#34;x\u0026#34;:358,\u0026#34;y\u0026#34;:228,\u0026#34;wires\u0026#34;:[[\u0026#34;db289250.93edf\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;7d6c6ff5.f636b\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http in\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;/servicestate\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;post\u0026#34;,\u0026#34;swaggerDoc\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:168,\u0026#34;y\u0026#34;:502,\u0026#34;wires\u0026#34;:[[\u0026#34;b4bb6e91.8a5ca\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;3cc4abbc.9d2fe4\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http response\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:1248,\u0026#34;y\u0026#34;:542,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;5b72d5ce.e9b7ec\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http in\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;/jquery.periodicalupdater.js\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;get\u0026#34;,\u0026#34;swaggerDoc\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:208,\u0026#34;y\u0026#34;:428,\u0026#34;wires\u0026#34;:[[\u0026#34;b0d39f29.b1e11\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;b0d39f29.b1e11\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;template\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;JS\u0026#34;,\u0026#34;field\u0026#34;:\u0026#34;payload\u0026#34;,\u0026#34;fieldType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;format\u0026#34;:\u0026#34;css\u0026#34;,\u0026#34;syntax\u0026#34;:\u0026#34;plain\u0026#34;,\u0026#34;template\u0026#34;:\u0026#34;/**\\n* PeriodicalUpdater - jQuery plugin for timed, decaying ajax calls\\n*\\n* http://www.360innovate.co.uk/blog/2009/03/periodicalupdater-for-jquery/\\n* http://enfranchisedmind.com/blog/posts/jquery-periodicalupdater-ajax-polling/\\n*\\n* Copyright (c) 2009-2012 by the following:\\n* Frank White (http://customcode.info)\\n* Robert Fischer (http://smokejumperit.com)\\n* 360innovate (http://www.360innovate.co.uk)\\n*\\n* Dual licensed under the MIT and GPL licenses:\\n* http://www.opensource.org/licenses/mit-license.php\\n* http://www.gnu.org/licenses/gpl.html\\n*\\n*/\\n\\n(function ($) {\\n\\t\\t// The free version\\n\\t\\t$.PeriodicalUpdater = function(url, options, callback){\\n\\t\\t\\tif(!options) options = {};\\n\\t\\t\\tvar settings = jQuery.extend(true, {\\n\\t\\t\\t\\t\\turl: url,\\t\\t\\t\\t\\t// URL of ajax request\\n\\t\\t\\t\\t\\tcache: false,\\t\\t\\t// By default, don\u0026#39;t allow caching\\n\\t\\t\\t\\t\\tmethod: \u0026#39;GET\u0026#39;,\\t\\t// method; get or post\\n\\t\\t\\t\\t\\tdata: \u0026#39;\u0026#39;,\\t\\t\\t\\t\\t// array of values to be passed to the page - e.g. {name: \\\u0026#34;John\\\u0026#34;, greeting: \\\u0026#34;hello\\\u0026#34;}\\n\\t\\t\\t\\t\\tminTimeout: 1000, // starting value for the timeout in milliseconds\\n\\t\\t\\t\\t\\tmaxTimeout:64000, // maximum length of time between requests\\n\\t\\t\\t\\t\\tmultiplier: 2,\\t\\t// if set to 2, timerInterval will double each time the response hasn\u0026#39;t changed (up to maxTimeout)\\n\\t\\t\\t\\t\\tmaxCalls: 0,\\t\\t\\t// maximum number of calls. 0 = no limit.\\n maxCallsCallback: null, // The callback to execute when we reach our max number of calls\\n\\t\\t\\t\\t\\tautoStop: 0,\\t\\t\\t// automatically stop requests after this many returns of the same data. 0 = disabled\\n\\t\\t\\t\\t\\tautoStopCallback: null, // The callback to execute when we autoStop\\n\\t\\t\\t\\t\\tcookie: false,\\t\\t// whether (and how) to store a cookie\\n\\t\\t\\t\\t\\trunatonce: false, // Whether to fire initially or wait\\n\\t\\t\\t\\t\\tverbose: 0\\t\\t\\t\\t// The level to be logging at: 0 = none; 1 = some; 2 = all\\n\\t\\t\\t\\t}, options);\\n\\n\\t\\t\\tvar pu_log = function (msg, lvl) {\\n\\t\\t\\t\\tlvl = lvl || 1;\\n\\t\\t\\t\\tif(settings.verbose \u0026gt;= lvl) {\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\t\\tconsole.log(msg);\\n\\t\\t\\t\\t\\t} catch (err) { }\\n\\t\\t\\t\\t}\\n\\t\\t\\t};\\n\\n\\n\\t\\t\\t\\t// set some initial values, then begin\\n\\t\\t\\t\\tvar timer = null;\\n\\t\\t\\t\\tvar remoteData = null;\\n\\t\\t\\t\\tvar prevData = null;\\n\\t\\t\\t\\tvar timerInterval = settings.minTimeout;\\n\\t\\t\\t\\tvar maxCalls = settings.maxCalls;\\n\\t\\t\\t\\tvar autoStop = settings.autoStop;\\n\\t\\t\\t\\tvar calls = 0;\\n\\t\\t\\t\\tvar noChange = 0;\\n\\t\\t\\t\\tvar originalMaxCalls = maxCalls;\\n\\n\\t\\t\\t\\t// Function to reset the timer to a given time\\n\\t\\t\\t\\tvar reset_timer = function (interval) {\\n\\t\\t\\t\\t\\t$(function() { // Ensure we\u0026#39;re live\\n\\t\\t\\t\\t\\t\\tif (timer !== null) {\\n\\t\\t\\t\\t\\t\\t\\t\\tclearTimeout(timer);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttimerInterval = interval;\\n\\t\\t\\t\\t\\t\\tpu_log(\u0026#39;resetting timer to \u0026#39; + timerInterval + \u0026#39;.\u0026#39;, 2);\\n\\t\\t\\t\\t\\t\\tif(settings.cookie \u0026amp;\u0026amp; $.cookie) {\\n\\t\\t\\t\\t\\t\\t\\t$.cookie(settings.cookie.name, timerInterval, settings.cookie);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\ttimer = setTimeout(getdata, timerInterval);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// Function to boost the timer\\n\\t\\t\\t\\tvar boostPeriod = function () {\\n\\t\\t\\t\\t\\tif (settings.multiplier \u0026gt; 1) {\\n\\t\\t\\t\\t\\t\\tvar before = timerInterval;\\n\\t\\t\\t\\t\\t\\ttimerInterval = timerInterval * settings.multiplier;\\n\\n\\t\\t\\t\\t\\t\\tif (timerInterval \u0026gt; settings.maxTimeout) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttimerInterval = settings.maxTimeout;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tpu_log(\u0026#39;adjusting timer from \u0026#39; + before + \u0026#39; to \u0026#39; + timerInterval + \u0026#39;.\u0026#39;, 2);\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\treset_timer(timerInterval);\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// Handle the cookie config\\n\\t\\t\\t\\tif(settings.cookie) {\\n\\t\\t\\t\\t\\tif(typeof(settings.cookie) == \u0026#39;boolean\u0026#39;) {\\n\\t\\t\\t\\t\\t\\tsettings.cookie = {\\n\\t\\t\\t\\t\\t\\t\\tname: url\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t} else if(typeof(settings.cookie) != \u0026#39;object\u0026#39;) {\\n\\t\\t\\t\\t\\t\\tsettings.cookie = {\\n\\t\\t\\t\\t\\t\\t\\tname: settings.cookie.toString()\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif(!settings.cookie.name) {\\n\\t\\t\\t\\t\\t\\tsettings.cookie.name = url;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif(!$.cookie) {\\n\\t\\t\\t\\t\\t\\t$.getScript(\\\u0026#34;//rawgit.com/carhartl/jquery-cookie/master/jquery.cookie.js\\\u0026#34;, function() {\\n\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Loaded the cookies handler script\\\u0026#34;, 2);\\n\\t\\t\\t\\t\\t\\t\\tif($.cookie(settings.cookie.name)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Not runatonce and have cookie value\\\u0026#34;, 2);\\n\\t\\t\\t\\t\\t\\t\\t\\treset_timer($.cookie(settings.cookie.name));\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Not runatonce, but no cookie value\\\u0026#34;, 2);\\n\\t\\t\\t\\t\\t\\t\\t\\treset_timer(timerInterval);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}).fail(function() {\\n\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Could not load the cookies handler script\\\u0026#34;, 1);\\n\\t\\t\\t\\t\\t\\t\\treset_timer(timerInterval);\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\tif($.cookie(settings.cookie.name)) {\\n\\t\\t\\t\\t\\t\\t\\treset_timer($.cookie(settings.cookie.name));\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Construct the settings for $.ajax based on settings\\n\\t\\t\\t\\tvar ajaxSettings = jQuery.extend(true, {}, settings);\\n\\t\\t\\t\\tif (settings.type \u0026amp;\u0026amp; !ajaxSettings.dataType) { ajaxSettings.dataType = settings.type; }\\n\\t\\t\\t\\tif (settings.sendData) { ajaxSettings.data = settings.sendData; }\\n\\t\\t\\t\\tajaxSettings.type = settings.method; // \u0026#39;type\u0026#39; is used internally for jQuery. Who knew?\\n\\t\\t\\t\\tajaxSettings.ifModified = true;\\n\\n\\n\\t\\t\\t\\t// Create the function to get data\\n\\t\\t\\t\\tvar getdata = function(force) {\\n\\t\\t\\t\\t\\t\\tvar toSend = jQuery.extend(true, {}, ajaxSettings); // jQuery screws with what you pass in\\n\\t\\t\\t\\t\\t\\tif (typeof (options.data) == \u0026#39;function\u0026#39;) {\\n\\t\\t\\t\\t\\t\\t\\ttoSend.data = options.data();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (toSend.data) {\\n\\t\\t\\t\\t\\t\\t\\t// Handle transformations (only strings and objects are understood)\\n\\t\\t\\t\\t\\t\\t\\tif (typeof (toSend.data) == \\\u0026#34;number\\\u0026#34;) {\\n\\t\\t\\t\\t\\t\\t\\t\\ttoSend.data = toSend.data.toString();\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\tif (force || maxCalls === 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Sending data\\\u0026#34;);\\n\\t\\t\\t\\t\\t\\t\\t\\t$(function() { $.ajax(toSend); });\\n\\t\\t\\t\\t\\t\\t} else if (maxCalls \u0026gt; 0 \u0026amp;\u0026amp; calls \u0026lt; maxCalls) {\\n\\t\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Sending data because we are at \\\u0026#34; + calls\\t+ \\\u0026#34; of \\\u0026#34; + maxCalls + \\\u0026#34; calls\\\u0026#34;);\\n\\t\\t\\t\\t\\t\\t\\t\\t$(function() { $.ajax(toSend); });\\n\\t\\t\\t\\t\\t\\t\\t\\tcalls++;\\n\\t\\t\\t\\t\\t\\t} else if(maxCalls == -1) {\\n\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;NOT sending data: stop has been called\\\u0026#34;, 1);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;NOT sending data: maximum number of calls reached - \\\u0026#34; + maxCalls, 1);\\n if (settings.maxCallsCallback) { settings.maxCallsCallback(); }\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar handle = {\\n\\t\\t\\t\\t\\t\\tboostTimer: function(mag) {\\n\\t\\t\\t\\t\\t\\t\\tif(mag \u0026gt; 0 \u0026amp;\u0026amp; mag != 1) {\\n\\t\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Boosting timer by a factor of \\\u0026#34; + mag);\\n\\t\\t\\t\\t\\t\\t\\t\\ttimerInterval = timerInterval * mag;\\n\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Cannot boost timer by a factor of \\\u0026#34; + mag);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treset_timer(timerInterval);\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\trestart: function (newInterval) {\\n\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Calling restart\\\u0026#34;);\\n\\t\\t\\t\\t\\t\\t\\tmaxCalls = originalMaxCalls;\\n\\t\\t\\t\\t\\t\\t\\tcalls = 0;\\n\\t\\t\\t\\t\\t\\t\\tnoChange = 0;\\n\\t\\t\\t\\t\\t\\t\\treset_timer(newInterval || timerInterval);\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\tsend: function() {\\n\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Explicit call to send\\\u0026#34;);\\n\\t\\t\\t\\t\\t\\t\\tgetdata(true);\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\tstop: function () {\\n\\t\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Calling stop\\\u0026#34;);\\n\\t\\t\\t\\t\\t\\t\\tmaxCalls = -1;\\n\\t\\t\\t\\t\\t\\t\\tif(settings.cookie \u0026amp;\u0026amp; $.cookie) {\\n\\t\\t\\t\\t\\t\\t\\t\\t$.cookie(settings.cookie.name, null, settings.cookie);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// Implement the tricky comparison logic\\n\\t\\t\\t\\tajaxSettings.success = function (data) {\\n\\t\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Successful run! (In \u0026#39;success\u0026#39;)\\\u0026#34;, 2);\\n\\t\\t\\t\\t\\t\\tremoteData = data;\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tajaxSettings.complete = function (xhr, success) {\\n\\t\\t\\t\\t\\t\\t pu_log(\\\u0026#34;Status of call: \\\u0026#34; + success + \\\u0026#34; (In \u0026#39;complete\u0026#39;)\\\u0026#34;, 2);\\n\\t\\t\\t\\t\\t\\tif (success == \\\u0026#34;success\\\u0026#34; || success == \\\u0026#34;notmodified\\\u0026#34;) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar rawData = $.trim(xhr.responseText);\\n\\t\\t\\t\\t\\t\\t\\t\\tif (prevData == rawData) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (autoStop \u0026gt; 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnoChange++;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (noChange == autoStop) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\thandle.stop();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (settings.autoStopCallback) { settings.autoStopCallback(noChange); }\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tboostPeriod();\\n\\t\\t\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnoChange = 0;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\treset_timer(settings.minTimeout);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tprevData = rawData;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (settings.cookie) $.cookie(settings.cookie.name, prevData, settings.cookie);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (remoteData === null) { remoteData = rawData; }\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// jQuery 1.4+ $.ajax() automatically converts \\\u0026#34;data\\\u0026#34; into a JS Object for \\\u0026#34;type:json\\\u0026#34; requests now\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// For compatibility with 1.4+ and pre1.4 jQuery only try to parse actual strings, skip when remoteData is already an Object\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif ((ajaxSettings.dataType === \u0026#39;json\u0026#39;) \u0026amp;\u0026amp; (typeof (remoteData) === \u0026#39;string\u0026#39;) \u0026amp;\u0026amp; (success == \\\u0026#34;success\\\u0026#34;)) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tremoteData = JSON.parse(remoteData);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (settings.success) { settings.success(remoteData, success, xhr, handle); }\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tif (callback) { callback(remoteData, success, xhr, handle); }\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tif (settings.complete) { settings.complete(xhr, success); }\\n\\t\\t\\t\\t\\t\\tremoteData = null;\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tajaxSettings.error = function (xhr, textStatus) {\\n\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Error message: \\\u0026#34; + textStatus + \\\u0026#34; (In \u0026#39;error\u0026#39;)\\\u0026#34;, 2);\\n\\t\\t\\t\\t\\tif(textStatus != \\\u0026#34;notmodified\\\u0026#34;) {\\n\\t\\t\\t\\t\\t\\tprevData = null;\\n\\t\\t\\t\\t\\t\\tif(settings.cookie) $.cookie(settings.cookie.name, null, settings.cookie);\\n\\t\\t\\t\\t\\t\\treset_timer(settings.minTimeout);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif(settings.error) { settings.error(xhr, textStatus); }\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\t// Make the first call\\n\\t\\t\\t\\tif (settings.runatonce) {\\n\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Executing a call immediately\\\u0026#34;, 1);\\n\\t\\t\\t\\t\\tgetdata(true);\\n\\t\\t\\t\\t} else if($.cookie \u0026amp;\u0026amp; settings.cookie \u0026amp;\u0026amp; $.cookie(settings.cookie.name)) {\\n\\t\\t\\t\\t\\t// Do nothing (already handled above)\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tpu_log(\\\u0026#34;Enqueing a the call for after \\\u0026#34; + timerInterval, 1);\\n\\t\\t\\t\\t\\treset_timer(timerInterval);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn handle;\\n\\t\\t};\\n\\n\\t\\t// The bound version\\n\\t\\t$.fn.PeriodicalUpdater = function(url, options, callback) {\\n\\t\\t\\tvar me = this;\\n\\t\\t\\treturn $.PeriodicalUpdater(url, options, function() {\\n\\t\\t\\t\\treturn callback.apply(me, arguments);\\n\\t\\t\\t});\\n\\t\\t};\\n})(jQuery);\u0026#34;,\u0026#34;x\u0026#34;:468,\u0026#34;y\u0026#34;:428,\u0026#34;wires\u0026#34;:[[\u0026#34;c27a751.35faf88\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;c27a751.35faf88\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http response\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:608,\u0026#34;y\u0026#34;:428,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;b4bb6e91.8a5ca\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;switch\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;property\u0026#34;:\u0026#34;payload.id\u0026#34;,\u0026#34;propertyType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;rules\u0026#34;:[{\u0026#34;t\u0026#34;:\u0026#34;nnull\u0026#34;},{\u0026#34;t\u0026#34;:\u0026#34;else\u0026#34;}],\u0026#34;checkall\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;outputs\u0026#34;:2,\u0026#34;x\u0026#34;:408,\u0026#34;y\u0026#34;:502,\u0026#34;wires\u0026#34;:[[\u0026#34;f4590fbb.f1a05\u0026#34;],[\u0026#34;4cf4374d.2cb008\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;4cf4374d.2cb008\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;error\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.payload = \\\u0026#34;Payment Error\\\u0026#34;;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:1248,\u0026#34;y\u0026#34;:502,\u0026#34;wires\u0026#34;:[[\u0026#34;3cc4abbc.9d2fe4\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;f4590fbb.f1a05\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;APIKey設定\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.key = \\\u0026#34;\\\u0026#34;;\\nmsg.secret = \\\u0026#34;\\\u0026#34;;\\nmsg.id = msg.payload.id;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:588,\u0026#34;y\u0026#34;:482,\u0026#34;wires\u0026#34;:[[\u0026#34;70d07c8e.c69374\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;70d07c8e.c69374\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;RequestMessage\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.header = \\\u0026#34;content-type:application/x-www-form-urlencoded\\\u0026#34;;\\nmsg.payload = \\\u0026#34;method=getInvoice\u0026amp;key=\\\u0026#34; + msg.key + \\\u0026#34;\u0026amp;md5secret=\\\u0026#34; + msg.secret + \\\u0026#34;\u0026amp;nonce=\\\u0026#34; + Date.now()*0.00000001 + \\\u0026#34;\u0026amp;invoiceId=\\\u0026#34; + msg.id;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:768,\u0026#34;y\u0026#34;:482,\u0026#34;wires\u0026#34;:[[\u0026#34;5980cdc0.a8b044\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;5980cdc0.a8b044\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;http request\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;POST\u0026#34;,\u0026#34;ret\u0026#34;:\u0026#34;obj\u0026#34;,\u0026#34;url\u0026#34;:\u0026#34;https://api.zaif.jp/ecapi\u0026#34;,\u0026#34;tls\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;x\u0026#34;:948,\u0026#34;y\u0026#34;:482,\u0026#34;wires\u0026#34;:[[\u0026#34;12eee5e5.e0da9a\u0026#34;,\u0026#34;b0859b03.d9b5c8\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;12eee5e5.e0da9a\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;switch\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;property\u0026#34;:\u0026#34;payload.success\u0026#34;,\u0026#34;propertyType\u0026#34;:\u0026#34;msg\u0026#34;,\u0026#34;rules\u0026#34;:[{\u0026#34;t\u0026#34;:\u0026#34;eq\u0026#34;,\u0026#34;v\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;vt\u0026#34;:\u0026#34;str\u0026#34;},{\u0026#34;t\u0026#34;:\u0026#34;eq\u0026#34;,\u0026#34;v\u0026#34;:\u0026#34;0\u0026#34;,\u0026#34;vt\u0026#34;:\u0026#34;str\u0026#34;}],\u0026#34;checkall\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;outputs\u0026#34;:2,\u0026#34;x\u0026#34;:1128,\u0026#34;y\u0026#34;:482,\u0026#34;wires\u0026#34;:[[\u0026#34;430dc717.1624e8\u0026#34;],[\u0026#34;4cf4374d.2cb008\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;430dc717.1624e8\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;function\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;success\u0026#34;,\u0026#34;func\u0026#34;:\u0026#34;msg.payload = msg.payload.return.status;\\nreturn msg;\u0026#34;,\u0026#34;outputs\u0026#34;:1,\u0026#34;noerr\u0026#34;:0,\u0026#34;x\u0026#34;:1258,\u0026#34;y\u0026#34;:462,\u0026#34;wires\u0026#34;:[[\u0026#34;3cc4abbc.9d2fe4\u0026#34;]]},{\u0026#34;id\u0026#34;:\u0026#34;b0859b03.d9b5c8\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;debug\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;c9e25c06.c8c0e\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;active\u0026#34;:true,\u0026#34;console\u0026#34;:\u0026#34;false\u0026#34;,\u0026#34;complete\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;x\u0026#34;:1088,\u0026#34;y\u0026#34;:542,\u0026#34;wires\u0026#34;:[]},{\u0026#34;id\u0026#34;:\u0026#34;e55e7d60.78615\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;tls-config\u0026#34;,\u0026#34;z\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;cert\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;key\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;ca\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;verifyservercert\u0026#34;:true}] 全体フロー 上のフローがロジックの部分になります。 下の部分がHTMLの表示部分となります。\n設定をしよう ZaifのAPIを取得してから、Node-Redの設定をします。\nZaifのAPIを取得する アカウント設定から各種サービス→開発者向けAPIからAPIを発行します。\npermsはなにも選択しないで大丈夫です。\n keyはそのままで大丈夫です。 secretをmd5で変換します。   md5変換はこちら 上のサイトに先ほどのsecretKeyを入力し、変換させます。\n keyとsecretをNode-Redに設定します。\nNode-Redの設定をする このようにNode-Redが正常に起動したら、さきほどのサンプルコードを写真の手順で読み込ませます。 無事に読み込ませられると上の全体フローと同じような画面になると思います。\nそれでは実際に動かすためにAPIの設定を行います。 APIKey設定のノードを選択し、必要な情報を設定します。\nmsg.keyにzaifのkeyを入力します。 msg.secretにmd5化したzaifのsecretを入力してください。\nmsg.build_pay = true;をいれると仮想通貨のまま受け取るようにできます。\n今の写真のコードだと、モナコインのみモナコインで送金されるようになっています。 必要な情報の入力が終わったら右上にあるデプロイボタンを押しておきましょう！\nこれで準備は完了です！！\nNode-Redの解説 ついでにNode-Redのコードを紹介します。\nZaif PaymentのAPIを見て仮想通貨→円で受け取るのは簡単にできるのですが、仮想通貨→仮想通貨でちょっと問題が発生しました。\nまずZaifのAPIを確認するとこのようになっています。\n amount\tYes\t決済金額（日本円）。実際の請求対象金額。1円単位、カンマ無し\n 仮想通貨で受け取る方法は先ほどのページの一番下にしれっと書かれています。\n Bitcoin建てまたはMonacoin建ての決済 円建てではなく、Bitcoin建てまたはMonacoin建てでの決済を行うことができます。 createInvoiceのbillingCurrencyパラメータ（一覧にはないパラメータです）に”btc”または”mona”を指定して下さい。このときcurrencyパラメータも同じ暗号通貨を指定する必要があります。 返り値からrateは削除されることに注意してください。 BTCまたはMONAがそのまま決済事業者様のアカウントに精算されますので、決済手数料は完全にゼロ％になりますが、円換算を行う際の相場の変動リスクはそのまま決済事業者様が担うことになりますことにご注意ください。\n 仮想通貨のまま受け取るようにすると本当であればAPIでamountに100円ビットコイン建てで指定した場合、0.000062btcとなるのが正しいと個人的に思うのですがZaifのAPIでは100btcの請求がされてしまいます。(このあたり本来の仕様がどちらなのか気になる)\nなのでmsg.build_pay = true;を入れた場合に限り今のzaifのレートを公開API取得してきて決済金額を計算するようにしています。\nそのフローは下の流れを見てみてください。\nつぎにAPIを叩くための内容を作成し、それを表示するようにします。 表示データを作成する工程では、タイムアウトの時刻をHTMLで表示できるようにしたり、値段の表記を調整したりしています。\n応答がなかった時のために3秒後にエラーだと表示するようになっています。 ちゃんとエラー管理するべきなのですが、とりあえずシンプルに作ってあります。\n実際につかってみる IBM cloudであればNode-Redを設定するとhttps://【設定した名前】.mybluemix.net/red というアドレスが生成されます。 そのアドレスを少し編集して/red→/coin　と変更してみましょう。 こんなアドレスになるはず　https://【設定した名前】.mybluemix.net/coinにアクセスするとこんなページが表示されるはずです。\njsがうまく動かないとエラーが起こることがあるので注意\nちゃんと動いていれば、ビットコインを選んだり、モナコインを選んだりすることができます。 支払いたい方の通貨を選んだら送金したい金額を選択します。\n今回は100円で「pay」をクリックして支払ってみましょう。\nAPIの設定がきちんとできている場合、QRコードが表示されます。 タイムアウトの時間もあるのでそれ以内に支払うようにしてください。 せっかくなのでこのQRコードをスマートフォンに見せて支払おうと思います。\n今回はAndroidにCoinomiという仮想通貨ウォレットをインストールして、そこから送金してみようと思います。\nインストール↓\n\nZaifのアプリからでもできそうですが、試していません。 試した方がいたらこちらにコメントしてもらえれば幸いです！ あと他のアプリでも動いたというのも大歓迎です。\nインストールして初期設定が終わったら、上のQRコードのロゴを選択してQRコードを読み込みモードにさせます。\nQRコードを読み込むモードになると画面が切り替わます。 枠内にQRコードがはいるように読み込ませると次の画面に進みます。\nQRコードが読めるとQRコードに書かれているアドレスと金額が自動的に入力されます。 地味にアプリ内のレートとzaifのレートが異なるのでちょっと金額差が出ますが、構わず送りましょう！ 初めに設定したパスワードを入力後送金されます。\nこれで無事に仮想通貨を送ることができました！\n決済情報表示対応版 決済情報表示対応版では下の方ににStateという表示を追加しました。 State : new はQRコードを生成した直後に表示され決済されるまで表示されます。\n上のアプリなどで決済が完了した場合、すぐにState : paidに切り替わり、QRコードの表示が削除され入金チェックが入ります。 ちゃんと決済のトランザクションが承認されるとしたの表記になり、決済完了となります。\nこの表示になるまで少々時間がかかります。ZaifのAPIを確認するとこのように書かれています。\n bitcoinで平均10分、monacoinで平均2分程度\n 体感時間でもその程度になっているので大体その通りなのかなと思います。\n決済情報表示対応版ここまで\n念のためZaifの設定画面をみるとstatusが着金になっているのがわかります。 大体翌日ぐらいには自分の手元に送られた仮想通貨をZaifからうけとることができます！\nまとめ Node-Redをつかってなるべく簡単に仮想通貨決済システムを作ってみました。ぜひつかってみてください。\nほんとは支払いが完了したのを受け取ってWeb画面で支払い完了表示までやりたかったのですが時間がなくて間に合いませんでした。 もし試した方がいればそれを教えていただけるとうれしいです！\n個人的にはモナコイン押しなのでこういう形でもっと使えるところが増えたらいいなぁと思っています。\n気に入ったら投げ銭してくれてもいいんですよ？\nここまで読んでいただいてありがとうございました！！\n追記 コールバックについて 上の作例では決済完了時にコールバック処理が行われていません。(記事を早く公開したかった…(´・ω・｀)) そのあたりの紹介を行います。\nZaif PaymentのAPIをみると\nこのあたりの設定をするとよさそうなのがわかります。\n  { \u0026#34;success\u0026#34;: 1, \u0026#34;return\u0026#34;: { \u0026#34;invoiceId\u0026#34;: \u0026#34;d0e521f5-287a-4d24-95d2-ec83a00ce173\u0026#34;, \u0026#34;invoiceUri\u0026#34;: \u0026#34;https://zaif.jp/invoice/form/d0e521f5-287a-4d24-95d2-ec83a00ce173\u0026#34;, \u0026#34;invoiceIframeUri\u0026#34;: \u0026#34;https://zaif.jp/invoice/iframe/d0e521f5-287a-4d24-95d2-ec83a00ce173\u0026#34;, \u0026#34;created\u0026#34;: 1434696670, \u0026#34;expired\u0026#34;: 1434698470, \u0026#34;amount\u0026#34;: 10000, \u0026#34;currency\u0026#34;: \u0026#34;mona\u0026#34;, \u0026#34;rate\u0026#34;: \u0026#34;20.0000\u0026#34;, \u0026#34;mona\u0026#34;: \u0026#34;500.000000\u0026#34;, \u0026#34;address\u0026#34;: \u0026#34;M81ZgKgg16GCQ9a9dGzrtnSWma3dB15HDw\u0026#34;, \u0026#34;BIP21\u0026#34;: \u0026#34;monacoin:M81ZgKgg16GCQ9a9dGzrtnSWma3dB15HDw?amount=500.000000\u0026#34;, \u0026#34;speed\u0026#34;: \u0026#34;medium\u0026#34;, \u0026#34;orderNumber\u0026#34;: \u0026#34;\u0026lt;the order number if you sent\u0026gt;\u0026#34; } } APIにも書いてありますが、こちらの入金フォームを開くとコールバックされるっぽいです。 \u0026quot;invoiceUri\u0026quot;: \u0026quot;https://zaif.jp/invoice/form/d0e521f5-287a-4d24-95d2-ec83a00ce173\u0026quot;, このあたり早めに検証します。\n決済情報表示について 決済情報を表示するためにコードを追加しました。\nユーザが表示しているHTMLから３秒ごとにリクエストがかかり、決済状態をZaifのAPIを叩くような機能を追加しました。\n 公式サイト getInvoice 叩いているAPI情報\n 公式の決済ページも定期的に通信をしていたので同じような仕組みなのではないのかなと思います。\nAPIからの情報で必要な情報のみ転送するようになっています。 これで決済システムとしては最低限必要な機能が付いたのではないでしょうか？\n",
    "ref": "/blog/2019-11-27-zaif/"
  },{
    "title": "Nefryいろんなウラの話",
    "date": "2017-12-25",
    "description": "Nefryというボードがどのように生まれ、どのように成長していったのかまとめたものになります",
    "body": " 2020/7/4 追記\n  　2年前に書いた記事を振り返ってみると、実際に実現できたことも多々あって、やってこれてほんとによかったなと思います。\n  　現在、他のESP32ボードに押されてしまっていますがこういった情報の蓄積は非常に強みであり、支えていただいた皆さんには感謝の気持ちでいっぱいです。ありがとうございました。\n Nefry AdventCalendar最終日の担当のわみです！\nまずは今日までNefry Advent Calendarを書いてくれた皆さんに感謝です！！はじめのころはちゃんと埋まるのか不安ですがみなさんのおかげで今日まで無事にこれてホントにうれしい気持ちでいっぱいです！\n最終日のテーマとして、Nefryの作者から見たNefryの過去と未来の夢の話をしようと思います。ぜひご覧ください！\nNefryの過去話 Nefryの過去話として、作ったNefryの遍歴をぱぱっとまとめてみようと思います。\nNefry誕生 Nefryは2015年8月9日に開催されたJS Board Shibuyaというイベントをきっかけに知り合ったMilkcocoaの中の人である川野さん、平間さん、落合さんとの会話から\n ESP8266を簡単に触れるボードがほしい\n というこの一言から生まれました。\n一番初期に作られたNefryの原型となるものです。\nこの時はジャンパーワイヤで切り替えをしないと書き込みができないものでしたが、これでもあの当時はそれなりに便利に使えるボードでした。 switch-scienceさんのEsprシリーズすらなかった時代でした。\nまだNefryという名前すらついてないですねｗ\nNefry (v1) このあと第2号として先ほどボードの改良版として今のNefry v2に近い形のNefry(v1)?を2015年11月ごろに作成しました。 このころのバージョンはフリスクケースを改造したケースが付属していました。結構量産が大変でフリスクを山のように食べていた思い出がありますね。\nこのバージョンは60個程度つくってイベントなどで販売していました。無事に全数捌けたのがうれしかったですね。\nこの時は今まで続くシリーズになるのかどうなのか確定していなくてフワフワしていたように思います。\nこのころは写真に写っているMilkcocoaとどうやっていこうかと模索していたように思います。 全部私が手で半田付けとかしていたのでなかなか大変でしたね。 あとこのころにのびさんと出会ってLIGブログで記事を書くことになりましたね。そう思うとこのタイミングが今に至る転換点だったように思います。\nNefry v2 2016年7月にNefry(v1)の改良版としてNefry v2を作成しました。 このころから中国に量産をかけるようになりました。MDFのケースが付属するようになったのもこのタイミングからですね。\nこのタイミングでのびさんがLIGから独立してdotstudioになったのもこのタイミングに近いですね。 dotstudioになってからネット販売が増え、累計で150台程度販売されました。\n販売してから反省したのですが、シリアル変換を搭載すればよかったと思ってますｗ\nこのタイミングから徐々にコミュニティが生まれ始めたのかなと思います。\nNefry BT 2017年5月にクラウドファンディングをした、Nefry BTです。\ndotstudioと共同で開発、販売を行いました。これがたった３時間足らずで目標金額を達成することになるとは思いませんでした。 みなさんに支援していただけてホントによかったです。\nFacebookグループなどで最近書き込みが多くコミュニティが発展しているのはホントにうれしいです！！\n予想以上の売れ行きで現在在庫切れで申し訳ないです…(´・ω・｀)\n次のロットを量産しているので少々お待ちください！！\nNefryの未来の夢 これまででNefryの過去話をしました。 ちょっとこれから私の思い浮かべる未来の夢のお話をしようかと思います。\n今のところのNefryは累計出荷台数をまとめてみました。\n   Year Nefryシリーズ合計出荷台数     2015 30   2016 100   2017 350   2018 400   2019 200     2019年までのものを追記\n そのためにもいろんなことができるようにサポートしていきたいと思います！\nNefryクラウド Nefryクラウド(仮)をつくってみたで軽く紹介しましたが、Nefryクラウドなるものを拡張して、jsや多言語のライブラリからNefryのデータを取得したり、Nefryにデータを送ったりできる環境があるといいなと思っています。\n最近クラウドファンディングでみたobnizというデバイスで目標としていることと同じことができて支援者が集まっているのをみると、ある程度需要はあるのではと思っています。\n教育分野への進出 BlocklyDuinoなどのビジュアルプログラミングでNefryのプログラミングができるようになったらいいなと思っています。 そこまで簡単じゃなくてもドキュメントの整備をして入門することを簡単にして、**「 IoTをするならNefry♪ 」**という世界にしたいです。\nBLE対応 Nefry BTでのBLEの対応は十分ではないので、その対応をしたいと思っています。 その対応に合わせて今のNefryのWebページからできるWiFi設定やモジュールの設定をBLEで設定できるようにしたいと思っています。\nWeb Bluetoothをつかってそのあたりのサポートができれば十分かなと思っています。\n本とか 単行本みたいな形でセンサの使いかたやNefryの深い話とかできたらいいな\n+コミュニティでセンサを使ったことをまとめられるところがあるといいなぁ\n#まとめ\n今のNefryはまだまだ成長途中ので皆さんぜひ支援していただけると幸いです！ Nefryライブラリはオープンソースとなっているのでぜひ皆さんのコミットをお待ちしています。\n例：NefryBTのファームウェアを自分用に改造して動かそう\nFacebookグループもありますのでNefryに興味があればぜひご参加ください！\n学生のころからいままで支援してくれた皆様に感謝＆これからもぜひ支援していただけると幸いです！ここまで読んでいただいてありがとうございます。\n",
    "ref": "/blog/2017-12-25-nefry_talk/"
  },{
    "title": "SSD1306で画像表示の簡易まとめ",
    "date": "2017-06-11",
    "description": "SSD1306の画像表示の簡易まとめ",
    "body": "XBMというフォーマットに合わせて作成する。\n具体的な方法 https://blog.squix.org/2015/05/esp8266-nodemcu-how-to-create-xbm.html\n変換サイト https://www.online-utility.org/image/convert/to/XBM\n",
    "ref": "/blog/2017-06-11-ssd1306-image/"
  },{
    "title": "UniboとIFTTTで簡単にIoTしてみる",
    "date": "2017-05-11",
    "description": "UniboとIFTTTで簡単にIoTしてみる",
    "body": "IFTTTは（イフト）TwitterやFacebook、SlackなどのWebサービス同士を組み合わせて簡単に連携できるサービスです。\n今回はそのIFTTTとUniboをつなげてUniboからSlackやTwitterなどにメッセージを送信する仕組みについて説明します。\n#全体図\n[{\u0026quot;id\u0026quot;:\u0026quot;1a22c6251f.020e3a\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;tab\u0026quot;,\u0026quot;label\u0026quot;:\u0026quot;IFTTT\u0026quot;},{\u0026quot;id\u0026quot;:\u0026quot;1ad734c9dd.af1808\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;http request\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a22c6251f.020e3a\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;IFTTTにアクセス\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;GET\u0026quot;,\u0026quot;ret\u0026quot;:\u0026quot;txt\u0026quot;,\u0026quot;url\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;tls\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;x\u0026quot;:586,\u0026quot;y\u0026quot;:440,\u0026quot;wires\u0026quot;:[[\u0026quot;1a70e6eb3f.c26754\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1ad02e9d78.efebc\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;speech\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a22c6251f.020e3a\u0026quot;,\u0026quot;word\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;subtitle\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;edit\u0026quot;:false,\u0026quot;language\u0026quot;:\u0026quot;jp\u0026quot;,\u0026quot;voice\u0026quot;:\u0026quot;yuuto\u0026quot;,\u0026quot;version\u0026quot;:1,\u0026quot;x\u0026quot;:987,\u0026quot;y\u0026quot;:440,\u0026quot;wires\u0026quot;:[[]]},{\u0026quot;id\u0026quot;:\u0026quot;1a70e6eb3f.c26754\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a22c6251f.020e3a\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;発話のためにコピー\u0026quot;,\u0026quot;edit\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;func\u0026quot;:\u0026quot;msg.word = msg.subtitle = msg.payload;\\nreturn msg;\u0026quot;,\u0026quot;outputs\u0026quot;:1,\u0026quot;dummy\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;noerr\u0026quot;:0,\u0026quot;x\u0026quot;:805,\u0026quot;y\u0026quot;:440,\u0026quot;wires\u0026quot;:[[\u0026quot;1ad02e9d78.efebc\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a8a30f02a.12783\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;inject\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a22c6251f.020e3a\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;topic\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;payload\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;payloadType\u0026quot;:\u0026quot;date\u0026quot;,\u0026quot;repeat\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;crontab\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;once\u0026quot;:false,\u0026quot;x\u0026quot;:390,\u0026quot;y\u0026quot;:440,\u0026quot;wires\u0026quot;:[[\u0026quot;1ad734c9dd.af1808\u0026quot;]]}] #手順\nIFTTTの登録についてはこちらの記事をご覧ください。\n Webサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた\n 登録ができたところで、実際に連携させてみようと思います。\nIFTTTでシナリオを作成してみる IFTTTでUniboとLineをつなげるレシピと呼ばれるシナリオを作成していきます。 上のリンクをクリックして作成していきましょう。\nまずはMakerWebhooksをトリガーにするため”make”と検索欄に入力します。 MakerWebhooksがあればそれをクリックします。\nMakerWebhooksはEvent単位でトリガーがかかります。今回はEventNameに\u0026quot;Unibo\u0026quot;と入力し”Create trigger”をクリックし作成していきます。 今入力したEventNameはあとでUniboに入力するのでSecretKeyと合わせて覚えておきましょう。\n次にトリガーが起こった時にしたい動作を選択します。 IFTTTの検索欄でLineを検索し、連携させていきます。 ちなみに、このときにTwitterやGmailなどを選択するとそれと連携させることが出来ます。\nRecipientと書かれた欄にメッセージを送るLineのグループを選択します。 Messageと書かれた欄に送信するメッセージを入力を入力します。Value1、Value2などがありプログラムから値を渡すことができます。これを使えば温度センサや明るさセンサーの値をプログラムから渡しメッセージに組み込むことが可能です。 オプションですが写真のURLさえあれば、Lineに写真を投稿することができます。\nCreate actionをクリックしてメッセージを保存します。\n最後にFinishを押し、作成を完了します。\nこちらのリンクをクリックしDocumentationのリンクをクリックします。\nクリックするとこのような画面に移動します。\nこのときに表示される赤枠のURLをUniboにコピーします。\nUniboの準備をする Uniboのスキルクリエイターに移動し、全体図の章で見せたJSONの文字列をスキルクリエイターにインポートしてください。\nインポートが終わったら先ほどIFTTTで取得したURLを張り付けていきます。 http request Nodeをクリックし、赤枠の入力欄に先ほどのURLを貼り付けていきます。この時にURL中央部にある{event}は先ほどIFTTTに登録したイベント名に変えておきましょう。 記事の通りに作成している場合はUniboになります。\n入力できたら完了を押し作成を完了します。\nこれでDeployを押し、タイムスタンプのボタンを押せばLineにメッセージが飛ぶような仕組みが完成しました！ 余談ですが、functionNodeでhttp request Nodeの応答をUniboでしゃべらすためにメッセージ内容をコピーする処理をいれることでレスポンスをしゃべらすことができるようになります。\n",
    "ref": "/blog/2017-05-11-unibo_ifttt/"
  },{
    "title": "UniboでAzure IoTHubと連携させてみる",
    "date": "2017-05-10",
    "description": "UniboでAzure IoTHubと連携させてみる",
    "body": "AzureIoTHubでメッセージを送受信してみる。 Azure IoTHubとUniboのメッセージをやりとりしてみましょう。\n##全体図\n[{\u0026quot;id\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;tab\u0026quot;,\u0026quot;label\u0026quot;:\u0026quot;iothub\u0026quot;},{\u0026quot;id\u0026quot;:\u0026quot;1adc54aae1.2cb078\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;inject\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;開始\u0026quot;,\u0026quot;topic\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;payload\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;payloadType\u0026quot;:\u0026quot;date\u0026quot;,\u0026quot;repeat\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;crontab\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;once\u0026quot;:false,\u0026quot;x\u0026quot;:320,\u0026quot;y\u0026quot;:324.888916015625,\u0026quot;wires\u0026quot;:[[\u0026quot;1a50458b29.daf934\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a5b568748.b15d28\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;azureiothub\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;Azure IoT Hub\u0026quot;,\u0026quot;protocol\u0026quot;:\u0026quot;mqtt\u0026quot;,\u0026quot;x\u0026quot;:958.1041870117188,\u0026quot;y\u0026quot;:325,\u0026quot;wires\u0026quot;:[[\u0026quot;1a452ce6f4.4d1838\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a6872e007.3f029\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;template\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;Azure IoTHubに接続情報\u0026quot;,\u0026quot;field\u0026quot;:\u0026quot;payload\u0026quot;,\u0026quot;fieldType\u0026quot;:\u0026quot;msg\u0026quot;,\u0026quot;format\u0026quot;:\u0026quot;json\u0026quot;,\u0026quot;syntax\u0026quot;:\u0026quot;mustache\u0026quot;,\u0026quot;template\u0026quot;:\u0026quot;{\\n \\\u0026quot;deviceId\\\u0026quot;: \\\u0026quot;unibo\\\u0026quot;,\\n \\\u0026quot;key\\\u0026quot;: \\\u0026quot;SharedAccessKey=以下のものを貼る\\\u0026quot;,\\n \\\u0026quot;protocol\\\u0026quot;: \\\u0026quot;mqtt\\\u0026quot;,\\n \\\u0026quot;data\\\u0026quot;: \\\u0026quot;{value1: 0, value2: \\\\\\\u0026quot;test\\\\\\\u0026quot;}\\\u0026quot;\\n}\u0026quot;,\u0026quot;x\u0026quot;:718.1041870117188,\u0026quot;y\u0026quot;:325,\u0026quot;wires\u0026quot;:[[\u0026quot;1a5b568748.b15d28\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1ad307ac75.70343\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;motion\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;target\u0026quot;:\u0026quot;other\u0026quot;,\u0026quot;motion\u0026quot;:\u0026quot;happy\u0026quot;,\u0026quot;x\u0026quot;:1042.1041870117188,\u0026quot;y\u0026quot;:561,\u0026quot;wires\u0026quot;:[[]]},{\u0026quot;id\u0026quot;:\u0026quot;1a9501606e.fe849\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;debug\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;active\u0026quot;:true,\u0026quot;console\u0026quot;:\u0026quot;false\u0026quot;,\u0026quot;complete\u0026quot;:\u0026quot;payload\u0026quot;,\u0026quot;x\u0026quot;:747.1041870117188,\u0026quot;y\u0026quot;:432,\u0026quot;wires\u0026quot;:[]},{\u0026quot;id\u0026quot;:\u0026quot;1a50458b29.daf934\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;led\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;color\u0026quot;:\u0026quot;black\u0026quot;,\u0026quot;version\u0026quot;:1,\u0026quot;x\u0026quot;:499.10418701171875,\u0026quot;y\u0026quot;:325,\u0026quot;wires\u0026quot;:[[\u0026quot;1a6872e007.3f029\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a452ce6f4.4d1838\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;function\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;データ整形\u0026quot;,\u0026quot;edit\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;func\u0026quot;:\u0026quot;msg.payload = msg.payload.toString();\\nreturn msg;\u0026quot;,\u0026quot;outputs\u0026quot;:1,\u0026quot;dummy\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;noerr\u0026quot;:0,\u0026quot;x\u0026quot;:336.10418701171875,\u0026quot;y\u0026quot;:485,\u0026quot;wires\u0026quot;:[[\u0026quot;1a513c662f.d3f0a8\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a513c662f.d3f0a8\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;switch\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;送受信分岐\u0026quot;,\u0026quot;property\u0026quot;:\u0026quot;payload\u0026quot;,\u0026quot;propertyType\u0026quot;:\u0026quot;msg\u0026quot;,\u0026quot;rules\u0026quot;:[{\u0026quot;t\u0026quot;:\u0026quot;eq\u0026quot;,\u0026quot;v\u0026quot;:\u0026quot;Message sent.\u0026quot;,\u0026quot;vt\u0026quot;:\u0026quot;str\u0026quot;},{\u0026quot;t\u0026quot;:\u0026quot;neq\u0026quot;,\u0026quot;v\u0026quot;:\u0026quot;Message sent.\u0026quot;,\u0026quot;vt\u0026quot;:\u0026quot;str\u0026quot;}],\u0026quot;checkall\u0026quot;:\u0026quot;true\u0026quot;,\u0026quot;outputs\u0026quot;:2,\u0026quot;x\u0026quot;:521.1041870117188,\u0026quot;y\u0026quot;:485,\u0026quot;wires\u0026quot;:[[\u0026quot;1a9501606e.fe849\u0026quot;],[\u0026quot;1a14de07ea.ded998\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a14de07ea.ded998\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;delay\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;pauseType\u0026quot;:\u0026quot;rate\u0026quot;,\u0026quot;timeout\u0026quot;:\u0026quot;5\u0026quot;,\u0026quot;timeoutUnits\u0026quot;:\u0026quot;seconds\u0026quot;,\u0026quot;rate\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;nbRateUnits\u0026quot;:\u0026quot;30\u0026quot;,\u0026quot;rateUnits\u0026quot;:\u0026quot;second\u0026quot;,\u0026quot;randomFirst\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;randomLast\u0026quot;:\u0026quot;5\u0026quot;,\u0026quot;randomUnits\u0026quot;:\u0026quot;seconds\u0026quot;,\u0026quot;drop\u0026quot;:false,\u0026quot;x\u0026quot;:764.1041870117188,\u0026quot;y\u0026quot;:526,\u0026quot;wires\u0026quot;:[[\u0026quot;1ad307ac75.70343\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a7c821ed2.91754\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;delay\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;pauseType\u0026quot;:\u0026quot;timed\u0026quot;,\u0026quot;timeout\u0026quot;:\u0026quot;5\u0026quot;,\u0026quot;timeoutUnits\u0026quot;:\u0026quot;seconds\u0026quot;,\u0026quot;rate\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;nbRateUnits\u0026quot;:\u0026quot;30\u0026quot;,\u0026quot;rateUnits\u0026quot;:\u0026quot;second\u0026quot;,\u0026quot;randomFirst\u0026quot;:\u0026quot;1\u0026quot;,\u0026quot;randomLast\u0026quot;:\u0026quot;5\u0026quot;,\u0026quot;randomUnits\u0026quot;:\u0026quot;seconds\u0026quot;,\u0026quot;drop\u0026quot;:false,\u0026quot;x\u0026quot;:771.1041870117188,\u0026quot;y\u0026quot;:621,\u0026quot;wires\u0026quot;:[[\u0026quot;1ad307ac75.70343\u0026quot;]]},{\u0026quot;id\u0026quot;:\u0026quot;1a289d2a8d.919826\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;comment\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;AzureIoTHubで必要となる情報を入力します。\u0026quot;,\u0026quot;info\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;x\u0026quot;:736.1041870117188,\u0026quot;y\u0026quot;:275,\u0026quot;wires\u0026quot;:[]},{\u0026quot;id\u0026quot;:\u0026quot;1af14fac81.3eab5\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;comment\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;３０秒毎に順番に処理をします\u0026quot;,\u0026quot;info\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;x\u0026quot;:774.1041870117188,\u0026quot;y\u0026quot;:485,\u0026quot;wires\u0026quot;:[]},{\u0026quot;id\u0026quot;:\u0026quot;1a63ab930e.7d0b8c\u0026quot;,\u0026quot;type\u0026quot;:\u0026quot;comment\u0026quot;,\u0026quot;z\u0026quot;:\u0026quot;1a885986dc.5c17f8\u0026quot;,\u0026quot;name\u0026quot;:\u0026quot;３０秒の間に届いた最新のメッセージの処理をします\u0026quot;,\u0026quot;info\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;x\u0026quot;:767.1041870117188,\u0026quot;y\u0026quot;:672,\u0026quot;wires\u0026quot;:[]}] 前提条件  Azureに登録できていること  手順 AzureのIoTHubに登録するところから説明していきます。\n##Azure IoTHubの設定 それでは、AzureにログインしてIoTHubを実際に作っていきましょう！\nAzure ポータルを開いていきます。\n新規からモノのインターネット(IoT)をクリックして、IoTHubをクリックします。これから必要な設定を行っていきます。 無事にIoTHubが開かれると複数の入力欄が出るので写真を参考に入力欄を埋めていきましょう。 それでは、必須項目であるIoTHubの名前を入力してください。この名前はドメインでも使われますので他の方と重複するとエラーが出ます。入力欄の右端が緑のチェックが入れば大丈夫です。 次に、価格とスケールティアを変更していきます。この際にFreeを必ず選んでください。Standardを選んだまま作成してしまうと、後からFreeに変更することができず、再度作り直すことになります。\nFreeを選択したらクリックして反映させてください。\nリソースグループは既存ものがあれば、それを使って頂いてもかまいませんが、今回は初めてだという前提で、新規作成で好きなグループ名を入力してください。\nAzureサーバーがある場所を指定することができます。東日本、西日本と選べますのでお好みでどうぞ。\nここまで問題なくできていれば、作成ボタンをクリックしてIoTHubをデプロイしていきます。 数分かかりますのでしばしお待ちを… 無事にIoTHubのデプロイが終わるとこのような画面が表示されます。 この画面では先ほど設定した内容が見れるほか、IoTHubの使用状態を確認することができます。\nデバイスを繋げるために必要な設定を行っていきます。 共有アクセスポリシーからiothubownerをクリックし、プライマリキーをコピーします。 このとき写真で示してある部分をクリックすると簡単にキーをコピーすることができます。\nこのプライマリキーは次の作業で使用します。 この作業からDevice Explorerというツールを使っていきます。 このツールはWindows専用になります。MacやLinuxの場合iothub-explorerを使うようですが、今回は取り扱いません。\n###Device Explorerのダウンロード こちらの**リンク**からダウンロードしてインストールをよろしくお願いします。\nインストールが終わったところでDevice Explorerを使っていこうと思います。\nこのツールでIoTHubに接続できる端末の登録、削除、ほかにはデバイスからIoTHubへの通信モニターになったり、IoTHubからデバイスにデータを送ることができるなどIoTHubに必須のものとなっております。\n説明が長くなりましたが、それではこのDevice Explorerに先ほどのプライマリキーを入力してUpdateをクリックしてください。 プライマリキーが合っていれば、このような表示がされます。この表示がでれば先ほど作ったIoTHubと連携ができるようになります。 これからIoTHubに接続できるデバイスの設定をしていこうと思います。\nこの作業はデバイスごとにIDを割り振る作業になります。 ManagementからCreateをクリックします。 Createをクリックするとこのような画面が出ますので、Device IDに接続するデバイス名を入力してください。\n入力が終わったらCreateをクリックしてください。 無事にデバイスが作れると先ほどのDevice IDを持ったものが増えているはずです。 無事に作成できていれば、次はデバイスに必要な情報をコピーしておきましょう。 今回作成したDevice IDをクリックすると青色の欄が移動しますので、選択された状態で右クリックするとCopy connection string for selected deviceを選んでクリックしてください。\nそうすると必要な情報がコピーされますので、その情報をUniboに登録していきます。 スキルクリエイターの設定をしよう 前もって、スキルクリエイターにログインし、全体図の章に書いてあるjsonファイルをスキルクリエイターにインポートします。\nインポートができたらAzure IoTHubに接続するために必要な情報を入力していきます。\n今回はテンプレートNodeに必要な情報を入力します。動的に切り替えて接続先を変更することなども可能ですが今回はシンプルに作成します。\n   タイトル 入力内容     deviceId Device Explorerでデバイス登録時に入力したDeviceID   key Device Explorerで取得したCopy connection string for selected deviceをkeyと書かれた欄に貼り付けします。一例ですがHostName=unibo.azure-devices.net;DeviceId=unibo;SharedAccessKey=tIrfnS6csQ=このように貼り付けされます。今回必要となるのはSharedAccessKeyの部分となります。上の例であればtIrfnS6csQ=となります。それ以外は削除してください。   protocol http,mqtt,AMQPから選択   data Azure IoTHubに送信したいデータ    次にAzure IoTHub Nodeを設定していきます。 設定項目としては、Hostnameに必要な情報を入力します。 先ほども使ったDevice Explorerで取得したCopy connection string for selected deviceをHostnameに貼り付けします。 一例ですがHostName=unibo.azure-devices.net;DeviceId=unibo;SharedAccessKey=tIrfnS6csQ=このように貼り付けされます。 今回必要となるのはHostNameの部分となります。上の例であればunibo.azure-devices.netとなります。 それ以外は削除してください。\nAzure IoTHubとしての設定はこれまでのもので完了です。 あとはAzure IoTHubからのデータを受信したときにどのような動作をするのかこれから順に説明していきます。\n###データ整形\nAzure IoTHub Nodeでは送信時と受信時にNodeを通ります。送信時にも下のNodeにイベントが行くので注意が必要となります。\n受信時にイベントが発火する場合、データがHEXデータでくるので文字列として活用したい場合は関数Nodeで変換してください。\nmsg.payload = msg.payload.toString(); return msg; このように変換することで文字列として扱えるようになりました。\nその後、送信なのか受信なのかを判定しています。その際の判定はMessage sent.という言葉がメッセージに含まれているかで判定することができます。 これにより、受信時のみUniboを動かすことができるようになりました。\n受信時の処理 受信時にも注意が必要となります。 Azure IoTHubから別々のデータがネットワークなどの影響でまとめて届く場合があります。\nこの時に対策を取っていないと、Nodeが続々と発火する可能性があります。例としては、Uniboの動作が完了せずに終了することやUniboの発話が完了せずに終了するなど予期しない動作をする可能性があります。\n対策としては、delay Nodeにて「レートの制限」や「時限リリースキュー」などがあります。もしくはグローバル変数などを用いフラグ管理するなどで対応することが可能です。\n#まとめ\nUniboとAzure IoTHubを使うことで外部との連携が簡単にできるようになります。 Azure IoTHubを使うことでハードウエアはもちろん、Webとの連携もできるのでぜひ試してみてください。\n",
    "ref": "/blog/2017-05-10-unibo_iothub/"
  },{
    "title": "Grove　説明資料",
    "date": "2017-02-22",
    "description": "Grove　説明資料",
    "body": "Groveとは Groveとは、seeed studioが開発している統一された端子で扱えるセンサーなどがあるモジュールのことです。\nどのモジュールも端子に凹凸があるため初心者でも向きを間違えることなく扱えるメリットや手軽に差し替えることが出来るのでプロトタイピングするときにピッタリのものとなっております。\nどんなものがあるの？ 2017/2/1現在100以上もの周りの環境を取得するためのセンサ、サーボやファンなど動きのあるアクチュエータなどがあります。\n今回はその中からどのようなセンサやアクチュエータなどがあるのか解説していこうと思います。\nセンサ（I2C） I2C デジタル光センサ GROVEシステムのI2C接続デジタル光センサです。\nこのセンサーの特徴は明るさを照度の単位であるlux(ルクス)でとれるところです。\nアナログのセンサーでも明るさを取得する事はできますが、こちらは明確に数値として取得出来るので机の上が適切な明るさかアドバイスすることができたり、植物にちゃんと光があたっているかなど見ることができます。\nTSL2561を搭載し、光強度をデジタル信号に変換します。 検出する光のスペクトラムを、赤外線,フルスペクトラム,人間の可視光の3つのモードから選択できます。\n 検出モード選択可能 高分解能16bitデジタル出力 400KHz I2Cファストモード ダイナミックレンジ 0.1~40,000LUX プログラム可能な割り込み機能(ユーザー設定可能な上下閾値)  I2C カラーセンサ GROVEシステムのI2C接続カラーセンサです。\nこのセンサーの特徴は色を取得することが出来ることです。\n色を識別して、果物を見分ける仕組みを作ってみたり、色によって処理を分けたりするものを作成する事ができます。\n2行8列のフィルターされたフォトダイオードと16bitのADコンバータを内蔵しています。\n 16bitデジタル出力 I2C 400KHz SYNC拡張ピンによる外部光源とのシンクロ可能  プログラム可能な割り込み機能(ユーザー設定可能な上下閾値)    I2C 三軸加速度センサ GROVEシステムの三軸加速度センサです。 ADXL345搭載。\n通信方式はI2Cです。 特徴\n 電源電圧:3V~5V DC   高感度三軸加速度センサ     スタンバイモード時消費電力:0.1μA    センサ（アナログ） 水分センサ GROVEシステムの水分センサです。 水分量による土中の抵抗値変化に応じてアナログ電圧を出力します。\n※増幅回路やケーブルコネクタ部などがむき出しになっています。\n使用される際は、センサ部分以外が濡れないようにご注意下さい\n特徴\n 電源電圧:3.3V~5V  音センサ GROVEシステムの音センサーです。 マイクで拾った音声をオペアンプで増幅して出力します。\n特徴\n 電源電圧:4V~12V(標準5V) 低自己消費電流:4mA(電源5V時) ゲイン調整可能  センサ（デジタル） PIRモーションセンサ GROVEシステムのPIRモーションセンサです。 検出範囲内で動きがあると、SIGピンがHIGHになります。\n 電源電圧:3~5V 検出角度:120度 検出距離:最大6m 検出距離、ホールド時間調整可能  アクチュエータ I2C OLEDディスプレイ128×64 これはOLEDと呼ばれる仕組みで作られたディスプレイです。 特徴としては明るく見やすいディスプレイとなっており、文字だけでなく図形などの表示も可能です。 通信方式はI2Cです。\n##ジョイスティック\nこれはゲームなどでよく見られるジョイスティック型のセンサです。 前後、左右はもちろんクリックにも対応しており、ゲームのコントローラーとしてはもちろん、ラジコンやロボットの 制御の入力として扱うことができます。\nX軸、Y軸がそれぞれの位置に応じたアナログ電圧で出力されます。 ステックを押し込んだ(ボタンが押された)場合、X軸に電源電圧が出力されます。 その間、X軸の位置は不明になります。\n赤外線送受信 これは赤外線を制御できるものです。\n今使われているテレビやエアコンなどのリモコンは赤外線で操作するため、赤外線を制御できるこれを使えば自分好みの学習リモコンを作成することができます。\n受信 こちらで赤外線の信号を受けることができます。\n送信 こちらで赤外線の信号を送信することができます。\nMP3 これは、mp3の音楽を再生できるものです。\n電子工作で音楽を流すのはひと手間かかるのですがこれは手軽に音楽を流せるため、普通の音楽はもちろん、警告音や説明音声を流すことができます。\nなにと繋げられるの？ seeed studioから様々な変換基板が販売されており、変換基板を介して接続する時ことができます。\n接続できるモノの一例です。\n Arduino Raspberry pi mbed Nefry wio node konashi  多くの基板が変換基板を介してではあるものの接続することができます。\n",
    "ref": "/blog/2017-02-22-grove/"
  },{
    "title": "USB　説明資料",
    "date": "2017-02-22",
    "description": "USB　説明資料",
    "body": "USBはUSBメモリやスマートフォンの接続など様々なところで使われています。 その便利さゆえ電子工作でも多く使われています。\n規格としてのusb USBにはいろいろと規格があります。その中からよく使われるものを軽く説明していきます。\nUSB2.0 現在よく使われている規格です。 今後はUSB3.0などの次の規格が普及すると思いますが、電子工作でつかわれるとしては当分USB2.0になると思います。 USB3.0とは通信速度や供給電流などが異なります。\nUSB Type C 最近のスマートフォンやmacなどで採用され、普及しています。 裏表を気にすることなく扱える点が特徴です。\nUSB micro B スマートフォンでよく見られる端子です。 注意点として充電専用のケーブルなどが出回っており、通信が出来ないことがあります。\nUSB B プリンターやスキャナーでよく見られる端子です。 他の端子と比べ、大きいのが特徴です。\n電子工作としてのusb 電子工作でUSBを扱う理由としては、主にpcなどの外部端末と通信するためです。 どのように扱うのか注意点を併せて説明していきます。\nシリアル通信する Arduinoなどで使われてるマイクロコンピューター(マイコン)でUSBを通じてプログラムの書き換えやデバッグなどの理由で通信する際には、マイコンがUSBと直接通信できる機能を持っていないことが大半です。\nなので、USBとマイコンの間を取り持つモノが必要となります。 メジャーなのはFT232Cと呼ばれるICで通信することでPCからプログラムを書き込みが出来るようになります。\nこのあたりの詳しい内容はシリアル通信のページをご覧ください。\n電源として使う USBは5Vの電圧で動いており、モバイルバッテリーなどで1Aの電流を供給することが出来ます。 しかし、PCなどと接続する際には注意が必要になります。 なぜなら、PCなどのUSBでは最大500mAの電流までしか規格上対応しておらず、過電流などの万が一の場合にはPCに対して深刻な影響を与える可能性があるので気をつけて使用してください。\n",
    "ref": "/blog/2017-02-22-usb/"
  },{
    "title": "センサー　説明資料",
    "date": "2017-02-22",
    "description": "センサー　説明資料",
    "body": "センサについて センサとは、人の目や耳などの代わりに機械が周りの状況を取得するために使われる部品です。 音量を取得するものや明るさを取得するものなどその種類は多種多様で人が感じられるものはもちろん、人の感知することのできない微弱な信号を取得することができます。\n1.どんなものを取得することができるのか\n先ほど例に挙げた音量や明るさなどはもちろん、手のジェスチャーを取得するものやモノの色を取得するものなど本当に多種多様です。 センサによっては簡単に入手できないものもありしますので、今回はネットや秋葉原で電子部品を販売している秋月電子通商さんで扱っているものを基準にリストにまとめてみました。\n 音量センサ 距離センサ 方位センサ アルコールセンサ 角度センサ 圧力センサ 放射線センサ 加速度センサ カラーセンサ 明るさセンサ 温度センサ 湿度センサ ジェスチャセンサ  秋月電子通商で扱っているセンサはこれだけではありませんが、目立ったセンサだけでもこれだけあります。 一般的にはこれらのセンサからの入力を使って他のモノを制御します。\n2.センサの選び方\n次にセンサの選び方について簡単に説明します。\n例として 『大体100cm以内に人やモノが来たことを発見したい』 という前提で説明していきます。\nまずはどのようなことを取得したいかをはっきりとさせ、目的の種類のセンサを探します。 今回は距離を測る目的のため今回は距離センサのページを開きます。 距離センサといっても複数の種類があります。 80cmまでしかはかれないものや5.5mまではかれるものなど様々です。 この中から今回の目的に向いたものを選んでみましょう。\nこの時に見るのがデータシートと呼ばれるセンサの性能が記載されている書類です。\nそれを読むのが一番詳しいことが書いてありよいのですが、とても詳しく書かれており、その内容を理解するのはなかなか難しいです。\nもちろんデータシートを読めるようになるのは大切ですが、初心者の方にオススメする方法は秋月電子通商さんのセンサーごとのページに書かれている概要を読み、このセンサーで出来そうなモノにおおざっぱに目星を付け、センサの名前（例えば　○○） ＋ 使いたいボード（例えばArduino）で検索をかけることをお勧めします。\nそのような検索でサンプルプログラムや回路図が記載されているブログなどのサイトが見つかると思うのでその内容を読み問題なく使えそうであればよいと思われます。 全く見つからない場合はプログラムを１から作らないといけないので、そのようなものはなかなか扱えるようにするまでが大変ですのでオススメできません。 見つからない場合は、先ほどのデータシートをよく読みプログラムや回路を作成することで扱えるようになるのですが、少し難易度は上がりますので興味があれば試してみるのも面白いと思います。\n先ほどの選び方で秋月電子通商で扱っている距離センサの中から、シャープ製のGP2Y0A02YKという型番のセンサをえらんでみました。\n距離も0.2mから1.5mまで読めますし、検索すると複数のサイトが見つかりますので問題なく作成出来るでしょう。\n他にもありますがこのセンサは距離の精度やお値段も安いのでこれでいいでしょう。\n距離に精度が必要であれば別のセンサを使えばいいと思います。\n3．センサーとマイコンのつなぎ方\nセンサを選んだあと、普通はセンサとマイコン(センサのデータを処理するところ)を繋げてプログラムを書き、他のモノと連携させていきます。\nその繋げるということですが、どんな風に繋げることができるのか簡単に紹介していきます。\nそもそもマイコンがなぜ必要かと言うと、様々なセンサで取得した値は電気信号であるので何らかの形で私たちが分かるようにしないと扱うことができません。 センサの値を受け取るのにお勧めなのはArduinoとよばれるマイコンボードが本やインターネットの情報が多くて困ったときに助かるので良いです。\n先ほどセンサから電気信号で出ているといいましたが、アナログの値で出力されているものやある規則に沿って通信するものもあるので順に説明していきます。\nアナログ これはシンプルな圧力センサや明るさセンサでよくみられるものです。 電圧が徐々に変化するためこの情報を取得するのには多くは指定されたアナログ入力ピンに接続するのが前提になります。\n##デジタル\nこれはHIGH or LOWの2つの状態を持つセンサです。 スイッチや人感センサなどで見られます。この情報はデジタル入力ピンで取得することができます。\nI2C,SPIなど これは特定の規格で通信できるセンサで、規格によっては複数のセンサを少ない制御線で制御出来たり、アナログのセンサなどに比べて明確な数値でセンサの値を入力出来るなどメリットがあります。 しかしプログラムが少し複雑になるためセンサごとにライブラリーが出回っていることが多いです。\n",
    "ref": "/blog/2017-02-22-sensor/"
  },{
    "title": "デジタル、アナログ　説明資料",
    "date": "2017-02-22",
    "description": "デジタル、アナログ　説明資料",
    "body": "アナログ、デジタルと聞いて何が思い浮かぶでしょうか？\nテレビもありますが、今回は電気的にデジタル、アナログの違いについて説明していきます。\nアナログデジタルの違いって？ 一番の違いはグラフにしたときに分かります。 これは電圧の変化のことを指します。\nデジタルはある(1)ない(0)のどちらかでの表現のためシンプルなデータになっています。 これによってあるかないかはハッキリと見て分かるのですがもともとの値がどれくらい大きかったのか、小さかったのかは分からなくなってしまいました。\nアナログであればどれだけ大きい、小さいのかは分かるのですがデータとしては大きいという状態になります。\nマイコンでみるアナログ、デジタル アナログ、デジタルがどの様なものか分かったところで、マイコン（Arduinoなど）でその値を取得する方法を説明します。\nマイコンの種類により詳細な手順は変わるので注意してください。\nアナログ、デジタルの入出力については、指定されたピンでやりとりします。\n今回のプログラムについての説明は全てArduino Unoを対象にさせていただきます。\nデジタル 入力 Arduino Unoで例えるとdigitalRead関数により、ある(HIGH)ない(LOW)を取得できます。 このときに注意しないといけないのが閾値の値です。\nArduino Unoの場合、閾値は2.5v以上になるとHIGHになり、それ以下はLOWとなります。この閾値はマイコンより異なるので注意が必要です。\nスイッチなどを付けて、押された押されてないという状態を取得する場合、ノイズによって押していないのに押したと誤検知することがあります。 その時にはプルアップという方法をすることで誤検知を減らすことができます。\n出力 Arduino Unoで例えるとdigitalWrite関数により、ある(HIGH)ない(LOW)を出力できます。\nArduino UnoではHIGHのとき5vが出力され、LOWのとき0vが出力されます。\nアナログ 入力 Arduino Unoで例えるとanalogRead関数により、0(0v)-1023(5v)の1024段階で値を取得できます。\n入力する電圧が5vを超える場合、抵抗で分圧をすることで入力することができます。\n分圧については、検索していただくと計算してくれるサイトなどあるので参考にしてください。\n出力 Arduino Unoではアナログ出力はできません。 しかしPWMと呼ばれる方式により、擬似的にアナログ出力をすることができます。　PWMの出力方法はanalogWrite関数により可能となります。0(0v)-255(5v)の256段階で指定することが可能です。\nそれによりLEDをふんわり付けたりすることが可能です。\n",
    "ref": "/blog/2017-02-22-digital_analog/"
  },{
    "title": "回路図　説明資料",
    "date": "2017-02-22",
    "description": "回路図　説明資料",
    "body": "回路図とは、電子部品同士をどのように繋ぐのか図解したものです。\n回路図があることで自分が見たときはもちろん、他の人に伝える時に間違えることなく電子回路を組み立てることができます。\n回路図をみてみよう 回路図にもいろいろと種類があり、線と簡単な図形で描かれたものが一般的です。\nこのような回路図を読むことが出来るとインターネットにある様々な回路を組むことができます。 しかし、この様な回路図を初めて見るような方には難易度が高いです。 上の様な回路図を読みたい場合、他に説明してくれるサイトもありますのでそちらをご覧ください。\n今回は、『Frizing』と呼ばれる回路図作成ソフトの回路図を見てみようと思います。 このソフトで描かれた回路図の特徴は、電子部品をイラストで表してくれるところです。\nボタンを押すとLEDが光る回路を組んでみました。\n実は上のシンプルな図形の回路図とこのFrizingで書いた回路図は同じ意味をもっています。 多くの場合はシンプルな図形の方で表記されるため理解できるとよいとは思いますがこの図形ってなんだっけ？と思うことがあれば検索するようにすればよいと思います。\n回路図でよくみる図    名称 回路図記号 説明     電源  電池やUSBなどから供給される電気の供給源です。プラスとマイナスがあり、回路図では横に２本線があるうちの長い方がプラス、短い方がマイナスとなります。   コンデンサ  コンデンサは電気を蓄えたり放出したりする電子部品です。プラスマイナスの極性が決まっているものもあるので注意が必要です。   抵抗  電流の流れを抑えることができます。LEDと一緒に使うことでLEDが焼けることを保護するこことができます。   スイッチ  オン、オフを切り替えすることができるものです。スイッチは様々なものがあり、どのようなことがしたいかでスイッチを変えるとよいです。   LED  小さい電力で操作でき、光らせることができます。明るいものやマトリックス状になったものなどがあります。    ",
    "ref": "/blog/2017-02-22-circite/"
  },{
    "title": "CocoaBitというオリジナルBitを作った話",
    "date": "2016-12-21",
    "description": "CocoaBitというオリジナルBitを作った話",
    "body": "CocoaBitというlittleBits拡張モジュールを作ってみて気がついたことを書き連ねておきます。\nCocoaBitとは まずはカンタンにCocoaBitについて説明していこうと思います。\nCocoaBitとは、cloudBitと呼ばれるインターネットと通信ができるモジュールが日本では技適のため使えないため、開発された拡張モジュール(拡張Bit)です。\n私が作成しているNefryをベースとしており、NefryのメリットであるWiFiやモジュールの設定を簡単に出来る点を引き継ぎ、littleBits向けにさらにカスタマイズしています。\n(CocoaBitはまだ販売されてませんが、反響があれば…\nCocoaBitのサイトはこちら\nカンタンにCloudBitがどのようなものか分かったところで作ってみて気が付いたメリットデメリットについて話してみようと思います。\nメリット 手軽に試せる なんといってもこれが一番のlittleBitsと繋げられるメリットだと思います！\n普通の電子工作であると半田付けが必要だったり、ブレッドボードにピンを何本も刺さないといけなかったりするのが、littleBitsなら繋ぐだけでいけます！磁石で繋がるので間違えることもない！\n子どもでもあそべる 向きを間違えないため、こどもに任せてしまっても問題なく作ることができます！\n子どもももちろんですが大人でもロジックBitなどもあるので充分に遊ぶことが出来ます！\nデメリット とりあえずお高い　 littleBits自体セットで販売などもされているため若干安くなったりしますが、それでもお高い…\nこれは特に多数のBitがあるとより楽しめるのですが、揃えるまでが…\nときどき接触がわるいときがある 磁石で接続しているため仕方無いのですがカンタンにとれてしまいます。それはlittleBitsの手軽に繋げられるとこと関わるので難しいところです…\n(Bitを留められるボードもあるのでそれで解決するところですが…\nbitの形に制限がある これもlittleBitsの世界なので仕方無いところですが、公式からこのようなサイズで作るといいよ、という情報が出ています。\n(これも無視して作ることも出来ますが、littleBits同士キレイに揃うといいので出来るだけ合わせましょう。\nオリジナルのBitをつくるまで！ 私の備忘録を兼ねて今回のCocoaBitを作成した流れを説明していこうと思います。\nまずは、どんなものを作るのか検討しよう。 どんなものを作るのか検討すれば、必要な部品数が判明すると思われます。その部品から必要となるであろうサイズを割り出します。\nそのサイズからその部品が収まるBitのサイズを選びます。\nこちらのサイト内にあるHDK manualのリンクをクリックします。\n よりプロフェッショナルなTIPSについてはHDK manual やTips \u0026amp; Tricks もチェックして下さい。\n ファイルがダウンロードされるのを待って、Design\\Design Manual\\PDFsの中にあるUser Interface Considerations for littleBits Module Design.pdfを開き部品が収まるサイズを探します。\n無事に見つかったら図の下にある英語の文字を覚えておきましょう。\nさくっと回路を起こしていこう eagleのテンプレートファイルがGitHubで公開されているのでそれをベースに作成するのがお勧めです。\n私はKicadの方が好きなので、採寸をまねて作成しました。 こんな感じにできれば、問題ありません。\n回路ができれば、SeeedStudioさんやElecrowさんを作成してもらいましょう！\n##　部品をそろえよう\nまずは、littleBitsの公式サイトからBITSNAPSというlittleBitsの両端を購入しましょう。\nもしくは、littleBitsのHardware Development Kitを日本の代理店であるKORGさんから購入することもできます。\nあとはほかに必要な部品を購入していてください。\n組み立てよう！ BITSNAPSともろもろの部品をつければ、無事にオリジナルの拡張Bitが出来上がりました！\nこのあたりもSeeedStudioさんやElecrowさんの部品実装サービスを使うと大変便利です。 CocoaBitも作成していただいています。\n#まとめ\nそもそも、littleBitsの拡張することができるなんて思いませんでした。 BitSnaps自体がちょっと高価ではありますが、自分好みのものをつくれるメリットは大きいと思います。\n回路を作成するなど難易度は高めですが、完成度も高いので是非お勧めします！ よいlittleBitsライフを！\n",
    "ref": "/blog/2016-12-21-cocoabit_create/"
  },{
    "title": "Arduino勉強会資料",
    "date": "2016-11-01",
    "description": "Arduino勉強会資料",
    "body": "ArduinoIDEをダウンロードする https://www.arduino.cc/\nこちらからダウンロードしましょう\n早速Lチカしてみよう ハードウエア入門しよう\n// the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output.  pinMode(13, OUTPUT); } // the loop function runs over and over again forever void loop() { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(1000); // wait for a second  digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(1000); // wait for a second } LEDを繋いでみよう 向きを間違えないように！\n本当はちゃんと抵抗を入れましょう。 LED 制限抵抗 で検索！\nプログラムの解説 setup 起動したときやリセットを押した時に一度だけ呼び出されるのが**setup()**の内容\n// the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output.  pinMode(13, OUTPUT); } プログラムの解説 loop 電源が入ってる時に何度も呼び出されるのが**loop()**の内容\n// the loop function runs over and over again forever void loop() { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(1000); // wait for a second  digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(1000); // wait for a second } プログラムの解説 digitalWrite digitalWrite関数は、ピンの出力をHIGH or LOWに変更することができます。\ndigitalWrite(13, HIGH); delay関数は、次のコードまで待つことができます。時間の単位はミリ秒です。 1000ミリ秒＝1秒\ndelay(1000); pinMode関数は、そのピンを入力ピンか出力ピンに指定することができます。\npinMode(13, OUTPUT); for文を使ってみよう！ for文とは何度か繰り返したい処理をするプログラムを作成する時に便利なものです！\nfor(int i=1;i\u0026lt;=5;i++){繰り返したい処理} for(初期値;継続条件;繰り返すたびに変化させたい値){繰り返したい処理} ほかにもwhile文やdo~while文などが繰り返しさせることができます。\nプログラム 実際に試してみようと思います。\nfor(初期値;継続条件;繰り返すたびに変化させたい値){繰り返したい処理} リセットしたときにLEDを20回点滅させるプログラム\n// the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output.  pinMode(13, OUTPUT); for (int i = 1; i \u0026lt;= 20; i++) { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(100); // wait for a second  digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(100); } } // the loop function runs over and over again forever void loop() { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(1000); // wait for a second  digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(1000); // wait for a second } if文を使ってみよう！ if文とは、Arduinoに指定した条件になったときだけある処理をしたいといった分岐したいときに使うものです。\nif(条件式){実行したいもの} プログラムはif文やfor文などの組み合わせでできています。 言語が違うもののスマホのアプリなども同じようにしてできています。\nプログラム スイッチが押されたときだけLEDが点滅するものをつくってみよう\n// the setup function runs once when you press reset or power the board void setup() { // initialize digital pin 13 as an output.  pinMode(13, OUTPUT); pinMode(8, INPUT_PULLUP); } // the loop function runs over and over again forever void loop() { digitalWrite(13, HIGH); // turn the LED on (HIGH is the voltage level)  delay(100); // wait for a second  if (digitalRead(8) == LOW) { digitalWrite(13, LOW); // turn the LED off by making the voltage LOW  delay(100); // wait for a second  } } サーボを動かしてみる サーボとは角度を指定して回すことができるモータです。 線にそれぞれ意味があるのでArduinoと接続を間違えないように！ プログラム ArduinoIDEにプログラムを書いてみましょう\n#include \u0026lt;Servo.h\u0026gt;  Servo myservo; // create servo object to control a servo  // twelve servo objects can be created on most boards  int pos = 0; // variable to store the servo position  void setup() { myservo.attach(9); // attaches the servo on pin 9 to the servo object } void loop() { for(pos = 0; pos \u0026lt;= 180; pos += 1) // goes from 0 degrees to 180 degrees  { // in steps of 1 degree  myservo.write(pos); // tell servo to go to position in variable \u0026#39;pos\u0026#39;  delay(15); // waits 15ms for the servo to reach the position  } for(pos = 180; pos\u0026gt;=0; pos-=1) // goes from 180 degrees to 0 degrees  { myservo.write(pos); // tell servo to go to position in variable \u0026#39;pos\u0026#39;  delay(15); // waits 15ms for the servo to reach the position  } } RGBLEDを動かしてみよう！ 前もって、ライブラリをインストールしておきましょう！\nプログラム #include \u0026lt;Adafruit_NeoPixel.h\u0026gt; // RGBLEDに出力するピン番号 #define RGBLED_OUTPIN 2 // Arduinoにぶら下がっているRGBLEDの個数 #define NUMRGBLED 1 // RGBLEDのライブラリを生成する(色指定はRGBの並びで行う、LEDの速度は800KHzとする) Adafruit_NeoPixel RGBLED = Adafruit_NeoPixel(NUMRGBLED, RGBLED_OUTPIN, NEO_RGB + NEO_KHZ800); void setup() { RGBLED.begin() ; // RGBLEDのライブラリを初期化する RGBLED.setBrightness(50) ; // 明るさの指定(0-255)を行う RGBLED.setPixelColor(0, 0,150,0) ; // 適度に明るい緑の色。(R=0,G=150,B=0) RGBLED.show() ; // LEDにデータを送り出す } void loop() { } ",
    "ref": "/blog/2016-11-01-arduino/"
  },{
    "title": "Azure IoT HubをESP8266で使おう！",
    "date": "2016-09-05",
    "description": "Azure IoT HubをESP8266で使おう！",
    "body": "日本での発売から一年がたち多数の作例が出てくる「ESP8266」(ESP-WROOM-02)をもっと使いこなしてみませんか？\n今回はAzureのサービスの一つであるIoTHub、それを簡単に扱えるライブラリーを作ったので紹介してみようと思います。\nちょこっと宣伝 ところどころで出てくるESP8266の基板ですが、私が作成した「Nefry」(ねふりー)という基板を使っています。\ndotstudioさんにて販売中です！！\nUSBに直接繋げられたり、Webページ上でWiFiの設定やESP8266の端末設定ができるようになっていたりとESP8266をより簡単に扱えるものになっています。\n詳しくはLigブログで記事をいくつか載せていますのでご覧ください。\n自作したオリジナルIoTデバイス「Nefry」とインターネットを繋いでみた\nWebサービス同士を連携できる「IFTTT」と自作IoTデバイスを繋いで生活を便利にしてみた\nAzure IoT Hub って？ IoT Hubは、その名の通りIoTデバイスとクラウドを繋ぐHubとなるサービスです。 似たようなサービスとして「Event Hubs」がありますが、Event Hubsとの大きな違いは2つあります。\nIoTHubの優れた点\n デバイスとクラウドとの双方向通信が可能。(Event Hubsはデバイス→クラウドの一方のみ) デバイス毎にIDを登録して認証する為、よりセキュアに利用できる。(Event HubsはEvent Hubsごとの許可)  \nhttp://qiita.com/hiiyan0402/items/9c93d9673114675a57d4\n用意するもの  ESP8266(ESP-WROOM-02) Azure アカウント ArduinoIDE Arduino core for ESP8266 WiFi chip(https://github.com/esp8266/Arduino) AzureIoTHubライブラリー(https://github.com/wamisnet/Azure-iothub-mqtt-esp8266)  IoTHubで通信をしてみる 今回はESP8266からIoTHubで通信するところまでを作っていきます。\nAzure IoTHubの設定 それでは、AzureにログインしてIoTHubを実際に作っていきましょう！\nAzure ポータルを開いていきます。\n新規からモノのインターネット(IoT)をクリックして、IoTHubをクリックします。これから必要な設定を行っていきます。\n無事にIoTHubが開かれると複数の入力欄が出るので写真を参考に入力欄を埋めていきましょう。 それでは、必須項目であるIoTHubの名前を入力してください。この名前はドメインでも使われますので他の方と重複するとエラーが出ます。入力欄の右端が緑のチェックが入れば大丈夫です。 次に、価格とスケールティアを変更していきます。この際にFreeを必ず選んでください。Standardを選んだまま作成してしまうと、後からFreeに変更することができず、再度作り直すことになります。\nFreeを選択したらクリックして反映させてください。\nリソースグループは既存ものがあれば、それを使って頂いてもかまいませんが、今回は初めてだという前提で、新規作成で好きなグループ名を入力してください。\nAzureサーバーがある場所を指定することができます。東日本、西日本と選べますのでお好みでどうぞ。\nここまで問題なくできていれば、作成ボタンをクリックしてIoTHubをデプロイしていきます。\n数分かかりますのでしばしお待ちを…\n無事にIoTHubのデプロイが終わるとこのような画面が表示されます。 この画面では先ほど設定した内容が見れるほか、IoTHubの使用状態を確認することができます。\nデバイスを繋げるために必要な設定を行っていきます。 共有アクセスポリシーからiothubownerをクリックし、プライマリキーをコピーします。 このとき写真で示してある部分をクリックすると簡単にキーをコピーすることができます。\nこのプライマリキーは次の作業で使用します。 この作業からDevice Explorerというツールを使っていきます。 このツールはWindows専用になります。MacやLinuxの場合iothub-explorerを使うようですが、今回は取り扱いません。\nDevice Explorerのダウンロード こちらの**リンク**からダウンロードしてインストールをよろしくお願いします。\nインストールが終わったところでDevice Explorerを使っていこうと思います。\nこのツールでIoTHubに接続できる端末の登録、削除、ほかにはデバイスからIoTHubへの通信モニターになったり、IoTHubからデバイスにデータを送ることができるなどIoTHubに必須のものとなっております。\n説明が長くなりましたが、それではこのDevice Explorerに先ほどのプライマリキーを入力してUpdateをクリックしてください。\nプライマリキーが合っていれば、このような表示がされます。この表示がでれば先ほど作ったIoTHubと連携ができるようになります。\nこれからIoTHubに接続できるデバイスの設定をしていこうと思います。\nこの作業はデバイスごとにIDを割り振る作業になります。 ManagementからCreateをクリックします。\nCreateをクリックするとこのような画面が出ますので、Device IDに接続するデバイス名を入力してください。\n入力が終わったらCreateをクリックしてください。\n無事にデバイスが作れると先ほどのDevice IDを持ったものが増えているはずです。\n無事に作成できていれば、次はデバイスに必要な情報をコピーしておきましょう。 今回作成したDevice IDをクリックすると青色の欄が移動しますので、選択された状態で右クリックするとCopy connection string for selected deviceを選んでクリックしてください。\nそうすると必要な情報がコピーされますので、その情報をESP8266に書き込むプログラムに貼り付けます。\nデバイスの設定 ArduinoIDEとArduino core for ESP8266 WiFi chip(https://github.com/esp8266/Arduino) の導入が終わっている前提で解説していきます。 導入が済んでなければ、Qiitaに情報がありますのでそちらをご覧ください。\nそれでは、AzureIoTHubライブラリー(https://github.com/wamisnet/Azure-iothub-mqtt-esp8266) をこちらのリンクから移動して写真を参考にZipでダウンロードしてください。\nダウンロード終わりましたら、ArduinoIDEを開いてスケッチ→ライブラリーをインクルード→.zip形式のライブラリーをインストールをクリックし、先ほどダウンロードしたファイルを選んでください。そうすると自動的にライブラリーのインストールが始まります。\n問題なくライブラリーのインストールが完了すると**ライブラリーが追加されました。**と表示されます。\nライブラリーがインストールしたところで実際に使ってみようと思います。\nファイル→スケッチの例→AzureIoTHubの中にあるAzure-iothub-mqtt-esp8266が選択できますので選択してください。\nサンプルプログラムが表示されますので、それを使ってAzureIoTHubに接続してみようと思います。\nそれでは、サンプルプログラムの内容の紹介と変更部分を説明していきます。\nESP8266が接続するWiFiアクセスポイントの設定をWiFi.beginにSSID,Passwordをそれぞれ入力してください。 Azure.beginには、先ほどDevice Explorerで取得したキーを張り付けてください。 例：Azure.begin(\u0026quot;HostName=YourHost.azure-devices.net;DeviceId=YourDevice;SharedAccessKey=\u0026quot;); 注意としては、張り付けたときに両端に**\u0026quot;**(ダブルクォーテーション)を必ずつけてあることを確認してください。\nWiFi.begin(\u0026#34;SSID\u0026#34;, \u0026#34;PASS\u0026#34;); Azure.begin(\u0026#34;Your Key\u0026#34;); //YourKey Example:\u0026#34;HostName=YourHost.azure-devices.net;DeviceId=YourDevice;SharedAccessKey=\u0026#34;  Azureからのデータの取得はこの関数で行います。 Azure.setCallback(azureCallback); このazureCallbackは別で関数宣言してください。引数はStringでAzureから届いたデータを渡されますのでそのデータを活用してみてください。 サンプルプログラムでは、シリアルで表示するようになっています。\nAzure.setCallback(azureCallback); void azureCallback(String s) { Serial.print(\u0026#34;azure Message arrived [\u0026#34;); Serial.print(s); Serial.println(\u0026#34;] \u0026#34;); } 簡単ではありますが、2点を注意して書き換えてください。\n続いて、loopの中を簡単に解説していきます。\nWiFiに接続できたとき、Azureと通信を開始します。 Azure.connect()にてAzure IoTHubと接続する処理を行ってます。 Azure.push(\u0026amp;a);にてAzure IoTHubにデータ送信処理を行ってます。\nvoid loop() { if (WiFi.status() == WL_CONNECTED) { Azure.connect(); DataElement a = DataElement();//Azureに送るデータをJsonで作っていきます。  a.setValue(\u0026#34;EspAnalog\u0026#34;, analogRead(A0)); Azure.push(\u0026amp;a); Serial.println(\u0026#34;pushed\u0026#34;); delay(2000); } else { Serial.println(\u0026#34;Not connected to the Internet\u0026#34;); delay(250); } } 実際に動かしてみよう AzureIoTHub→Nefry これはAzureIoTHub(Device explorer)からNefry(ESP8266が中に入ってる)へデータを送っています。届いたときにLEDが点滅するようになっています。 そこまでラグなく点滅しているのが見えると思います。\nこちらはAzureIoTHub(Device explorer)とNefryのコンソール画面になりますが、ほとんどクリックしたタイミングでデータが届いていると思います。\nNefry→AzureIoTHub こちらはNefry(ESP8266)からAzureIoTHubにデータを送っています。 GROVEのジョイスティックをつかってアナログ値をAzureIoTHubへデータを1秒ごとに送っています。\nDevice explorerにて届いた値を見ることができます。 今回はESPAnalogという項目にデータが入っているのが見ずらいですがわかると思います。\nまとめ 今回このライブラリーを作るまで、お世話になりました@matsujirushi さん、@onoche　さんこの場を借りて御礼を申し上げます。\nIoTHub×ESP8266の情報があまり多くなく四苦八苦しましたが、このライブラリーを使ってAzureにある機械学習やPower BIなど様々な仕組みと組み合わせて面白いものを作ってもらえたらうれしいです。\n",
    "ref": "/blog/2016-09-05-azure/"
  },{
    "title": "ESP8266で静的なIPをわりふってみる",
    "date": "2016-04-27",
    "description": "ESP8266で静的なIPをわりふってみる",
    "body": "家のネット環境によってはDHCPでIPアドレスを取得するより、静的（static）なIPで割り振りたいという要望を聞きましたのでソースコードを公開します。\n#表示内容\nESP8266のlocalIP ゲートウェイのIP サブネットマスク ESP8266のmacAddress\n#コード\n#include \u0026lt;ESP8266WiFi.h\u0026gt;#define debug Serial /* IPアドレスをDHCPではなく手動で割り振ることをすることができる。 localIP:moduleのIP gateway:デフォルトゲートウエイ subnet:サブネットマスク DNSは指定しなくてよい。 config(IPAddress local_ip, IPAddress gateway, IPAddress subnet, IPAddress dns1 = (uint32_t)0x00000000, IPAddress dns2 = (uint32_t)0x00000000) */ void setup(){ debug.begin(115200); WiFi.config(IPAddress(192,168,1,2),IPAddress(192,168,1,1),IPAddress(255,255,255,0)); debug.print(\u0026#34;Local IP :\u0026#34;);debug.println(address(WiFi.localIP())); debug.print(\u0026#34;Gateway IP:\u0026#34;);debug.println(address(WiFi.gatewayIP())); debug.print(\u0026#34;SubnetMask:\u0026#34;);debug.println(address(WiFi.subnetMask())); debug.print(\u0026#34;macAddress:\u0026#34;);debug.println(WiFi.macAddress()); } void loop(){ } String address(IPAddress ip){ String ipStr = String(ip[0]) + \u0026#39;.\u0026#39; + String(ip[1]) + \u0026#39;.\u0026#39; + String(ip[2]) + \u0026#39;.\u0026#39; + String(ip[3]); return ipStr; } ",
    "ref": "/blog/2016-04-27-esp8266_staticip/"
  },{
    "title": "ESP8266でWPSを実装してみる",
    "date": "2016-04-22",
    "description": "ESP8266でWPSを実装してみる",
    "body": "http://bbs.espressif.com/viewtopic.php?t=1096\nソース元はこちら\nESP-WROOM-02にはWPSでWiFiの設定をすることができる環境がつくられているようなのでその解説と結果を報告します。\n環境 Arduino IDE 1.6.7 Arduino core for ESP8266 WiFi chip (https://github.com/esp8266/Arduino) v2.2.0\nArduino coreのバージョンが古いと実装されてない可能性があります。\nコード #include \u0026lt;ESP8266WiFi.h\u0026gt; void Wifi_wait(); void setup() { Serial.begin(115200); WiFi.mode(WIFI_STA); //WiFi.begin(\u0026#34;\u0026#34;,\u0026#34;\u0026#34;)このようにすることでWPSで保存したデータがある場合そちらに接続するようになる  WiFi.begin(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;); Wifi_wait(); // Wifiに接続していないときにはWPSを開始します  if (WiFi.status() != WL_CONNECTED) { Serial.println(\u0026#34;\\nAttempting connection ...\u0026#34;); WiFi.beginWPSConfig(); Wifi_wait(); if (WiFi.status() == WL_CONNECTED) { Serial.println(\u0026#34;Connected!\u0026#34;); Serial.println(WiFi.localIP()); Serial.println(WiFi.SSID()); Serial.println(WiFi.macAddress()); } else { Serial.println(\u0026#34;Connection failed!\u0026#34;); } } else { Serial.println(\u0026#34;\\nConnection already established.\u0026#34;); } } void loop() { } void Wifi_wait() { int wait=0; Serial.println(\u0026#34;WiFi　connecting\u0026#34;); while (wait \u0026lt; 20) { if (WiFi.status() == WL_CONNECTED) { Serial.println(\u0026#34;WiFi connected\u0026#34;); return; } Serial.print(\u0026#34;.\u0026#34;); wait++; delay(250); } Serial.println(\u0026#34;Connect timed out\u0026#34;); } 使いかた Wifiに接続失敗したときにWPSで設定中のルータをさがしに行きます。\nWPSで設定中のものがあったとき、ESP-WROOM-02はそのルータから設定を取得し、今後そのルータに接続するようになります。\nWifiに詳しくない人でもESP-WROOM-02を手軽に扱えるようになる技術だと思います、\n結果 私の所持しているWifiルータではWPSでの接続は成功しませんでした…\nそれは、私の持っているWifiルータが悪いのかもしれないのでもしよければ、試して成功したかどうか教えてください。\n",
    "ref": "/blog/2016-04-22-esp8266_wps/"
  },{
    "title": "Contact",
    "date": "0001-01-01",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
